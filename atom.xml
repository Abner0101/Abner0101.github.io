<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Old C</title>
  
  <subtitle>老黄瓜VIP专属折腾区</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jdsheng.cn/"/>
  <updated>2020-06-09T14:28:20.784Z</updated>
  <id>https://jdsheng.cn/</id>
  
  <author>
    <name>老黄瓜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue常见问题及解决方法（三）</title>
    <link href="https://jdsheng.cn/2020/06/09/vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/09/vue常见问题及解决方法（三）/</id>
    <published>2020-06-09T14:22:38.385Z</published>
    <updated>2020-06-09T14:28:20.784Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新博客了，很长一段时间在刚python，不得不说python真是方便，后面可能回更新一些<a id="more"></a>python的学习历程。好，废话不说，进入主题。。</p><h5 id="1-监听某个DOM节点，当其失去焦点（鼠标点击到页面其他标签）时，触发相应的事件。"><a href="#1-监听某个DOM节点，当其失去焦点（鼠标点击到页面其他标签）时，触发相应的事件。" class="headerlink" title="1.监听某个DOM节点，当其失去焦点（鼠标点击到页面其他标签）时，触发相应的事件。"></a>1.监听某个DOM节点，当其失去焦点（鼠标点击到页面其他标签）时，触发相应的事件。</h5><p>以下是一个点击按钮，就会弹出框，点击页面其他地方，就会关闭弹出框的例子。</p><ul><li>DOM结构：</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=<span class="hljs-string">"elLogout"</span>&gt;</span><br><span class="line">      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"userControl"</span> @click=<span class="hljs-string">"showLogoutdiv = !showLogoutdiv"</span>&gt;</span><br><span class="line">        &lt;svg <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"iconuser"</span> aria-hidden=<span class="hljs-string">"true"</span>&gt;</span><br><span class="line">          &lt;use xlink:href=<span class="hljs-string">"#icon-user"</span>&gt;&lt;<span class="hljs-regexp">/use&gt;</span></span><br><span class="line"><span class="hljs-regexp">       &lt;/</span>svg&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;div class="userLogout" v-show="showLogoutdiv"&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;el-button type="primary" plain size="small" @click="toLogout"&gt;退出&lt;/</span>el-button&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><ul><li>js部分：</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">  data () &#123; </span><br><span class="line">  showLogoutdiv:<span class="hljs-literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>,e =&gt; &#123;  <span class="hljs-comment">//监听页面的点击事件</span></span><br><span class="line">      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.$refs.elLogout)&#123;  <span class="hljs-comment">//判断是否存在该标签对象</span></span><br><span class="line">      <span class="hljs-comment">//contains()判断DOM元素的包含关系,如果两个DOM对象一样，则返回true</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">this</span>.$refs.elLogout.contains(e.target))&#123;</span><br><span class="line">          <span class="hljs-keyword">this</span>.showLogoutdiv = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//点击其他区域关闭</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>拓展：contains()函数的用法</p><ul><li>题目描述:</li></ul><blockquote><p>查找两个节点的最近的一个共同父节点，可以包括节点自身</p></blockquote><ul><li>输入描述:</li></ul><blockquote><pre><code>oNode1 和 oNode2 在同一文档中，且不会为相同的节点</code></pre></blockquote><p><strong>递归实现：</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">commonParentNode</span>(<span class="hljs-params">oNode1, oNode2</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(oNode1.contains(oNode2))&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> oNode1</span><br><span class="line">    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> commonParentNode(oNode1.parentNode, oNode2)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>迭代实现：</strong><br>方式一：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">commonParentNode</span>(<span class="hljs-params">oNode1, oNode2</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(;;oNode1=oNode1.parentNode)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(oNode1.contains(oNode2))&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> oNode1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">commonParentNode</span>(<span class="hljs-params">oNode1, oNode2</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(oNode1.contains(oNode2))&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> oNode1</span><br><span class="line">        &#125;</span><br><span class="line">        oNode1 = oNode1.parentNode</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-计算属性computed方法内传参"><a href="#2-计算属性computed方法内传参" class="headerlink" title="2.计算属性computed方法内传参"></a>2.计算属性computed方法内传参</h5><ul><li>index.vue</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-circle</span><br><span class="line">  v-model=<span class="hljs-string">"Ratedata[index].currentRate"</span></span><br><span class="line">     color=<span class="hljs-string">"#2462E8"</span></span><br><span class="line">     fill=<span class="hljs-string">"#fff"</span></span><br><span class="line">     layer-color=<span class="hljs-string">"#E6E6E6"</span></span><br><span class="line">     :rate=<span class="hljs-string">"Ratedata[index].rate"</span></span><br><span class="line">     :text=<span class="hljs-string">"text(index)"</span></span><br><span class="line">     :speed=<span class="hljs-string">"60"</span></span><br><span class="line">     :clockwise=<span class="hljs-string">"true"</span></span><br><span class="line">     :stroke-width=<span class="hljs-string">"40"</span></span><br><span class="line"> /&gt;</span><br></pre></td></tr></table></figure><ul><li>computed中text方法传递index，利用了闭包传值</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  text() &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;</span><br><span class="line">          <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.Ratedata[index].currentRate.toFixed(<span class="hljs-number">0</span>) + <span class="hljs-string">'%'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没更新博客了，很长一段时间在刚python，不得不说python真是方便，后面可能回更新一些&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://jdsheng.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>记Hexo + Github Pages博客搭建</title>
    <link href="https://jdsheng.cn/2020/06/06/%E8%AE%B0Hexo%20+%20Github%20pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://jdsheng.cn/2020/06/06/记Hexo + Github pages博客搭建/</id>
    <published>2020-06-06T15:00:23.902Z</published>
    <updated>2019-08-19T15:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>很早之前就听说可以通过github pages来搭建博客，但是由于种种原因（就是懒），迟迟没有付诸行动，终于，趁着暑假，开始了我的hexo+github pages 搭建博客的踩坑记，折腾了两天，终于成功搭建好了博客，接下来，开始分享搭建本博客的过程中以及各种坑。。。<a id="more"></a></p><h2 id="用Hexo-Gitpages的原因"><a href="#用Hexo-Gitpages的原因" class="headerlink" title="用Hexo + Gitpages的原因"></a>用Hexo + Gitpages的原因</h2><ul><li>不用配置服务器</li><li>不用数据库</li><li>访问速度相当快</li><li>没有安全性可言</li><li>使用户可更注重博客内容</li><li>支持markdown<br>还有就是hexo相对来说轻巧一些，生成文章的速度也比较快（静态博客生成页面时都是要整站生成，所以，页面越多，速度就越慢）</li></ul><h2 id="从hexo开始"><a href="#从hexo开始" class="headerlink" title="从hexo开始"></a>从hexo开始</h2><p>首先本地得装上了node.js、git和hexo</p><p>安装git：<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></p><p>安装nodejs：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js官网</a></p><p>hexo：<a href="https://hexo.io/" target="_blank" rel="noopener">hexo官网</a></p><p>hexo使用npm安装（过程如下）</p><figure class="highlight mipsasm hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="hljs-keyword">install </span>hexo-cli -g</span><br><span class="line">hexo init <span class="hljs-keyword">blog</span></span><br><span class="line"><span class="hljs-keyword">cd </span><span class="hljs-keyword">blog</span></span><br><span class="line"><span class="hljs-keyword">hexo </span>server</span><br></pre></td></tr></table></figure><p>然后打开<a href="http://localhost:4000/就可以查看效果了。" target="_blank" rel="noopener">http://localhost:4000/就可以查看效果了。</a><br>如果4000端口打不开，可以通过以下命令更改端口访问(改为3000）</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p <span class="hljs-number">3000</span></span><br></pre></td></tr></table></figure><p><em>注</em>：Hexo依赖Node.js和Git，需要先安装。<br><em>hexo的使用可参详<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官网文档</a>。</em></p><p>常用命令：</p><figure class="highlight delphi hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g  生成静态博客，即重新生成<span class="hljs-keyword">public</span>文件夹</span><br><span class="line">hexo s  本地预览调试 (一般组合使用 hexo g &amp;&amp; hexo s)</span><br><span class="line">hexo d (发布到github)</span><br><span class="line">hexo n (执行该命令之后在source/_posts目录下产生&lt; blog <span class="hljs-keyword">name</span> &gt;.md文件，这是你的一篇新博客。可以在markdown工具下编写，markdown工具在网上搜有一大堆，比如本博主使用的csdn的markdown工具，具体怎么使用也可以自己百度啦~）</span><br></pre></td></tr></table></figure><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><p>在github上创建一个仓库，仓库必须命名为：你的github账号.github.io<br>(例如我的账号为Abner0101，所以我的仓库名为：Abner0101.github.io)</p><p>配置hexo  config.yml，修改Deployment</p><figure class="highlight less hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">deploy</span>:</span><br><span class="line">  <span class="hljs-attribute">type</span>: git</span><br><span class="line">  <span class="hljs-attribute">repo</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:你的帐号/你的帐号.github.com.git</span><br><span class="line">  <span class="hljs-attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>然后执行命令：</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">hexo clean</span></span><br><span class="line"><span class="hljs-attribute">hexo g</span></span><br><span class="line"><span class="hljs-attribute">hexo d</span></span><br></pre></td></tr></table></figure><p>此时，在博客的根目录下会生成一个文件夹：.deploy</p><p>然后我们把这个文件夹里面的文件都push到刚才新建那个项目就OK了。几分钟过后，就可以打开：你的用户名.github.io 看到你的博客了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>在项目的根目录，新建名为CNAME的文件，内容为：你的域名，例如我的就是：jdsheng.cn<br>再到把你的域名指向你的用户名.github.io，几分钟过后，就可以看到成功的诞生了。</p><h2 id="NexT主题与第三方服务"><a href="#NexT主题与第三方服务" class="headerlink" title="NexT主题与第三方服务"></a>NexT主题与第三方服务</h2><p>我使用的主题是next，在你的博客根目录下gitbash，安装next主题</p><figure class="highlight vim hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/iissnan/hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span></span><br></pre></td></tr></table></figure><p>打开<strong><em>站点配置文件</em></strong>(_config.yml)，增加一行：</p><figure class="highlight autoit hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="hljs-keyword">next</span></span><br></pre></td></tr></table></figure><p>进入themes/next，修改<strong><em>主题配置文件</em></strong> _config.yml 定位到scheme参数来选择自己喜欢的主题风格：</p><figure class="highlight avrasm hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-symbol">scheme:</span> Mist</span><br></pre></td></tr></table></figure><p>关于next主题更多的配置（添加评论，分享，喜欢，添加头像等功能）可以参考<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a></p><h2 id="关于更换电脑，如何继续写博客"><a href="#关于更换电脑，如何继续写博客" class="headerlink" title="关于更换电脑，如何继续写博客"></a>关于更换电脑，如何继续写博客</h2><p>1.将你原来的电脑上已经配置好的源代码项目拷贝到你新的电脑，注意，无需拷贝全部，只需要拷贝一下几个目录：</p><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><p>将这些目录放在一个目录下，例如：blog/</p><p>2.在你的新电脑上配置hexo环境：安装git、安装node.js<br>3.安装hexo，执行命令：</p><figure class="highlight cmake hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="hljs-keyword">install</span> -g hexo</span><br></pre></td></tr></table></figure><p>4.安装好之后，在hexo目录下gitbash，执行命令：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="hljs-keyword">install</span></span><br><span class="line">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></span><br><span class="line">npm <span class="hljs-keyword">install</span> hexo-generator-feed <span class="hljs-comment">--save</span></span><br><span class="line">npm <span class="hljs-keyword">install</span> hexo-generator-sitemap <span class="hljs-comment">--save</span></span><br></pre></td></tr></table></figure><p>5.部署，执行命令：</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　<span class="hljs-attribute">hexo</span> g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><blockquote><p>在执行第5步时，可能会出错，不知道你们会不会遇到，反正我是遇到了，在部署提交代码的时候出现了这个问题：</p></blockquote><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*** Please tell me who you are.</span><br><span class="line">Run</span><br><span class="line">  git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"you@example.com"</span></span><br><span class="line">  git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"Your Name"</span></span><br><span class="line"><span class="hljs-keyword">to</span> <span class="hljs-builtin-name">set</span> your account<span class="hljs-string">'s default identity.</span></span><br><span class="line"><span class="hljs-string">Omit --global to set the identity only in this repository.</span></span><br></pre></td></tr></table></figure><p>所以解决方法是当出现这个上述提示后 接着补充<br>你在命令行中执行</p><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="hljs-built_in"> config </span>--global user.email  <span class="hljs-string">"你的邮箱"</span></span><br><span class="line">git<span class="hljs-built_in"> config </span>--global user.name  <span class="hljs-string">"你的名字"</span></span><br></pre></td></tr></table></figure><p><em>（注意 “ 前面是有空格的）</em><br>输入后在接着执行hexo g、hexo d即可！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早之前就听说可以通过github pages来搭建博客，但是由于种种原因（就是懒），迟迟没有付诸行动，终于，趁着暑假，开始了我的hexo+github pages 搭建博客的踩坑记，折腾了两天，终于成功搭建好了博客，接下来，开始分享搭建本博客的过程中以及各种坑。。。&lt;/p&gt;
    
    </summary>
    
      <category term="BLOG" scheme="https://jdsheng.cn/categories/BLOG/"/>
    
    
      <category term="hexo" scheme="https://jdsheng.cn/tags/hexo/"/>
    
      <category term="Next" scheme="https://jdsheng.cn/tags/Next/"/>
    
      <category term="github" scheme="https://jdsheng.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>用jQuery实现简单的图片轮播效果</title>
    <link href="https://jdsheng.cn/2020/06/06/%E7%94%A8jQuery%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD%E6%95%88%E6%9E%9C%20/"/>
    <id>https://jdsheng.cn/2020/06/06/用jQuery实现简单图片轮播效果 /</id>
    <published>2020-06-06T15:00:23.873Z</published>
    <updated>2019-10-02T03:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下代码使用了jQuery来实现简单的图片轮播效果：</p><h2 id="html部分："><a href="#html部分：" class="headerlink" title="html部分："></a><strong>html部分：</strong></h2><a id="more"></a><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"slider"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"slider_list"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"4.jpg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"5.jpg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"6.jpg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"7.jpeg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"8.jpg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"slider_icon"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn_act"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrow left"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"slider_left"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrow right"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"slider_right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="css部分："><a href="#css部分：" class="headerlink" title="css部分："></a><strong>css部分：</strong></h2><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-id">#slider</span>&#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">750px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">450px</span>;</span><br><span class="line"><span class="hljs-attribute">margin</span>: <span class="hljs-number">10%</span> auto;</span><br><span class="line"><span class="hljs-attribute">position</span>: relative;</span><br><span class="line"><span class="hljs-attribute">border</span>: <span class="hljs-number">0px</span> red solid</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-selector-id">#slider</span> <span class="hljs-selector-tag">img</span>&#123;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">750px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">li</span>&#123;</span><br><span class="line"><span class="hljs-attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.slider_list</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="line"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="line"><span class="hljs-attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.slider_list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first-child</span>&#123;</span><br><span class="line"><span class="hljs-attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.arrow</span>&#123;</span><br><span class="line"><span class="hljs-attribute">display</span>: none;</span><br><span class="line"><span class="hljs-attribute">width</span>:<span class="hljs-number">40px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="line"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">2</span>);</span><br><span class="line"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="line"><span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="line"><span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.left</span>&#123;</span><br><span class="line"><span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.right</span>&#123;</span><br><span class="line"><span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.arrow</span> <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="line"><span class="hljs-attribute">display</span>: none;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><br><span class="line"><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#fff</span>;</span><br><span class="line"><span class="hljs-attribute">border-left</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.slider_left</span>&#123;</span><br><span class="line"><span class="hljs-attribute">margin-top</span>:<span class="hljs-number">25px</span>;</span><br><span class="line"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">15px</span>;</span><br><span class="line"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.slider_right</span>&#123;</span><br><span class="line"><span class="hljs-attribute">margin-top</span>:<span class="hljs-number">25px</span>;</span><br><span class="line"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>;</span><br><span class="line"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">135deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.arrow</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">background</span>: <span class="hljs-number">#444</span>&#125;</span><br><span class="line"><span class="hljs-selector-id">#slider</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.arrow</span>&#123;<span class="hljs-attribute">display</span>:block;&#125;</span><br><span class="line"><span class="hljs-selector-id">#slider</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.arrow</span> <span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">display</span>:block;&#125;</span><br><span class="line"><span class="hljs-selector-class">.slider_icon</span>&#123;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">195px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="line"><span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">hsla</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0%</span>,<span class="hljs-number">100%</span>,.<span class="hljs-number">3</span>);</span><br><span class="line"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="line"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0px</span>;</span><br><span class="line"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="line"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100px</span>;</span><br><span class="line"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">30px</span>;</span><br><span class="line"><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;</span><br><span class="line"><span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.slider_icon</span> <span class="hljs-selector-tag">i</span>&#123;</span><br><span class="line"><span class="hljs-attribute">display</span>: inline-block;</span><br><span class="line"><span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;</span><br><span class="line"><span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;</span><br><span class="line"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="line"><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">11px</span>;</span><br><span class="line"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">11px</span>;</span><br><span class="line"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.slider_icon</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">4</span>);&#125;</span><br><span class="line"><span class="hljs-selector-class">.btn</span>&#123;</span><br><span class="line"><span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.btn_act</span>&#123;</span><br><span class="line"><span class="hljs-attribute">background</span>: <span class="hljs-number">#FCD705</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js部分："><a href="#js部分：" class="headerlink" title="js部分："></a><strong>js部分：</strong></h2><figure class="highlight perl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var count=<span class="hljs-number">0</span>;</span><br><span class="line">var $li=$(<span class="hljs-string">".slider_list&gt;li"</span>);</span><br><span class="line">var timer=setInterval(<span class="hljs-string">"next()"</span>,<span class="hljs-number">4000</span>);</span><br><span class="line">function <span class="hljs-keyword">next</span>() &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="hljs-keyword">if</span> (count==$li.length) &#123;</span><br><span class="line">count=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">$li.e<span class="hljs-string">q(count)</span>.fadeIn().siblings().fadeOut();</span><br><span class="line">$(<span class="hljs-string">".slider_icon&gt;i"</span>).e<span class="hljs-string">q(count)</span>.addClass(<span class="hljs-string">'btn_act'</span>).siblings().removeClass(<span class="hljs-string">'btn_act'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="hljs-string">".right"</span>).click(function()&#123;<span class="hljs-keyword">next</span>();&#125;);</span><br><span class="line">$(<span class="hljs-string">".left"</span>).click(function()&#123;</span><br><span class="line">count--;</span><br><span class="line"><span class="hljs-keyword">if</span> (count == -<span class="hljs-number">1</span>) &#123;</span><br><span class="line">count=$li.length-<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">$li.e<span class="hljs-string">q(count)</span>.fadeIn().siblings().fadeOut();</span><br><span class="line">$(<span class="hljs-string">".slider_icon&gt;i"</span>).e<span class="hljs-string">q(count)</span>.addClass(<span class="hljs-string">'btn_act'</span>).siblings().removeClass(<span class="hljs-string">'btn_act'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="hljs-string">".slider_icon&gt;i"</span>).mouseenter(function()&#123;</span><br><span class="line">$(this).addClass(<span class="hljs-string">'btn_act'</span>).siblings().removeClass(<span class="hljs-string">'btn_act'</span>);</span><br><span class="line">$li.e<span class="hljs-string">q($(this)</span>.index()).fadeIn().siblings().fadeOut();</span><br><span class="line">count=$(this).index();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下代码使用了jQuery来实现简单的图片轮播效果：&lt;/p&gt;
&lt;h2 id=&quot;html部分：&quot;&gt;&lt;a href=&quot;#html部分：&quot; class=&quot;headerlink&quot; title=&quot;html部分：&quot;&gt;&lt;/a&gt;&lt;strong&gt;html部分：&lt;/strong&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="https://jdsheng.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>浏览器：一个浏览器是如何工作的？（阶段四）</title>
    <link href="https://jdsheng.cn/2020/06/06/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F%EF%BC%88%E9%98%B6%E6%AE%B5%E5%9B%9B%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/浏览器：一个浏览器是如何工作的？（阶段四）/</id>
    <published>2020-06-06T15:00:23.828Z</published>
    <updated>2019-08-19T15:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<div class><br>  我们书接上文。浏览器进行到这一步，我们已经给 DOM 元素添加了用于展现的 CSS 属性，接下来，浏览器的工作就是确定每一个元素的位置了。我们的基本原则仍然不变，就是尽可能流式地处理上一步骤的输出。<p></p><br>  <a id="more"></a><br>  在构建 DOM 树和计算 CSS 属性这两个步骤，我们的产出都是一个一个的元素，但是在排版这个步骤中，有些情况下，我们就没法做到这样了。<br><br>  尤其是表格相关排版、flex 排版和 grid 排版，它们有一个显著的特点，那就是子元素之间具有关联性。<br><br>  <h2>基本概念</h2><br><br>  首先我们先来介绍一些基本概念，使你可以感性地认识一下我们平常说的各种术语。<br><br>  <strong>“排版”</strong>这个概念最初来自活字印刷，是指我们把一个一个的铅字根据文章顺序，放入板框当中的步骤，排版的意思是确定每一个字的位置。<br><br>  在现代浏览器中，仍然借用了这个概念，但是排版的内容更加复杂，包括文字、图片、图形、表格等等，我们把浏览器确定它们位置的过程，叫作排版。<br><br>  浏览器最基本的排版方案是<strong>正常流排版</strong>，它包含了顺次排布和折行等规则，这是一个跟我们提到的印刷排版类似的排版方案，也跟我们平时书写文字的方式一致，所以我们把它叫做正常流。<br><br>  浏览器的文字排版遵循公认的文字排版规范，文字排版是一个复杂的系统，它规定了行模型和文字在行模型中的排布。行模型规定了行顶、行底、文字区域、基线等对齐方式。（你还记得小时候写英语的英语本吗？英语本上的四条线就是一个简单的行模型）<br><br><br>  此外，浏览器支持不同语言，因为不同语言的书写顺序不一致，所以浏览器的文本排版还支持双向文字系统。<br><br>  浏览器又可以支持元素和文字的混排，元素被定义为占据长方形的区域，还允许边框、边距和留白，这个就是所谓的<strong>盒模型</strong>。<br><br>  在正常流的基础上，浏览器还支持两类元素：绝对定位元素和浮动元素。<br>  <ul><br>    <li><br>      绝对定位元素把自身从正常流抽出，直接由 top 和 left 等属性确定自身的位置，不参加排版计算，也不影响其它元素。绝对定位元素由 position 属性控制。<br>    </li><br>    <li><br>      浮动元素则是使得自己在正常流的位置向左或者向右移动到边界，并且占据一块排版空间。浮动元素由 float 属性控制。<br>    </li><br>  </ul><br><br>  除了正常流，浏览器还支持其它排版方式，比如现在非常常用的 flex 排版，这些排版方式由外部元素的 display 属性来控制（注意，display 同时还控制元素在正常流中属于 inline 等级还是 block 等级）。<br><br>  <h2>正常流文字排版</h2><br>  我们会在 CSS 部分详细介绍正常流排版的行为，我们这里主要介绍浏览器中的正常流。正常流是唯一一个文字和盒混排的排版方式，我们先从文字来讲起。<br><br>  要想理解正常流，我们首先要回忆一下自己如何在纸上写文章。<br><br>  首先，纸是有固定宽度的，虽然纸有固定高度，但是我们可以通过下一页纸的方式来接续，因此我们不存在写不下的场景。<br>  我们书写文字的时候，是从左到右依次书写，每一个字跟上一个字都不重叠，文字之间有一定间距，当写满一行时，我们换到下一行去继续写。<br><br>  书写中文时，文字的上、下、中轴线都对齐，书写英文时，不同字母的高度不同，但是有一条基线对齐。<br><br>  实际上浏览器环境也很类似。但是因为浏览器支持改变排版方向，不一定是从左到右从上到下，所以我们把文字依次书写的延伸方向称为主轴或者主方向，换行延伸的方向，跟主轴垂直交叉，称为交叉轴或者交叉方向。<br><br>  我们一般会从某个字体文件中获取某个特定文字的相关信息。我们获取到的信息大概类似下面：<br>  <img src="https://static001.geekbang.org/resource/image/06/01/0619d38f00d539f7b6773e541ce6fa01.png" alt><br>  纵向版本：<br>  <img src="https://static001.geekbang.org/resource/image/c3/96/c361c7ff3a11216c139ed462b9d5f196.png" alt><br>  这两张图片来自著名开源字体解析库 freetype，实际上，各个库对字体的理解大同小异，我们注意一下，advance 代表每一个文字排布后在主轴上的前进距离，它跟文字的宽 / 高不相等，是字体中最重要的属性。<br><br>  除了字体提供的字形本身包含的信息，文字排版还受到一些 CSS 属性影响，如 line-height、letter-spacing、word-spacing 等。<br><br>  在正常流的文字排版中，多数元素被当作长方形盒来排版，而只有 display 为 inline 的元素，是被拆成文本来排版的（还有一种 run-in 元素，它有时作为盒，有时作为文字，不太常用，这里不详细讲了）。<br><br>  display 值为 inline 的元素中的文字排版时会被直接排入文字流中，inline 元素主轴方向的 margin 属性和 border 属性（例如主轴为横向时的 margin-left 和margin-right）也会被计算进排版前进距离当中。<br><br>  注意，当没有强制指定文字书写方向时，在左到右文字中插入右到左向文字，会形成一个双向文字盒，反之亦然。<br><br>  这样，即使没有元素包裹，混合书写方向的文字也可以形成一个盒结构，我们在排版时，遇到这样的双向文字盒，会先排完盒内再排盒外。<br><br>  <h2>正常流中的盒</h2><br>  在正常流中，display 不为 inline 的元素或者伪元素，会以盒的形式跟文字一起排版。多数 display 属性都可以分成两部分：内部的排版和是否 inline，带有 inline- 前缀的盒，被称作行内级盒。<br><br>  根据盒模型，一个盒具有 margin、border、padding、width/height 等属性，它在主轴方向占据的空间是由对应方向的这几个属性之和决定的，而 vertical-align属性决定了盒在交叉轴方向的位置，同时也会影响实际行高。<br><br>  所以，浏览器对行的排版，一般是先行内布局，再确定行的位置，根据行的位置计算出行内盒和文字的排版位置。<br><br>  块级盒比较简单，它总是单独占据一整行，计算出交叉轴方向的高度即可。<br><br>  <h2>绝对定位元素</h2><br>  position 属性为 absolute 的元素，我们需要根据它的包含块来确定位置，这是完全跟正常流无关的一种独立排版模式，逐层找到其父级的 position 非 static 元素即可。<br><br>  <h2>浮动元素排版</h2><br>  float 元素非常特别，浏览器对 float 的处理是先排入正常流，再移动到排版宽度的最左 / 最右（这里实际上是主轴的最前和最后）。<br><br>  移动之后，float 元素占据了一块排版的空间，因此，在数行之内，主轴方向的排版距离发生了变化，直到交叉轴方向的尺寸超过了浮动元素的交叉轴尺寸范围，主轴排版尺寸才会恢复。<br><br>  float 元素排布完成后，float 元素所在的行需要重新确定位置。<br><br>  <h2>其它的排版</h2><br>  CSS 的每一种排版都有一个很复杂的规定，实际实现形式也各不相同。比如如 flex 排版，支持了 flex 属性，flex 属性将每一行排版后的剩余空间平均分配给主轴方向的 width/height属性。浏览器支持的每一种排版方式，都是按照对应的标准来实现的。<br><br>  <h2>总结</h2><br>  这一部分，我们以正常流为主，介绍了浏览器的排版基本概念及一些算法。这里，我主要介绍了正常流中的文字排版、正常流中的盒、绝对定位元素、浮动元素排版这几种情况。最后，我还简单介绍了一下 flex排版。这属于进阶版的排版方式了，你可以了解一下。<br><br>  你平时喜欢使用方式排版呢，欢迎留言告诉我。<br><br>  转自—《重学前端》<br></div>]]></content>
    
    <summary type="html">
    
      &lt;div class&gt;&lt;br&gt;  我们书接上文。浏览器进行到这一步，我们已经给 DOM 元素添加了用于展现的 CSS 属性，接下来，浏览器的工作就是确定每一个元素的位置了。我们的基本原则仍然不变，就是尽可能流式地处理上一步骤的输出。&lt;p&gt;&lt;/p&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="WEB" scheme="https://jdsheng.cn/categories/WEB/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浏览器：一个浏览器是如何工作的？（阶段五）</title>
    <link href="https://jdsheng.cn/2020/06/06/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F%EF%BC%88%E9%98%B6%E6%AE%B5%E4%BA%94%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/浏览器：一个浏览器是如何工作的？（阶段五）/</id>
    <published>2020-06-06T15:00:23.799Z</published>
    <updated>2019-09-30T16:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<div class="_1kh1ihh6_0"><br>  我们的浏览器系列已经进行到最后一篇。<a id="more"></a><br>  在之前的几篇文章中，我们已经经历了把 URL 变成字符流，把字符流变成词（token）流，把词（token）流构造成 DOM 树，把不含样式信息的 DOM 树应用 CSS 规则，变成包含样式信息的 DOM树，并且根据样式信息，计算了每个元素的位置和大小。<br><br>  那么，我们最后的步骤，就是根据这些样式信息和大小信息，为每个元素在内存中渲染它的图形，并且把它绘制到对应的位置。<br><br>  <h2>渲染</h2><br>  首先我们来谈谈渲染这个词，渲染也是个外来词，它是英文词 render 的翻译，render 这个词在英文里面，有“导致”“变成”的意思，也有“粉刷墙壁”的意思。<br><br>  在计算机图形学领域里，英文 render 这个词是一个简写，它是特指把模型变成位图的过程。我们把 render 翻译成“渲染”，是个非常有意思的翻译，中文里“渲染”这个词是一种绘画技法，是指沾清水把墨涂开的意思。<br><br>  所以，render 翻译成“渲染”，我认为是非常高明的，对 render 这个过程，用国画的渲染手法来概括，是颇有神似的。<br><br>  我们现在的一些框架，也会把“从数据变成 HTML 代码的过程”称为 render，其实我觉得这是非常具有误导性的，我个人是非常不喜欢这种命名方式，当然了，所谓“文无第一”，在自然语言的范围里，我们很难彻底否定这种用法的合理性。<br><br><br>  不过，在本篇文章中，我们可以约定一下，本文中出现的“渲染”一词，统一指的是它在图形学的意义，也就是把模型变成位图的过程。<br><br>  这里的位图就是在内存里建立一张二维表格，把一张图片的每个像素对应的颜色保存进去（位图信息也是 DOM 树中占据浏览器内存最多的信息，我们在做内存占用优化时，主要就是考虑这一部分）。<br><br>  浏览器中渲染这个过程，就是把每一个元素对应的盒变成位图。这里的元素包括 HTML 元素和伪元素，一个元素可能对应多个盒（比如 inline 元素，可能会分成多行）。每一个盒对应着一张位图。<br><br>  这个渲染过程是非常复杂的，但是总体来说，可以分成两个大类：图形和文字。<br><br>  盒的背景、边框、SVG 元素、阴影等特性，都是需要绘制的图形类。这就像我们实现 HTTP 协议必须要基于 TCP 库一样，这一部分，我们需要一个底层库来支持。<br><br>  一般的操作系统会提供一个底层库，比如在 Android 中，有大名鼎鼎的 Skia，而 Windows 平台则有 GDI，一般的浏览器会做一个兼容层来处理掉平台差异。<br><br>  这些盒的特性如何绘制，每一个都有对应的标准规定，而每一个的实现都可以作为一个独立的课题来研究，当年圆角 + 虚线边框，可是难倒了各个浏览器的工程师。考虑到这些知识互相都比较独立，对前端工程师来说也不是特别重要的细节，我们这里就不详细探究了。<br><br>  盒中的文字，也需要用底层库来支持，叫做字体库。字体库提供读取字体文件的基本能力，它能根据字符的码点抽取出字形。<br><br>  字形分为像素字形和矢量字形两种。通常的字体，会在 6px 8px 等小尺寸提供像素字形，比较大的尺寸则提供矢量字形。矢量字形本身就需要经过渲染才能继续渲染到元素的位图上去。目前最常用的字体库是 Freetype，这是一个 C++编写的开源的字体库。<br>  在最普遍的情况下，渲染过程生成的位图尺寸跟它在上一步排版时占据的尺寸相同。<br><br>  但是理想和现实是有差距的，很多属性会影响渲染位图的大小，比如阴影，它可能非常巨大，或者渲染到非常遥远的位置，所以为了优化，浏览器实际的实现中会把阴影作为一个独立的盒来处理。<br><br>  注意，我们这里讲的渲染过程，是不会把子元素绘制到渲染的位图上的，这样，当父子元素的相对位置发生变化时，可以保证渲染的结果能够最大程度被缓存，减少重新渲染。<br><br>  <h2>合成</h2><br>  合成是英文术语 compositing 的翻译，这个过程实际上是一个性能考量，它并非实现浏览器的必要一环。<br><br>  我们上一小节中讲到，渲染过程不会把子元素渲染到位图上面，合成的过程，就是为一些元素创建一个“合成后的位图”（我们把它称为合成层），把一部分子元素渲染到合成的位图上面。<br><br>  看到这句话，我想你一定会问问题，到底是为哪些元素创建合成后的位图，把哪些子元素渲染到合成的位图上面呢？<br><br>  这就是我们要讲的合成的策略。我们前面讲了，合成是一个性能考量，那么合成的目标就是提高性能，根据这个目标，我们建立的原则就是最大限度减少绘制次数原则。<br><br>  我们举一个极端的例子。如果我们把所有元素都进行合成，比如我们为根元素 html 创建一个合成后的位图，把所有子元素都进行合成，那么会发生什么呢？<br><br>  那就是，一旦我们用 JavaScript 或者别的什么方式，改变了任何一个 CSS 属性，这份合成后的位图就失效了，我们需要重新绘制所有的元素。<br><br>  那么如果我们所有的元素都不合成，会怎样呢？结果就是，相当于每次我们都必须要重新绘制所有的元素，这也不是对性能友好的选择。<br><br>  那么好的合成策略是什么呢，好的合成策略是“猜测”可能变化的元素，把它排除到合成之外。<br><br>  我们来举个例子：<br><br><figure class="highlight applescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">"a"</span>&gt;</span><br><span class="line">    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">"b"</span>&gt;...&lt;/<span class="hljs-keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">"c"</span> style=<span class="hljs-string">"transform:translate(0,0)"</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="hljs-keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><br><br>假设我们的合成策略能够把 a、b 两个 div 合成，而不把 c 合成，那么，当我执行以下代码时：<br><br><figure class="highlight maxima hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(<span class="hljs-string">"c"</span>).<span class="hljs-built_in">style</span>.<span class="hljs-built_in">transform</span> = <span class="hljs-string">"translate(100px, 0)"</span>;</span><br></pre></td></tr></table></figure><br><br>我们绘制的时候，就可以只需要绘制 a 和 b 合成好的位图和 c，从而减少了绘制次数。这里需要注意的是，在实际场景中，我们的 b 可能有很多复杂的子元素，所以当合成命中时，性能提升收益非常之高。<br><br>目前，主流浏览器一般根据 position、transform 等属性来决定合成策略，来“猜测”这些元素未来可能发生变化。<br><br>但是，这样的猜测准确性有限，所以新的 CSS 标准中，规定了 will-change 属性，可以由业务代码来提示浏览器的合成策略，灵活运用这样的特性，可以大大提升合成策略的效果。<br><br><h2>绘制</h2><br>绘制是把“位图最终绘制到屏幕上，变成肉眼可见的图像”的过程，不过，一般来说，浏览器并不需要用代码来处理这个过程，浏览器只需要把最终要显示的位图交给操作系统即可。<br><br>一般最终显式的位图位于显存中，也有一些情况下，浏览器只需要把内存中的一张位图提交给操作系统或者显式驱动就可以了，这取决于浏览器运行的环境。不过无论如何，我们把任何位图合成到这个“最终位图”的操作称为绘制。<br><br>这个过程听上去非常简单，这是因为在前面两个小节中，我们已经得到了每个元素的位图，并且对它们部分进行了合成，那么绘制过程，实际上就是按照 z-index 把它们依次绘制到屏幕上。<br><br>然而如果在实际中这样做, 会带来极其糟糕的性能。<br><br>有一个一度非常流行于前端群体的说法，讲做 CSS 性能优化，应该尽量避免”重排”和”重绘”，前者讲的是我们上一课的排版行为，后者模糊地指向了我们本课程三小节讲的三个步骤，而实际上，这个说法大体不能算错，却不够准确。<br><br>因为，实际上，“绘制”发生的频率比我们想象中要高得多。我们考虑一个情况：鼠标划过浏览器显示区域。这个过程中，鼠标的每次移动，都造成了重新绘制，如果我们不重新绘制，就会产生大量的鼠标残影。<br><br>这个时候，限制绘制的面积就很重要了。如果鼠标某次位置恰巧遮盖了某个较小的元素，我们完全可以重新绘制这个元素来完成我们的目标，当然，简单想想就知道，这种事情不可能总是发生的。<br><br>计算机图形学中，我们使用的方案就是“脏矩形”算法，也就是把屏幕均匀地分成若干矩形区域。<br><br>当鼠标移动、元素移动或者其它导致需要重绘的场景发生时，我们只重新绘制它所影响到的几个矩形区域就够了。比矩形区域更小的影响最多只会涉及 4 个矩形，大型元素则覆盖多个矩形。<br><br>设置合适的矩形区域大小，可以很好地控制绘制时的消耗。设置过大的矩形会造成绘制面积增大，而设置过小的矩形则会造成计算复杂。<br><br>我们重新绘制脏矩形区域时，把所有与矩形区域有交集的合成层（位图）的交集部分绘制即可。<br><br><h2>总结</h2><br>在这一章中，我们讲解了浏览器中的位图操作部分，这包括了渲染、合成和绘制三个部分。渲染过程把元素变成位图，合成把一部分位图变成合成层，最终的绘制过程把合成层显示到屏幕上。<br><br>当绘制完成时，就完成了浏览器的最终任务，把一个 URL 最后变成了一个可以看的网页图像。当然了，我们对每一个部分的讲解，都省略了大量的细节，比如我们今天讲到的绘制，就有意地无视了滚动区域。<br><br>尽管如此，对浏览器工作原理的感性认识，仍然可以帮助我们理解很多前端技术的设计和应用技巧，浏览器的工作原理和性能部分非常强相关，我们在实践部分的性能优化部分，会再次跟你做一些探讨。<br><br>实际上，如果你认真阅读浏览器系列的课程，是可以用 JavaScript 实现一个玩具浏览器的，我非常希望学习课程的同学中能有人这样做，一旦你做到了，收益会非常大。这就是我今天留给你的课外作业，你可以尝试一下。<br><br>转自—《重学前端》<br></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;_1kh1ihh6_0&quot;&gt;&lt;br&gt;  我们的浏览器系列已经进行到最后一篇。&lt;/div&gt;
    
    </summary>
    
      <category term="WEB" scheme="https://jdsheng.cn/categories/WEB/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浏览器：一个浏览器是如何工作的？（阶段二）</title>
    <link href="https://jdsheng.cn/2020/06/06/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F%EF%BC%88%E9%98%B6%E6%AE%B5%E4%BA%8C%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/浏览器：一个浏览器是如何工作的？（阶段二）/</id>
    <published>2020-06-06T15:00:23.770Z</published>
    <updated>2019-08-19T15:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<div class><br>  我在上一篇文章中，简要介绍了浏览器的工作大致可以分为 6 个阶段，我们昨天讲完了第一个阶段，也就是通讯的部分：浏览器使用 HTTP 协议或者 HTTPS 协议，向服务端请求页面的过程。<a id="more"></a><br><br>  这次我们主要来看两个过程：如何解析请求回来的 HTML 代码，DOM 树又是如何构建的。<br><br>  <img src="https://static001.geekbang.org/resource/image/34/5a/34231687752c11173b7776ba5f4a0e5a.png" alt><br>  <h2>解析代码</h2><br>  我们在前面讲到了 HTTP 的构成，但是我们有一部分没有详细讲解，那就是 Response 的 body 部分，这正是因为 HTTP 的Response 的 body，就要交给我们今天学习的内容去处理了。<br><br>  HTML 的结构不算太复杂，我们日常开发需要的 90% 的“词”（指编译原理的术语 token，表示最小的有意义的单元），种类大约只有标签开始、属性、标签结束、注释、CDATA 节点几种。<br><br>  实际上有点麻烦的是，由于 HTML 跟 SGML 的千丝万缕的联系，我们需要做不少容错处理。“&lt;?”和“&lt;%”什么的也是必须要支持好的，报了错也不能吭声。<br><br>  <h3>1. 词（token）是如何被拆分的</h3><br>  首先我们来看看一个非常标准的标签，会被如何拆分：<br><br><figure class="highlight applescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="hljs-built_in">class</span>=<span class="hljs-string">"a"</span>&gt;<span class="hljs-built_in">text</span> <span class="hljs-built_in">text</span> <span class="hljs-built_in">text</span></span><br></pre></td></tr></table></figure><br><br>如果我们从最小有意义单元的定义来拆分，第一个词（token）是什么呢？显然，作为一个词（token），整个 p 标签肯定是过大了（它甚至可以嵌套）。<br><br>那么，只用 p 标签的开头是不是合适吗？我们考虑到起始标签也是会包含属性的，最小的意义单元其实是“&lt;p” ，所以“ &lt;p” 就是我们的第一个词（token）。<br><br>我们继续拆分，可以把这段代码依次拆成词（token）：<br><ul><br>  <li>&lt;p“标签开始”的开始；</li><br>  <li>class=“a” 属性；</li><br>  <li>&gt; “标签开始”的结束；</li><br>  <li>text text text 文本；</li><br>  <li>&lt;/p&gt; 标签结束。</li><br></ul><br>这是一段最简单的例子，类似的还有什么呢？现在我们可以来来看看这些词（token）长成啥样子：<br><img src="https://static001.geekbang.org/resource/image/f9/84/f98444aa3ea7471d2414dd7d0f5e3a84.png" alt><br><br>根据这样的分析，现在我们讲讲浏览器是如何用代码实现，我们设想，代码开始从 HTTP 协议收到的字符流读取字符。<br><br>在接受第一个字符之前，我们完全无法判断这是哪一个词（token），不过，随着我们接受的字符越来越多，拼出其他的内容可能性就越来越少。<br><br>比如，假设我们接受了一个字符“ &lt; ” 我们一下子就知道这不是一个文本节点啦。<br><br>之后我们再读一个字符，比如就是 x，那么我们一下子就知道这不是注释和 CDATA 了，接下来我们就一直读，直到遇到“&gt;”或者空格，这样就得到了一个完整的词（token）了。<br><br>实际上，我们每读入一个字符，其实都要做一次决策，而且这些决定是跟“当前状态”有关的。在这样的条件下，浏览器工程师要想实现把字符流解析成词（token），最常见的方案就是使用状态机。<br><br><h3>2. 状态机</h3><br>绝大多数语言的词法部分都是用状态机实现的。那么我们来把部分词（token）的解析画成一个状态机看看：<br><img src="https://static001.geekbang.org/resource/image/8b/b0/8b43d598bc1f83a8a1e7e8f922013ab0.png" alt><img><br>当然了，我们这里的分析比较粗略，真正完整的 HTML 词法状态机，比我们描述的要复杂的多。更详细的内容，你可以参考<a href="https://html.spec.whatwg.org/multipage/parsing.html#tokenization" target="_blank" rel="noopener">HTML 官方文档</a>，HTML 官方文档规定了 80 个状态（顺便一说，HTML<br>  是我见过唯一一个标准中规定了状态机实现的语言，对大部分语言来说，状态机是一种实现而非定义）。<br><br>这里我们为了理解原理，用这个简单的状态机就足够说明问题了。<br><br>状态机的初始状态，我们仅仅区分 “&lt; ”和 “非 &lt;”：<br><ul><br>  <li>如果获得的是一个非 &lt; 字符，那么可以认为进入了一个文本节点；</li><br>  <li>如果获得的是一个 &lt; 字符，那么进入一个标签状态。</li><br></ul><br><br>不过当我们在标签状态时，则会面临着一些可能性。<br><br><ul><br>  <li><br>    比如下一个字符是“ ! ” ，那么很可能是进入了注释节点或者 CDATA 节点。<br>  </li><br>  <li><br>    如果下一个字符是 “/ ”，那么可以确定进入了一个结束标签。<br>  </li><br>  <li><br>    如果下一个字符是字母，那么可以确定进入了一个开始标签。<br>  </li><br>  <li><br>    如果我们要完整处理各种 HTML 标准中定义的东西，那么还要考虑“ ? ”“% ”等内容。<br>  </li><br></ul><br>我们可以看到，用状态机做词法分析，其实正是把每个词的“特征字符”逐个拆开成独立状态，然后再把所有词的特征字符链合并起来，形成一个联通图结构。<br><br>由于状态机设计属于编译原理的基本知识，这里我们仅作一个简要的介绍。<br><br>接下来就是代码实现的事情了，在 C/C++ 和 JavaScript中，实现状态机的方式大同小异：我们把每个函数当做一个状态，参数是接受的字符，返回值是下一个状态函数。（这里我希望再次强调下，状态机真的是一种没有办法封装的东西，所以我们永远不要试图封装状态机。<br><br>为了方便理解和试验，我们这里用 JavaScript 来讲解，图上的 data 状态大概就像下面这样的：<br><br><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> <span class="hljs-keyword">data</span> = function(c)&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">"&amp;"</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> characterReferenceInData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> tagOpen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">"\0"</span>) &#123;</span><br><span class="line">        error();</span><br><span class="line">        emitToken(c);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==EOF) &#123;</span><br><span class="line">        emitToken(EOF);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        emitToken(c);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> tagOpenState = function tagOpenState(c)&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">"/"</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> endTagOpenState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(c.match(/[A-Z]/)) &#123;</span><br><span class="line">        token = new StartTagToken();</span><br><span class="line">        token.name = c.toLowerCase();</span><br><span class="line">        <span class="hljs-keyword">return</span> tagNameState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(c.match(/[a-z]/)) &#123;</span><br><span class="line">        token = new StartTagToken();</span><br><span class="line">        token.name = c;</span><br><span class="line">        <span class="hljs-keyword">return</span> tagNameState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">"?"</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> bogusCommentState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        error();</span><br><span class="line">        <span class="hljs-keyword">return</span> dataState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">//……</span></span><br></pre></td></tr></table></figure><br><br>这段代码给出了状态机的两个状态示例：data 即为初始状态，tagOpenState 是接受了一个“ &lt; ” 字符，来判断标签类型的状态。<br><br>这里的状态机，每一个状态是一个函数，通过“if else”来区分下一个字符做状态迁移。这里所谓的状态迁移，就是当前状态函数返回下一个状态函数。<br><br>这样，我们的状态迁移代码非常的简单：<br><br><figure class="highlight pf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="hljs-keyword">state</span> = data;</span><br><span class="line">var char</span><br><span class="line">while(char = getInput())</span><br><span class="line">    <span class="hljs-keyword">state</span> = <span class="hljs-keyword">state</span>(char);</span><br></pre></td></tr></table></figure><br><br>这段代码的关键一句是“ state = state(char) ”，不论我们用何种方式来读取字符串流，我们都可以通过 state 来处理输入的字符流，这里用循环是一个示例，真实场景中，可能是来自 TCP 的输出流。<br><br>状态函数通过代码中的 emitToken 函数来输出解析好的 token（词），我们只需要覆盖 emitToken，即可指定对解析结果的处理方式。<br><br>词法分析器接受字符的方式很简单，就像下面这样：<br><br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HTMLLexicalParser</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 状态函数们……</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">data</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// ……</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tagOpen</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// ……</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// ……</span></span><br><span class="line">    <span class="hljs-keyword">var</span> state = data;</span><br><span class="line">    <span class="hljs-keyword">this</span>.receiveInput = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">char</span>) </span>&#123;</span><br><span class="line">        state = state(char);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>至此，我们就把字符流拆成了词（token）了。<br><br><h2>构建 DOM 树</h2><br><br>接下来我们要把这些简单的词变成 DOM 树，这个过程我们是使用栈来实现的，任何语言几乎都有栈，为了给你跑着玩，我们还是用 JavaScript 来实现吧，毕竟 JavaScript 中的栈只要用数组就好了。<br><br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HTMLSyntaticalParser</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> stack = [<span class="hljs-keyword">new</span> HTMLDocument];</span><br><span class="line">    <span class="hljs-keyword">this</span>.receiveInput = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">token</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">this</span>.getOutput = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> stack[<span class="hljs-number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>我们这样来设计 HTML 的语法分析器，receiveInput 负责接收词法部分产生的词（token），通常可以由 emmitToken 来调用。<br><br>在接收的同时，即开始构建 DOM 树，所以我们的主要构建 DOM 树的算法，就写在 receiveInput 当中。当接收完所有输入，栈顶就是最后的根节点，我们 DOM 树的产出，就是这个 stack 的第一项。<br><br>为了构建 DOM 树，我们需要一个 Node 类，接下来我们所有的节点都会是这个 Node 类的实例。<br><br>在完全符合标准的浏览器中，不一样的 HTML 节点对应了不同的 Node 的子类，我们为了简化，就不完整实现这个继承体系了。我们仅仅把 Node 分为 Element 和 Text（如果是基于类的 OOP的话，我们还需要抽象工厂来创建对象），<br><br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Element</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.childNodes = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Text</span>(<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = value || <span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>前面我们的词（token）中，以下两个是需要成对匹配的：<br><ul><br>  <li>tag start</li><br>  <li>tag end</li><br></ul><br>根据一些编译原理中常见的技巧，我们使用的栈正是用于匹配开始和结束标签的方案。<br><br>对于 Text 节点，我们则需要把相邻的 Text 节点合并起来，我们的做法是当词（token）入栈时，检查栈顶是否是 Text 节点，如果是的话就合并 Text 节点<br><br>同样我们来看看直观的解析过程：<br><br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">maaa</span>=<span class="hljs-string">a</span> &gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>cool<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"a"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>通过这个栈，我们可以构建 DOM 树：<br><ul><br>  <li>栈顶元素就是当前节点；</li><br>  <li>遇到属性，就添加到当前节点；</li><br>  <li>遇到文本节点，如果当前节点是文本节点，则跟文本节点合并，否则入栈成为当前节点的子节点；</li><br>  <li>遇到注释节点，作为当前节点的子节点；</li><br>  <li>遇到 tag start 就入栈一个节点，当前节点就是这个节点的父节点；</li><br>  <li>遇到 tag end 就出栈一个节点（还可以检查是否匹配）。</li><br></ul><br>我在文章里面放了一个视频，你可以点击查看用栈构造 DOM 树的全过程。<br>  <div><video style="vertical-align: top;width:680px;height:382px" webkit-playsinline playsinline x5-playsinline x5-video-player-type="h5" x5-video-player-fullscreen="true" src="blob:https://time.geekbang.org/2304de2a-be17-46d9-aff6-126315842eb1" controls="controls" poster="https://static001.geekbang.org/resource/image/7c/12/7cf7a46496b2c19ae78d263bcd75ef12.png"></video></div><br>当我们的源代码完全遵循 xhtml（这是一种比较严谨的 HTML 语法）时，这非常简单问题，然而 HTML 具有很强的容错能力，奥妙在于当 tag end 跟栈顶的 start tag 不匹配的时候如何处理。<br><br>于是，这又有一个极其复杂的规则，幸好 W3C 又一次很贴心地把全部规则都整理地很好，我们只要翻译成对应的代码就好了，以下这个网站呈现了全部规则。你可以点击查看。<br><br><a href="http://www.w3.org/html/wg/drafts/html/master/syntax.html#tree-construction" target="_blank" rel="noopener">http://www.w3.org/html/wg/drafts/html/master/syntax.html#tree-construction</a><br><br><h2>结语</h2><br>好了，总结一下。在今天的文章中，我带你继续探索了浏览器的工作原理，我们主要研究了解析代码和构建 DOM 树两个步骤。在解析代码的环节里，我们一起详细地分析了一个词（token）被拆分的过程，并且给出了实现它所需要的一个简单的状态机。<br><br>在构建 DOM 树的环节中，基本思路是使用栈来构建 DOM 树为了方便你动手实践，我用 JavaScript 实现了这一过程。<br><br>转自—《重学前端》<br></div>]]></content>
    
    <summary type="html">
    
      &lt;div class&gt;&lt;br&gt;  我在上一篇文章中，简要介绍了浏览器的工作大致可以分为 6 个阶段，我们昨天讲完了第一个阶段，也就是通讯的部分：浏览器使用 HTTP 协议或者 HTTPS 协议，向服务端请求页面的过程。&lt;/div&gt;
    
    </summary>
    
      <category term="WEB" scheme="https://jdsheng.cn/categories/WEB/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浏览器：一个浏览器是如何工作的？（阶段一）</title>
    <link href="https://jdsheng.cn/2020/06/06/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F%EF%BC%88%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/浏览器：一个浏览器是如何工作的？（阶段一）/</id>
    <published>2020-06-06T15:00:23.738Z</published>
    <updated>2019-08-19T15:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="_1kh1ihh6_0"><br>  对于前端开发来说，我们平时与浏览器打交道的时间是最多的。可浏览器对前端同学来说更多像一个神秘黑盒子的存在。我们仅仅知道它能做什么，而不知道它是如何做到的。<a id="more"></a></div></p><p>  在我面试和接触过的前端开发者中，70% 的前端同学对这部分的知识内容只能达到“一知半解”的程度。甚至还有一部分同学会质疑这部分知识是否重要：这与我们的工作相关吗，学多了会不会偏移前端工作的方向？</p><p>  事实上，我们这里所需要了解的浏览器工作原理只是它的大致过程，这部分浏览器工作原理不但是前端面试的常考知识点，它还会辅助你的实际工作，学习浏览器的内部工作原理和个中缘由，对于我们做性能优化、排查错误都有很大的好处。  </p><p>  在我们的课程中，我也会控制浏览器相关知识的粒度，把它保持在“给前端工程师了解浏览器”的水准，而不是详细到“给浏览器开发工程师实现浏览器”的水准。</p><p>  那么，我们今天开始，来共同思考一下。一个浏览器到底是如何工作的。</p><p>  实际上，对浏览器的实现者来说，他们做的事情，就是把一个 URL 变成一个屏幕上显示的网页。</p><p>  这个过程是这样的：<br>  <ol><br>    <li>浏览器首先使用 HTTP 协议或者 HTTPS 协议，向服务端请求页面；</li><br>    <li>把请求回来的 HTML 代码经过解析，构建成 DOM 树；</li><br>    <li>计算 DOM 树上的 CSS 属性；</li><br>    <li>最后根据 CSS 属性对元素逐个进行渲染，得到内存中的位图；</li><br>    <li>一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度；</li><br>    <li>合成之后，再绘制到界面上。</li><br>  </ol></p><p><img src="https://static001.geekbang.org/resource/image/63/4c/6391573a276c47a9a50ae0cbd2c5844c.jpg" alt></p><p>我们在开始详细介绍之前，要建立一个感性认识。我们从 HTTP 请求回来开始，这个过程并非一般想象中的一步做完再做下一步，而是一条流水线。</p><p>从 HTTP 请求回来，就产生了流式的数据，后续的 DOM 树构建、CSS 计算、渲染、合成、绘制，都是尽可能地流式处理前一步的产出：即不需要等到上一步骤完全结束，就开始处理上一步的输出，这样我们在浏览网页时，才会看到逐步出现的页面。</p><p>首先我们来介绍下网络通讯的部分。</p><p></p><h2>HTTP 协议</h2><br>浏览器首先要做的事就是根据 URL 把数据取回来，取回数据使用的是 HTTP 协议（实际上这个过程之前还有 DNS 查询，不过这里就不详细展开了。）<p></p><p>我先来了解下 HTTP 的标准。</p><p>HTTP 标准由 IETF 组织制定，跟它相关的标准主要有两份：</p><ol><br>  <li>HTTP1.1 <a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616</a></li><br></ol><p>2.HTTP1.1 <a href="https://tools.ietf.org/html/rfc7234" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7234</a></p><p>HTTP 协议是基于 TCP 协议出现的，对 TCP 协议来说，TCP 协议是一条双向的通讯通道，HTTP 在 TCP 的基础上，规定了 Request-Response 的模式。这个模式决定了通讯必定是由浏览器端首先发起的。</p><p>大部分情况下，浏览器的实现者只需要用一个 TCP 库，甚至一个现成的 HTTP 库就可以搞定浏览器的网络通讯部分。HTTP 是纯粹的文本协议，它是规定了使用 TCP 协议来传输文本格式的一个应用层协议。</p><p>下面，我们试着用一个纯粹的 TCP 客户端来手工实现 HTTP 一下：</p><p></p><h2>实验</h2><br>我们的实验需要使用 telnet 客户端，这个客户端是一个纯粹的 TCP 连接工具（安装方法）。<p></p><p>首先我们运行 telnet，连接到极客时间主机，在命令行里输入以下内容：</p><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.geekbang</span><span class="hljs-selector-class">.org</span> <span class="hljs-number">80</span></span><br></pre></td></tr></table></figure><p>这个时候，TCP 连接已经建立，我们输入以下字符作为请求：</p><figure class="highlight http hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> HTTP/1.1</span><br><span class="line"><span class="hljs-attribute">Host</span>: time.geekbang.org</span><br></pre></td></tr></table></figure><p>按下两次回车，我们收到了服务端的回复：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="hljs-number">301</span> Moved Permanently</span><br><span class="line"><span class="hljs-attribute">Date</span>: Fri, 25 Jan 2019 13:28:12 GMT</span><br><span class="line"><span class="hljs-attribute">Content-Type</span>: text/html</span><br><span class="line"><span class="hljs-attribute">Content-Length</span>: 182</span><br><span class="line"><span class="hljs-attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="hljs-attribute">Location</span>: https://time.geekbang.org/</span><br><span class="line"><span class="hljs-attribute">Strict-Transport-Security</span>: max-age=15768000</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这就是一次完整的 HTTP 请求的过程了，我们可以看到，在 TCP 通道中传输的，完全是文本。</p><p>在请求部分，第一行被称作 request line，它分为三个部分，HTTP Method，也就是请求的“方法”，请求的路径和请求的协议和版本。</p><p>在响应部分，第一行被称作 response line，它也分为三个部分，协议和版本、状态码和状态文本。</p><p>紧随在 request line 或者 response line 之后，是请求头 / 响应头，这些头由若干行组成，每行是用冒号分隔的名称和值。<br>在头之后，以一个空行（两个换行符）为分隔，是请求体 / 响应体，请求体可能包含文件或者表单数据，响应体则是 html 代码。</p><p></p><h2>HTTP 协议格式</h2><br>根据上面的分析，我们可以知道 HTTP 协议，大概可以划分成如下部分。<br><img src="https://static001.geekbang.org/resource/image/3d/a1/3db5e0f362bc276b83c7564430ecb0a1.jpg" alt><p></p><p>我们简单看一下，在这些部分中，path 是请求的路径完全由服务端来定义，没有很多的特别内容；而 version 几乎都是固定字符串；response body 是我们最熟悉的 HTML，我在后面会有专门的课程介绍，这里也就不多讲了。</p><p>下面我们就来逐个给你介绍其它部分。</p><p></p><h2>HTTP Method（方法）</h2><br>我们首先来介绍一下 request line 里面的方法部分。这里的方法跟我们编程中的方法意义类似，表示我们此次 HTTP 请求希望执行的操作类型。方法有以下几种定义：<p></p><p><ul><br>  <li>GET</li><br>  <li>POST</li><br>  <li>HEAD</li><br>  <li>PUT</li><br>  <li>DELETE</li><br>  <li>CONNECT</li><br>  <li>OPTIONS</li><br>  <li>TRACE</li><br></ul><br>浏览器通过地址栏访问页面都是 GET 方法。表单提交产生 POST 方法。</p><p>HEAD 则是跟 GET 类似，只返回请求头，多数由 JavaScript 发起</p><p>PUT 和 DELETE 分别表示添加资源和删除资源，但是实际上这只是语义上的一种约定，并没有强约束。</p><p>CONNECT 现在多用于 HTTPS 和 WebSocket。</p><p>OPTIONS 和 TRACE 一般用于调试，多数线上服务都不支持。</p><p></p><h2>HTTP Status code（状态码）和 Status text（状态文本）</h2><br>接下来我们看看 response line 的状态码和状态文本。常见的状态码有以下几种。<p></p><p><ul><br>  <li>1xx：临时回应，表示客户端请继续。</li><br>  <li>2xx：请求成功。<br>    <ul><br>      <li>200：请求成功。</li><br>    </ul><br>  </li><br>  <li>3xx: 表示请求的目标有变化，希望客户端进一步处理。<br>    <ul><br>      <li>301&amp;302：永久性与临时性跳转。</li><br>      <li>304：跟客户端缓存没有更新。</li><br>    </ul><br>  </li><br>  <li>4xx：客户端请求错误。<br>    <ul><br>      <li>403：无权限。</li><br>      <li>404：表示请求的页面不存在。</li><br>      <li>418：It’s a teapot. 这是一个彩蛋，来自 ietf 的一个愚人节玩笑。（<a href="https://tools.ietf.org/html/rfc2324" target="_blank" rel="noopener">超文本咖啡壶控制协议</a>）</li><br>    </ul><br>  </li><br>  <li>5xx：服务端请求错误。<br>    <ul><br>      <li>500：服务端错误。</li><br>      <li>503：服务端暂时性错误，可以一会再试。</li><br>    </ul><br>  </li><br></ul><br>对我们前端来说，1xx 系列的状态码是非常陌生的，原因是 1xx 的状态被浏览器 http 库直接处理掉了，不会让上层应用知晓。<br>2xx 系列的状态最熟悉的就是 200，这通常是网页请求成功的标志，也是大家最喜欢的状态码。</p><p>3xx 系列比较复杂，301 和 302 两个状态表示当前资源已经被转移，只不过一个是永久性转移，一个是临时性转移。实际上 301 更接近于一种报错，提示客户端下次别来了。</p><p>304 又是一个每个前端必知必会的状态，产生这个状态的前提是：客户端本地已经有缓存的版本，并且在 Request 中告诉了服务端，当服务端通过时间或者 tag，发现没有更新的时候，就会返回一个不含 body 的 304 状态。</p><p></p><h2>HTTP Head (HTTP 头)</h2><br>HTTP 头可以看作一个键值对。原则上，HTTP 头也是一种数据，我们可以自由定义 HTTP 头和值。不过在 HTTP 规范中，规定了一些特殊的 HTTP 头，我们现在就来了解一下它们。<p></p><p>在 HTTP 标准中，有完整的请求 / 响应头规定，这里我们挑几个重点的说一下：</p><p>我们先来看看 Request Header。<br><img src="https://static001.geekbang.org/resource/image/2b/a2/2be3e2457f08bdf624837dfaee01e4a2.png" alt><br>接下来看一下 Response Header。<br><br>  <img src="https://static001.geekbang.org/resource/image/ef/c9/efdeadf27313e08bf0789a3b5480f7c9.png" alt><br>这里仅仅列出了我认为比较常见的 HTTP 头，这些头是我认为前端工程师应该做到不需要查阅，看到就可以知道意思的 HTTP 头。完整的列表还是请你参考我给出的 rfc2616 标准。</p><p></p><h2>HTTP Request Body</h2><br>HTTP 请求的 body 主要用于提交表单场景。实际上，http 请求的 body 是比较自由的，只要浏览器端发送的 body 服务端认可就可以了。一些常见的 body 格式是：<p></p><p><ul><br>  <li>application/json</li><br>  <li>application/x-www-form-urlencoded</li><br>  <li>multipart/form-data</li><br>  <li>text/xml</li><br></ul><br>我们使用 html 的 form 标签提交产生的 html 请求，默认会产生 application/x-www-form-urlencoded 的数据格式，当有文件上传时，则会使用 multipart/form-data。</p><p></p><h2>HTTPS</h2><br>在 HTTP 协议的基础上，HTTPS 和 HTTP2 规定了更复杂的内容，但是它基本保持了 HTTP 的设计思想，即：使用上的 Request-Response 模式。<p></p><p>我们首先来了解下 HTTPS。HTTPS 有两个作用，一是确定请求的目标服务端身份，二是保证传输的数据不会被网络中间节点窃听或者篡改。</p><p>HTTPS 的标准也是由 RFC 规定的，你可以查看它的详情链接：<a href="https://tools.ietf.org/html/rfc2818" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2818</a></p><p>HTTPS 是使用加密通道来传输 HTTP 的内容。但是 HTTPS 首先与服务端建立一条 TLS 加密通道。TLS 构建于 TCP 协议之上，它实际上是对传输的内容做一次加密，所以从传输内容上看，HTTPS 跟 HTTP没有任何区别。</p><p></p><h2>HTTP 2</h2><br>HTTP 2 是 HTTP 1.1 的升级版本，你可以查看它的详情链接。<a href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7540</a><p></p><p>HTTP 2.0 最大的改进有两点，一是支持服务端推送，二是支持 TCP 连接复用。</p><p>服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存当中，这可以避免客户端请求顺序带来的并行度不高，从而导致的性能问题。</p><p>TCP 连接复用，则使用同一个 TCP 连接来传输多个 HTTP 请求，避免了 TCP 连接建立时的三次握手开销，和初建 TCP 连接时传输窗口小的问题。</p><blockquote><br>  <span class="reference">Note: 其实很多优化涉及更下层的协议。IP 层的分包情况，和物理层的建连时间是需要被考虑的。</span><br></blockquote><p></p><h2>结语</h2><br>在这一节内容中，我们一起学习了浏览器的第一步工作，也就是“浏览器首先使用 HTTP 协议或 HTTPS 协议，向服务端请求页面”的这一过程。<p></p><p>在这个过程中，掌握 HTTP 协议是重中之重。我从一个小实验开始，带你体验了一次完整的 HTTP 请求过程。我们一起先分析了 HTTP 协议的结构。接下来，我分别介绍了 HTTP 方法、HTTP 状态码和状态文本、HTTP Head和 HTTP Request Body 几个重点需要注意的部分。</p><p>最后，我还介绍了 HTTPS 和 HTTP 2 这两个补充版本，以便你可以更好地熟悉并理解新的特性。</p><p>转自–《重学前端》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;_1kh1ihh6_0&quot;&gt;&lt;br&gt;  对于前端开发来说，我们平时与浏览器打交道的时间是最多的。可浏览器对前端同学来说更多像一个神秘黑盒子的存在。我们仅仅知道它能做什么，而不知道它是如何做到的。&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="WEB" scheme="https://jdsheng.cn/categories/WEB/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浏览器：一个浏览器是如何工作的？（阶段三）</title>
    <link href="https://jdsheng.cn/2020/06/06/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%88%E9%98%B6%E6%AE%B5%E4%B8%89%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/浏览器：一个浏览器是如何工作的（阶段三）/</id>
    <published>2020-06-06T15:00:23.699Z</published>
    <updated>2019-08-19T15:38:38.000Z</updated>
    
    <content type="html"><![CDATA[<div class="_1kh1ihh6_0"><br>  前面讲了浏览器的 DOM 构建过程，但是这个构建的 DOM，实际上信息是不全的，它只有节点和属性，不包含任何的样式信息。<br>  我们这一节课就来讲讲：浏览器是如何把 CSS 规则应用到节点上，<a id="more"></a>并给这棵朴素的 DOM 树添加上 CSS 属性的。<br><br>  <h2>整体过程</h2><br><br>  首先我们还是要感性地理解一下这个过程。<br><br>  首先 CSS 选择器这个名称，可能会给你带来一定的误解，觉得好像 CSS 规则是 DOM 树构建好了以后，再进行选择并给它添加样式的。实际上，这个过程并不是这样的。<br><br>  我们回忆一下我们在浏览器第一节课讲的内容，浏览器会尽量流式处理整个过程。我们上一节课构建 DOM 的过程是：从父到子，从先到后，一个一个节点构造，并且挂载到 DOM 树上的，那么这个过程中，我们是否能同步把 CSS属性计算出来呢？<br><br>  答案是肯定的。<br><br>  在这个过程中，我们依次拿到上一部构造好的元素，去检查它匹配到了哪些规则，再根据规则的优先级，做覆盖和调整。所以，从这个角度看，所谓的选择器，应该被理解成“匹配器”才更合适。<br><br>  我在 CSS 语法部分，已经总结了选择器的各种符号，这里再把它列出来，我们回顾一下：<br>  <ul><br>    <li>空格: 后代，选中它的子节点和所有子节点的后代节点。</li><br>    <li>&gt;: 子代，选中它的子节点。</li><br>    <li>+：直接后继选择器，选中它的下一个相邻节点。</li><br>    <li>~：后继，选中它之后所有的相邻节点。</li><br>    <li>||：列，选中表格中的一列。</li><br>  </ul><br><br>关于选择器的知识，我会在 CSS 的部分继续讲解。这里我们主要介绍浏览器是如何实现这些规则的。<br><br>不知道你有没有发现，这里的选择器有个特点，那就是选择器的出现顺序，必定跟构建 DOM 树的顺序一致。这是一个 CSS 设计的原则，即保证选择器在 DOM 树构建到当前节点时，已经可以准确判断是否匹配，不需要后续节点信息。<br><br>也就是说，未来也不可能会出现“父元素选择器”这种东西，因为父元素选择器要求根据当前节点的子节点，来判断当前节点是否被选中，而父节点会先于子节点构建。<br><br>理解了 CSS 构建的大概过程，我们下面来看看具体的操作。<br><br>首先，我们必须把 CSS 规则做一下处理。作为一门语言，CSS 需要先经过词法分析和语法分析，变成计算机能够理解的结构。<br>这部分具体的做法属于编译原理的内容，这里就不做赘述了。我们这里假设 CSS 已经被解析成了一棵可用的抽象语法树。<br><br>我们在之前的 CSS 课程中已经介绍过 compound-selector 的概念，一个 compound-selector 是检查一个元素的规则，而一个复合型选择器，则是由数个 compound-selector通过前面讲的符号连接起来的。<br><br><h2>后代选择器 “空格”</h2><br>我们先来分析一下后代选择器，我们来一起看一个例子：<br><br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">a</span><span class="hljs-selector-id">#b</span> <span class="hljs-selector-class">.cls</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>可以把一个 CSS 选择器按照 compound-selector 来拆成数段，每当满足一段条件的时候，就前进一段。比如，在上面的例子中，当我们找到了匹配 a#b 的元素时，我们才会开始检查它所有的子代是否匹配 .cls。除了前进一段的情况，我们还需要处理后退的情况，比如，我们这样一段代码：<br><br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">b</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">cls</span>&gt;</span>2<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">cls</span>&gt;</span>3<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>当遇到 &lt;/a&gt; 时，必须使得规则 a#b .cls 回退一步，这样第三个 span 才不会被选中。后代选择器的作用范围是父节点的所有子节点，因此规则是在匹配到本标签的结束标签时回退。<br><br><h2>后继选择器“ ~ ”</h2><br>接下来我们看下后继选择器，跟后代选择器不同的地方是，后继选择器只作用于一层，我们来看一个例子：<br><br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.cls~* &#123;</span><br><span class="line">    border:solid 1px green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">cls</span>&gt;</span>2<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    3</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>这里 .cls 选中了 span 2 然后 span 3 是它的后继，但是 span 3 的子节点 span 4 并不应该被选中，而 span 5 也是它的后继，因此应该被选中。<br><br>按照 DOM 树的构造顺序，4 在 3 和 5 中间，我们就没有办法像前面讲的后代选择器一样通过激活或者关闭规则来实现匹配。<br>但是这里有个非常方便的思路，就是给选择器的激活，带上一个条件：父元素。<br><br>注意，这里后继选择器，当前半段的 .cls 匹配成功时，后续 * 所匹配的所有元素的父元素都已经确定了（后继节点和当前节点父元素相同是充分必要条件）。在我们的例子中，那个 div 就是后继节点的父元素。<br><br><h2>子代选择器“ &gt;”</h2><br>我们继续看，子代选择器是如何实现的。<br><br>实际上，有了前面讲的父元素这个约束思路，我们很容易实现子代选择器。区别仅仅是拿当前节点作为父元素，还是拿当前节点的父元素作为父元素。<br><br><figure class="highlight dts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">div&gt;.<span class="hljs-class">cls </span>&#123;</span><br><span class="line"><span class="hljs-symbol">    border:</span>solid <span class="hljs-number">1</span>px green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-params">&lt;div&gt;</span></span><br><span class="line"><span class="hljs-params">&lt;span&gt;</span><span class="hljs-number">1</span><span class="hljs-params">&lt;span&gt;</span></span><br><span class="line"><span class="hljs-params">&lt;span class=cls&gt;</span><span class="hljs-number">2</span><span class="hljs-params">&lt;span&gt;</span></span><br><span class="line"><span class="hljs-params">&lt;span&gt;</span></span><br><span class="line">    <span class="hljs-number">3</span></span><br><span class="line">    <span class="hljs-params">&lt;span&gt;</span><span class="hljs-number">4</span><span class="hljs-params">&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-params">&lt;span&gt;</span></span><br><span class="line"><span class="hljs-params">&lt;span&gt;</span><span class="hljs-number">5</span><span class="hljs-params">&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-params">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><br><br>我们看这段代码，当 DOM 树构造到 div 时，匹配了 CSS 规则的第一段，因为是子代选择器，我们激活后面的 .cls 选择条件，并且指定父元素必须是当前 div。于是后续的构建 DOM 树构建过程中，span 2 就被选中了。<br><br><h2>直接后继选择器“ +”</h2><br>直接后继选择器的实现是上述中最为简单的了，因为它只对唯一一个元素生效，所以不需要像前面几种一样反复激活和关闭规则。<br>一个最简单的思路是，我们可以把它当作检查元素自身的选择器来处理。即我们把 #id+.cls 都当做检查某一个元素的选择器。<br>另外的一种思路是：给后继选择器加上一个 flag，使它匹配一次后失效。你可以尝试一下，告诉我结果。<br><br><h2>列选择器“ || ”</h2><br>列选择器比较特别，它是专门针对表格的选择器，跟表格的模型建立相关，我们这里不详细讲了。<br><br><h2>其它</h2><br>我们不要忘记，CSS 选择器还支持逗号分隔，表示“或”的关系。这里最简单的实现是把逗号视为两条规则的一种简易写法。<br>比如<br><br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">a</span><span class="hljs-selector-id">#b</span>, <span class="hljs-selector-class">.cls</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>我们当作两条规则来处理：<br><br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">a</span><span class="hljs-selector-id">#b</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.cls</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>还有一个情况，就是选择器可能有重合，这样，我们可以使用树形结构来进行一些合并，来提高效率：<br><br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-id">#a</span> <span class="hljs-selector-class">.cls</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-id">#a</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-id">#a</span>&gt;<span class="hljs-selector-tag">span</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>这里实际上可以把选择器构造成一棵树：<br><ul><br>  <li>#a<br>    <ul><br>      <li>&lt; 空格 &gt;.cls</li><br>      <li>&lt; 空格 &gt;span</li><br>      <li>&gt;span</li><br>    </ul><br>  </li><br></ul><br>需要注意的是，这里的树，必须要带上连接符。<br><br><h2>结语</h2><br>这一节我们讲解了 CSS 计算的过程。CSS 计算是把 CSS 规则应用到 DOM 树上，为 DOM 结构添加显示相关属性的过程。在这一节中，我们主要介绍了选择器的几种复合结构应该如何实现。<br><br>在这一步骤之后，我们得到了一棵带有 CSS 属性的树，为我们后续继续显式打下了基础。<br><br>最后留一个问题，你认为 CSS 语法解析成什么结构，最适合我们进行 CSS 计算。<br><br>转自—《重学前端》<br></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;_1kh1ihh6_0&quot;&gt;&lt;br&gt;  前面讲了浏览器的 DOM 构建过程，但是这个构建的 DOM，实际上信息是不全的，它只有节点和属性，不包含任何的样式信息。&lt;br&gt;  我们这一节课就来讲讲：浏览器是如何把 CSS 规则应用到节点上，&lt;/div&gt;
    
    </summary>
    
      <category term="WEB" scheme="https://jdsheng.cn/categories/WEB/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浅谈PHP面向对象编程</title>
    <link href="https://jdsheng.cn/2020/06/06/%E6%B5%85%E8%B0%88php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://jdsheng.cn/2020/06/06/浅谈php面向对象编程/</id>
    <published>2020-06-06T15:00:23.672Z</published>
    <updated>2019-10-02T03:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章给大家分享的内容是关于浅谈PHP面向对象编程 ，有着一定的参考价值，有需要的朋友可以参考一下。</p><h2 id="一、PHP面向对象编程基础实践"><a href="#一、PHP面向对象编程基础实践" class="headerlink" title="一、PHP面向对象编程基础实践"></a>一、PHP面向对象编程基础实践</h2><a id="more"></a><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line">/*</span><br><span class="line">*    通过对象的编程方式，可将实现生活中的一切事物以对象的形式表现出来。便于理解、维护、扩展等；</span><br><span class="line">*    本示例：定义一个“人”类</span><br><span class="line">*    $name : 对象中的成员属性，在此类中表示人的姓名</span><br><span class="line">*    say() : 对象中的成员方法，在此类中表示人说话的方法</span><br><span class="line">*    $this : PHP中的伪变量，表示自身的类</span><br><span class="line">*    __construct() : php中的魔术方法，构造函数，在实例化类时自动执行</span><br><span class="line">*    __destruct() : php中的魔术方法，析构函数，当类调用完成后自动执行</span><br><span class="line"><span class="hljs-php">*/</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> $name;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> $sex;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> $age;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($name,$sex,$age)</span> </span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;name = $name;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;sex = $sex;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;age = $age;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">'大家好，我的名字叫'</span>.<span class="hljs-keyword">$this</span>-&gt;name.<span class="hljs-string">'，今年'</span>.<span class="hljs-keyword">$this</span>-&gt;age.<span class="hljs-string">'岁，我的性别是'</span>.<span class="hljs-keyword">$this</span>-&gt;sex;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-keyword">null</span>;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;sex = <span class="hljs-keyword">null</span>;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;age = <span class="hljs-keyword">null</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//实例化“人”类</span></span></span><br><span class="line"><span class="hljs-php">$male = <span class="hljs-keyword">new</span> Human(<span class="hljs-string">"张三"</span>,<span class="hljs-string">"男"</span>,<span class="hljs-string">"20"</span>);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//调用“人”类说话的方法</span></span></span><br><span class="line"><span class="hljs-php">$male-&gt;say();</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//输出结果：大家好，我的名字叫张三，今年20岁，我的性别是男</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="二、PHP面向对象高级编程实践"><a href="#二、PHP面向对象高级编程实践" class="headerlink" title="二、PHP面向对象高级编程实践"></a>二、PHP面向对象高级编程实践</h2><p><em>知识点：类的继承、方法重写、访问控制、static关键字、final关键字、数据访问、接口、多态、抽象类</em></p><p><strong>2.1、类的继承：extends 关键字</strong><br>例如：一员运行员、一位主持人，他们有人类共同的行为方法，但他们都有自己不同的特长专业。因此在编程时需要给他们创建一个父类并继承；</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line">/*</span><br><span class="line">*    创建一个“人”类做为父类，继承的子类都拥有其父类的成员属性、方法</span><br><span class="line"><span class="hljs-php">*/</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> $name;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"父类说话的方法，姓名："</span>.<span class="hljs-keyword">$this</span>-&gt;name.<span class="hljs-string">"\n"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"父类吃饭的方法\n"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line">/*</span><br><span class="line">*    创建一个“运动员”类，继承“人”类</span><br><span class="line">*    extends : 关键字，继承某个类</span><br><span class="line"><span class="hljs-php">*/</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> $type;    </span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($name,$type)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;name = $name;    <span class="hljs-comment">//给父类 $name 属性赋值</span></span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;type = $type;    </span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;say();   <span class="hljs-comment">//调用父类“说话”的方法</span></span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"我在正跑步，我是一员"</span>.<span class="hljs-keyword">$this</span>-&gt;type.<span class="hljs-string">"运动员.....\n"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line">/*</span><br><span class="line">*    创建一个“主持人”类，继承“人”类</span><br><span class="line">*    extends : 关键字，继承某个类</span><br><span class="line"><span class="hljs-php">*/</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> $television; </span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($name,$television)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;name = $name;    </span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;television= $television;   </span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">perform</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">$this</span>-&gt;eat();   <span class="hljs-comment">//调用父类“吃饭”的方法</span></span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"我在正表演一个节目，我是"</span>.<span class="hljs-keyword">$this</span>-&gt;television.<span class="hljs-string">"电视台的一名主持人.....\n"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//实例化“运动员”类</span></span></span><br><span class="line"><span class="hljs-php">$nba = <span class="hljs-keyword">new</span> Sport(<span class="hljs-string">"乔丹"</span>,<span class="hljs-string">"篮球"</span>);</span></span><br><span class="line"><span class="hljs-php">$nba-&gt;run();</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//实例化“主持人”类</span></span></span><br><span class="line"><span class="hljs-php">$tv = <span class="hljs-keyword">new</span> Host(<span class="hljs-string">"张三"</span>,<span class="hljs-string">"北京卫视"</span>);</span></span><br><span class="line"><span class="hljs-php">$tv-&gt;perform();</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//输出结果：</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//父类说话的方法，姓名：乔丹 我在正跑步，我是一员篮球运动员..... </span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//父类吃饭的方法 我在正表演一个节目，我是北京卫视电视台的一名主持人.....</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>2.2、方法重写：子类重写父类的方法</strong></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"父类说话的方法"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">//重写父类“说话”的方法</span></span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"子类说话的方法"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">$nba = <span class="hljs-keyword">new</span> Sport();</span></span><br><span class="line"><span class="hljs-php">$nba-&gt;say();</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//输出结果：子类说话的方法</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>2.3、访问控制：public 、 protected 、private 关键字</strong></p><p>public：定义公共的成员属性或方法，任何地方都可使用<br>protected : 定义受保护的成员属性或方法，只允许类本身或子类使用<br>private : 定义私有的成员属性或方法，只允许类的本身使用</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> $name;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">protected</span> $sex;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">private</span> $age;  </span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//实例化对象，给公共属性赋值可正常输出结果，外部不能给protected、private受保护的成员属性赋值或使用</span></span></span><br><span class="line"><span class="hljs-php">$worker = <span class="hljs-keyword">new</span> Human();</span></span><br><span class="line"><span class="hljs-php">$worker-&gt;name = <span class="hljs-string">"张三"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">echo</span> $worker-&gt;name;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>2.4、static（静态）关键字</strong><br>1）、静态属性用于保存类的公有数据；<br>2）、静态方法里面只能访问静态属性或方法，不能使用 $this 伪变量；<br>3）、静态成员不需要通过 new 关键字来实例化对象就可访问使用；</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">static</span> $name = <span class="hljs-string">"张三"</span>;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"我的姓名叫："</span>.<span class="hljs-keyword">self</span>::$name;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//外部使用静态成员属性或方法</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">echo</span> Human::$name;</span></span><br><span class="line"><span class="hljs-php">Human::say();</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//输出结果：张三  我的姓名叫：张三</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>2.5、final关键字：不允许成员方法被重写，不允许被继承</strong><br>例：1、对于父类“吃饭”这个方法，不希望子类重写它；2、对于“运动员”这个类，不希望它再创建子类；</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"父类吃饭的方法，不允许子类重写"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"子类吃饭的方法。此时程序将会报致命错误"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//创建一个类继承 Sport 这个类。此时程序也将会报致命错误。因为 Sport 类不允许再创建子类</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sport</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> $name;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//实例化 Sport 类 ，调用 eat() 方法</span></span></span><br><span class="line"><span class="hljs-php">$nba = <span class="hljs-keyword">new</span> Sport();</span></span><br><span class="line"><span class="hljs-php">$nba-&gt;eat();</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//实例化 Student 类 ，给 name 属性负值</span></span></span><br><span class="line"><span class="hljs-php">$obj = <span class="hljs-keyword">new</span> Student();</span></span><br><span class="line"><span class="hljs-php">$obj-&gt;name = <span class="hljs-string">"张三"</span>;</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//输出结果：Fatal error: Cannot override final method Human::eat() in ******.php on line 15</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//Fatal error: Class Student may not inherit from final class (Sport) in ****.php on line 20</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>2.6、数据访问：$this 、 self 、parent 关键字</strong><br>$this ： 伪变量，代表类的本身，可访问本类及父类中的成员属性与方法。<br>self ： 访问类中的静态成员属性或方法<br>parent ：访问父类的成员属性或方法</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">static</span> $name = <span class="hljs-string">"张三"</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getParentName</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">parent</span>::$name;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">       <span class="hljs-keyword">self</span>::getParentName(); </span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">$obj = <span class="hljs-keyword">new</span> Sport();</span></span><br><span class="line"><span class="hljs-php">$obj-&gt;get();</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//输出结果：张三</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>2.7、接口：把不同类的共同行为方法进行定义，但不具体实现，由子类来实现具体的方法；</strong><br>例如：人会吃饭，动物也会吃饭，甚至有些植物也会吃饭，但他们吃饭的方式不一样，因此这时需要定义一个接口类，具体的方式由子类来实现；<br>定义接口关键字：interface<br>实现接口方法关键字：implements</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//定义一个接口类，有吃饭的方法，但不具体实现。</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICanEat</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eat</span><span class="hljs-params">($food)</span></span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICanEat</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">//eat()方法必须由子类来实现，否则程序将报致命错误</span></span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eat</span><span class="hljs-params">($food)</span> </span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"I'm eating "</span>.$food;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICanEat</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eat</span><span class="hljs-params">($food)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"It's eating "</span>.$food;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//实例化一个“人”类</span></span></span><br><span class="line"><span class="hljs-php">$people = <span class="hljs-keyword">new</span> Human();</span></span><br><span class="line"><span class="hljs-php">$people-&gt;eat(<span class="hljs-string">'rice'</span>);</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//实例化一个“动物”类</span></span></span><br><span class="line"><span class="hljs-php">$monkey = <span class="hljs-keyword">new</span> Animal();</span></span><br><span class="line"><span class="hljs-php">$monkey-&gt;eat(<span class="hljs-string">'banana'</span>);</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line">//输出结果：I'm eating rice</span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">// It's eating banana</span></span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>2.8、多态：比如接口A有两个实现B和C，B和C对A接口里面定义的方法实现可以是不同的，这种现象称之为多态；</strong><br>上述实例中，ICanEat接口定义了一个eat()方法，人类吃米饭，猴子吃香蕉。他们都实现了一个“吃”的方法，但他们吃东西有不同的行为，称之为多态；</p><p><strong>2.9、抽象类：介入接口与类的定义之间，允许类里面一部分方法不实现，实现一部分有相同功能且不会更改的方法。然而接口类里面不允许有任何实现的方法。</strong><br>例如：人和动物都具有吃饭与呼吸的方法，除吃饭不同以外，呼吸方法是相同的，此时需要定义一个抽象类来实现。<br>定义抽象类关键字：abstract</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"><span class="hljs-comment">//定义一个抽象类，里面有吃饭和呼吸的方法。呼吸方法需要在抽象类中具体实现</span></span><br><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ICanEat</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eat</span><span class="hljs-params">($food)</span></span>;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">breath</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Breath use the air...'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ICanEat</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eat</span><span class="hljs-params">($food)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"I'm eating "</span>.$food;</span><br><span class="line">        <span class="hljs-keyword">$this</span>-&gt;breath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//实例化“人”类</span></span><br><span class="line">$people = <span class="hljs-keyword">new</span> Human();</span><br><span class="line">$people-&gt;eat(<span class="hljs-string">'rice'</span>);</span><br><span class="line"><span class="hljs-comment">//输出结果:I'm eating rice Breath use the air...</span></span><br><span class="line"><span class="hljs-meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、PHP面向对象编程特殊实践"><a href="#三、PHP面向对象编程特殊实践" class="headerlink" title="三、PHP面向对象编程特殊实践"></a>三、PHP面向对象编程特殊实践</h2><p>PHP语言特定的一些魔术方法：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"当类在被实例化的时候，自动执行该函数"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">return</span> <span class="hljs-string">"当对象被当作字符串形式输出时，自动执行该函数"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">($value)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"当对象被当作函数调用时，自动执行该函数"</span>.$value;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line">    /*</span><br><span class="line">    *    当对象访问不存在的方法时，自动执行该函数。也称之为“方法重载”</span><br><span class="line">    *    $fun : 方法名称</span><br><span class="line">    *    $param : 传递的参数</span><br><span class="line"><span class="hljs-php">    */</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span><span class="hljs-params">($fun,$param)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"调用"</span>.$fun.<span class="hljs-string">"方法不存在，传递的参数"</span>.implode(<span class="hljs-string">','</span>,$param);</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line">    /*</span><br><span class="line">    *    当对象访问不存在的静态方法时，自动执行该函数。</span><br><span class="line">    *    $fun : 方法名称</span><br><span class="line">    *    $param : 传递的参数</span><br><span class="line"><span class="hljs-php">    */</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callStatic</span><span class="hljs-params">($fun,$param)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"调用"</span>.$fun.<span class="hljs-string">"静态方法不存在，传递的参数"</span>.implode(<span class="hljs-string">','</span>,$param);</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span><span class="hljs-params">($key)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"当读取对象中不可访问（未定义）的属性值时，自动调用该函数。"</span>.$key.<span class="hljs-string">"属性不可访问或未定义"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span><span class="hljs-params">($key,$value)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">         <span class="hljs-keyword">echo</span> <span class="hljs-string">"当给对象中不可访问（未定义）的属性赋值时，自动调用该函数。"</span>.$key.<span class="hljs-string">"属性不可访问或未定义，值"</span>.$value;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span><span class="hljs-params">($key)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"判断对象中的属性不存在时，自动执行该函数。属性："</span>.$key.<span class="hljs-string">"值未定义"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span><span class="hljs-params">($key)</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"释放对象中的不存在的属性值时，自动执行该函数。属性："</span>.$key.<span class="hljs-string">"值未定义"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"当对象被克隆时，自动执行该函数。"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">    &#123;</span></span><br><span class="line"><span class="hljs-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"当对象执行完成后，自动执行该函数"</span>;</span></span><br><span class="line"><span class="hljs-php">    &#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">$obj = <span class="hljs-keyword">new</span> Object();    <span class="hljs-comment">//实例化对象时，调用__construct()方法</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">echo</span> $obj;              <span class="hljs-comment">//将对象以字符串形式输出时，调用__toString()方法</span></span></span><br><span class="line"><span class="hljs-php">$obj(<span class="hljs-number">123</span>);              <span class="hljs-comment">//当对象以函数形式调用时，执行__invoke()方法</span></span></span><br><span class="line"><span class="hljs-php">$obj-&gt;runTest();        <span class="hljs-comment">//当调用对象中不存在的方法时，执行__call()方法</span></span></span><br><span class="line"><span class="hljs-php">$obj::runTest();        <span class="hljs-comment">//当调用对象中不存在的静态方法时，执行__callStatic()方法</span></span></span><br><span class="line"><span class="hljs-php">$obj-&gt;name;             <span class="hljs-comment">//当调用对象中不存在的成员属性时，执行__get()方法</span></span></span><br><span class="line"><span class="hljs-php">$obj-&gt;name = <span class="hljs-string">"张三"</span>;    <span class="hljs-comment">//当给对象中不存在的成员属性赋值时，执行__set()方法</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">isset</span>($obj-&gt;name) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;     <span class="hljs-comment">//判断对象中不存在的成员属性时，执行__isset()方法</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">unset</span>($obj-&gt;name);      <span class="hljs-comment">//释放对象中的不存在的属性值时，执行__unset()方法</span></span></span><br><span class="line"><span class="hljs-php">$obj2 = <span class="hljs-keyword">clone</span> $obj;     <span class="hljs-comment">//当对象被克隆时，执行__clone()方法</span></span></span><br><span class="line"><span class="hljs-php">                        <span class="hljs-comment">//对象执行完毕，执行__destruct()方法</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章给大家分享的内容是关于浅谈PHP面向对象编程 ，有着一定的参考价值，有需要的朋友可以参考一下。&lt;/p&gt;
&lt;h2 id=&quot;一、PHP面向对象编程基础实践&quot;&gt;&lt;a href=&quot;#一、PHP面向对象编程基础实践&quot; class=&quot;headerlink&quot; title=&quot;一、PHP面向对象编程基础实践&quot;&gt;&lt;/a&gt;一、PHP面向对象编程基础实践&lt;/h2&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://jdsheng.cn/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://jdsheng.cn/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>关于this的解析（四）——绑定例外和this词法</title>
    <link href="https://jdsheng.cn/2020/06/06/%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E7%BB%91%E5%AE%9A%E4%BE%8B%E5%A4%96%E5%92%8Cthis%E8%AF%8D%E6%B3%95/"/>
    <id>https://jdsheng.cn/2020/06/06/关于this的解析（四）——绑定例外和this词法/</id>
    <published>2020-06-06T15:00:23.532Z</published>
    <updated>2019-10-13T04:09:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1绑定例外"><a href="#1-1绑定例外" class="headerlink" title="1.1绑定例外"></a>1.1绑定例外</h2><p>在某些场景下 this 的绑定行为会出乎意料，你认为应当应用其他绑定规则时，实际上应用 的可能是默认绑定规则。<a id="more"></a></p><h4 id="1-1-1-被忽略的this"><a href="#1-1-1-被忽略的this" class="headerlink" title="1.1.1 被忽略的this"></a>1.1.1 被忽略的this</h4><p>如果你把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值 在调用时会被忽略，实际应用的是默认绑定规则：<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>; </span><br><span class="line">foo.call( <span class="hljs-literal">null</span> ); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>那么什么情况下你会传入 null 呢？</p><p>一种非常常见的做法是使用 apply(..) 来“展开”一个数组，并当作参数传入一个函数。 类似地，bind(..) 可以对参数进行柯里化（预先设置一些参数），这种方法有时非常有用：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">a,b</span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-string">"a:"</span> + a + <span class="hljs-string">", b:"</span> + b ); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 把数组“展开”成参数 </span></span><br><span class="line">foo.apply( <span class="hljs-literal">null</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>] ); <span class="hljs-comment">// a:2, b:3</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用 bind(..) 进行柯里化</span></span><br><span class="line"><span class="hljs-keyword">var</span> bar = foo.bind( <span class="hljs-literal">null</span>, <span class="hljs-number">2</span> ); </span><br><span class="line">bar( <span class="hljs-number">3</span> ); <span class="hljs-comment">// a:2, b:3</span></span><br></pre></td></tr></table></figure><p>这两种方法都需要传入一个参数当作 this 的绑定对象。如果函数并不关心 this 的话，你 仍然需要传入一个占位值，这时 null 可能是一个不错的选择，就像代码所示的那样。</p><p>然而，总是使用 null 来忽略 this 绑定可能产生一些副作用。如果某个函数确实使用了 this（比如第三方库中的一个函数），那默认绑定规则会把 this 绑定到全局对象（在浏览 器中这个对象是 window），这将导致不可预计的后果（比如修改全局对象）。 </p><p>显而易见，这种方式可能会导致许多难以分析和追踪的 bug。</p><h5 id="更安全的this"><a href="#更安全的this" class="headerlink" title="更安全的this"></a>更安全的this</h5><p>一种“更安全”的做法是传入一个特殊的对象，把 this 绑定到这个对象不会对你的程序 产生任何副作用。就像网络（以及军队）一样，我们可以创建一个“DMZ”（demilitarized zone，非军事区）对象——它就是一个空的非委托的对象（下面会讲到）。</p><p> 如果我们在忽略 this 绑定时总是传入一个 DMZ 对象，那就什么都不用担心了，因为任何 对于 this 的使用都会被限制在这个空对象中，不会对全局对象产生任何影响。 </p><p>由于这个对象完全是一个空对象，我自己喜欢用变量名 ø（这是数学中表示空集合符号的 小写形式）来表示它。在大多数键盘（比如说 Mac 的 US 布局键盘）上都可以使用⌥ +o （Option-o）来打出这个符号。有些系统允许你为特殊符号设定快捷键。如果你不喜欢 ø 符 号或者你的键盘不太容易打出这个符号，那你可以换一个喜欢的名字来称呼它。 </p><p>无论你叫它什么，在 JavaScript 中创建一个空对象最简单的方法都是 Object.create(null) 。Object.create(null) 和 {} 很 像， 但 是 并 不 会 创 建 Object. prototype 这个委托，所以它比 {}“更空”：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">a,b</span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-string">"a:"</span> + a + <span class="hljs-string">", b:"</span> + b ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 我们的 DMZ 空对象 </span></span><br><span class="line"><span class="hljs-keyword">var</span> ø = <span class="hljs-built_in">Object</span>.create( <span class="hljs-literal">null</span> ); </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 把数组展开成参数 </span></span><br><span class="line">foo.apply( ø, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>] ); <span class="hljs-comment">// a:2, b:3 </span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用 bind(..) 进行柯里化</span></span><br><span class="line"><span class="hljs-keyword">var</span> bar = foo.bind( ø, <span class="hljs-number">2</span> ); </span><br><span class="line">bar( <span class="hljs-number">3</span> ); <span class="hljs-comment">// a:2, b:3</span></span><br></pre></td></tr></table></figure><p>使用变量名 ø 不仅让函数变得更加“安全”，而且可以提高代码的可读性，因为 ø 表示 “我希望 this 是空”，这比 null 的含义更清楚。不过再说一遍，你可以用任何喜欢的名字 来命名 DMZ 对象。</p><h4 id="1-1-2-间接引用"><a href="#1-1-2-间接引用" class="headerlink" title="1.1.2 间接引用"></a>1.1.2 间接引用</h4><p>另一个需要注意的是，你有可能（有意或者无意地）创建一个函数的“间接引用”，在这 种情况下，调用这个函数会应用默认绑定规则。 </p><p>间接引用最容易在赋值时发生：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> o = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">foo</span>: foo &#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> p = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">4</span> &#125;; </span><br><span class="line">o.foo(); <span class="hljs-comment">// 3 </span></span><br><span class="line">(p.foo = o.foo)(); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><p>赋值表达式 p.foo = o.foo 的返回值是目标函数的引用，因此调用位置是 foo() 而不是 p.foo() 或者 o.foo()。根据我们之前说过的，这里会应用默认绑定。</p><blockquote><p> 注意：对于默认绑定来说，决定 this 绑定对象的并不是调用位置是否处于严格模式，而是函数体是否处于严格模式。如果函数体处于严格模式，this 会被绑定到 undefined，否则 this 会被绑定到全局对象。</p></blockquote><h4 id="1-1-3-软绑定"><a href="#1-1-3-软绑定" class="headerlink" title="1.1.3 软绑定"></a>1.1.3 软绑定</h4><p>之前我们已经看到过，硬绑定这种方式可以把 this 强制绑定到指定的对象（除了使用 new 时），防止函数调用应用默认绑定规则。问题在于，硬绑定会大大降低函数的灵活性，使 用硬绑定之后就无法使用隐式绑定或者显式绑定来修改 this。 </p><p>如果可以给默认绑定指定一个全局对象和 undefined 以外的值，那就可以实现和硬绑定相 同的效果，同时保留隐式绑定或者显式绑定修改 this 的能力。</p><p> 可以通过一种被称为软绑定的方法来实现我们想要的效果：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Function</span>.prototype.softBind) &#123; </span><br><span class="line"><span class="hljs-built_in">Function</span>.prototype.softBind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123; </span><br><span class="line"><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">this</span>; <span class="hljs-comment">// 捕获所有 curried 参数</span></span><br><span class="line"><span class="hljs-keyword">var</span> curried = [].slice.call( <span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span> );</span><br><span class="line"><span class="hljs-keyword">var</span> bound = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> fn.apply( </span><br><span class="line">(!<span class="hljs-keyword">this</span> || <span class="hljs-keyword">this</span> === (<span class="hljs-built_in">window</span> || global)) ? </span><br><span class="line">obj : <span class="hljs-keyword">this</span></span><br><span class="line">curried.concat.apply( curried, <span class="hljs-built_in">arguments</span> ) </span><br><span class="line">); </span><br><span class="line">&#125;;</span><br><span class="line">bound.prototype = <span class="hljs-built_in">Object</span>.create( fn.prototype );</span><br><span class="line"><span class="hljs-keyword">return</span> bound; </span><br><span class="line">&#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了软绑定之外，softBind(..) 的其他原理和 ES5 内置的 bind(..) 类似。它会对指定的函 数进行封装，首先检查调用时的 this，如果 this 绑定到全局对象或者 undefined，那就把 指定的默认对象 obj 绑定到 this，否则不会修改 this。此外，这段代码还支持可选的柯里 化（详情请查看之前和 bind(..) 相关的介绍）。</p><p>下面我们看看 softBind 是否实现了软绑定功能：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"name: "</span> + <span class="hljs-keyword">this</span>.name); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">"obj"</span> &#125;, </span><br><span class="line">  obj2 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">"obj2"</span> &#125;,</span><br><span class="line">   obj3 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">"obj3"</span> &#125;;</span><br><span class="line">   </span><br><span class="line"><span class="hljs-keyword">var</span> fooOBJ = foo.softBind( obj ); </span><br><span class="line"></span><br><span class="line">fooOBJ(); <span class="hljs-comment">// name: obj </span></span><br><span class="line"></span><br><span class="line">obj2.foo = foo.softBind(obj); </span><br><span class="line">obj2.foo(); <span class="hljs-comment">// name: obj2 &lt;---- 看！！！ </span></span><br><span class="line"></span><br><span class="line">fooOBJ.call( obj3 ); <span class="hljs-comment">// name: obj3 &lt;---- 看！ </span></span><br><span class="line"></span><br><span class="line">setTimeout( obj2.foo, <span class="hljs-number">10</span> ); </span><br><span class="line"><span class="hljs-comment">// name: obj &lt;---- 应用了软绑定</span></span><br></pre></td></tr></table></figure><p>可以看到，软绑定版本的 foo() 可以手动将 this 绑定到 obj2 或者 obj3 上，但如果应用默 认绑定，则会将 this 绑定到 obj。</p><h2 id="1-2-this词法"><a href="#1-2-this词法" class="headerlink" title="1.2 this词法"></a>1.2 this词法</h2><p>我们之前介绍的四条规则已经可以包含所有正常的函数。但是 ES6 中介绍了一种无法使用 这些规则的特殊函数类型：箭头函数。</p><p> 箭头函数并不是使用 function 关键字定义的，而是使用被称为“胖箭头”的操作符 =&gt; 定 义的。箭头函数不使用 this 的四种标准规则，而是根据外层（函数或者全局）作用域来决 定 this。 </p><p>我们来看看箭头函数的词法作用域：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-comment">// 返回一个箭头函数</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> &#123; </span><br><span class="line"><span class="hljs-comment">//this 继承自 foo() </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj1 = &#123; </span><br><span class="line">a:<span class="hljs-number">2</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> obj2 = &#123; </span><br><span class="line">a:<span class="hljs-number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> bar = foo.call( obj1 ); </span><br><span class="line">bar.call( obj2 ); <span class="hljs-comment">// 2, 不是 3 ！</span></span><br></pre></td></tr></table></figure><p>foo() 内部创建的箭头函数会捕获调用时 foo() 的 this。由于 foo() 的 this 绑定到 obj1， bar（引用箭头函数）的 this 也会绑定到 obj1，箭头函数的绑定无法被修改。（new 也不 行！）</p><p>箭头函数最常用于回调函数中，例如事件处理器或者定时器：<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; </span><br><span class="line"><span class="hljs-comment">// 这里的 this 在此法上继承自 foo() </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;,<span class="hljs-number">100</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a:<span class="hljs-number">2</span> </span><br><span class="line">&#125;;</span><br><span class="line">foo.call( obj ); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>箭头函数可以像 bind(..) 一样确保函数的 this 被绑定到指定对象，此外，其重要性还体 现在它用更常见的词法作用域取代了传统的 this 机制。实际上，在 ES6 之前我们就已经 在使用一种几乎和箭头函数完全一样的模式。<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> self = <span class="hljs-keyword">this</span>; <span class="hljs-comment">// lexical capture of this </span></span><br><span class="line">setTimeout( <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( self.a ); </span><br><span class="line">&#125;, <span class="hljs-number">100</span> ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a: <span class="hljs-number">2</span> </span><br><span class="line">&#125;;</span><br><span class="line">foo.call( obj ); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>虽然 self = this 和箭头函数看起来都可以取代 bind(..)，但是从本质上来说，它们想替 代的是 this 机制。 </p><p>如果你经常编写 this 风格的代码，但是绝大部分时候都会使用 self = this 或者箭头函数 来否定 this 机制，那你或许应当：</p><ol><li>只使用词法作用域并完全抛弃错误 this 风格的代码； </li><li>完全采用 this 风格，在必要时使用 bind(..)，尽量避免使用 self = this 和箭头函数。</li></ol><p>当然，包含这两种代码风格的程序可以正常运行，但是在同一个函数或者同一个程序中混 合使用这两种风格通常会使代码更难维护，并且可能也会更难编写。</p><h2 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h2><p>如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后 就可以顺序应用下面这四条规则来判断 this 的绑定对象。 </p><ol><li>由 new 调用？绑定到新创建的对象。 </li><li>由 call 或者 apply（或者 bind）调用？绑定到指定的对象。 </li><li>由上下文对象调用？绑定到那个上下文对象。 </li><li><p>默认：在严格模式下绑定到 undefined，否则绑定到全局对象。</p><p>一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑 定，你可以使用一个 DMZ 对象，比如 ø = Object.create(null)，以保护全局对象。</p></li></ol><p>ES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定（无论 this 绑定到什么）。这 其实和 ES6 之前代码中的 self = this 机制一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1绑定例外&quot;&gt;&lt;a href=&quot;#1-1绑定例外&quot; class=&quot;headerlink&quot; title=&quot;1.1绑定例外&quot;&gt;&lt;/a&gt;1.1绑定例外&lt;/h2&gt;&lt;p&gt;在某些场景下 this 的绑定行为会出乎意料，你认为应当应用其他绑定规则时，实际上应用 的可能是默认绑定规则。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://jdsheng.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于this的解析（三）——绑定规则的优先级</title>
    <link href="https://jdsheng.cn/2020/06/06/%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%B0%83%E7%94%A8%E4%BD%8D%E7%BD%AE%E5%92%8C%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99/"/>
    <id>https://jdsheng.cn/2020/06/06/关于this的解析（二）——调用位置和绑定规则/</id>
    <published>2020-06-06T15:00:23.484Z</published>
    <updated>2019-10-13T04:09:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-调用位置"><a href="#1-1-调用位置" class="headerlink" title="1.1 调用位置"></a>1.1 调用位置</h2><p>在理解 this 的绑定过程之前首先要理解调用位置：调用位置就是函数在代码中被调用的位置（而不是声明的位置）<a id="more"></a>。只有仔细分析调用位置才能回答这个问题：这个 this 到底引 用的是什么？ </p><p>通常来说，寻找调用位置就是寻找“函数被调用的位置”，但是做起来并没有这么简单， 因为某些编程模式可能会隐藏真正的调用位置。 </p><p>最重要的是要分析调用栈（就是为了到达当前执行位置所调用的所有函数）。我们关心的 调用位置就在当前正在<strong>执行的函数的前一个调用中</strong>。 </p><p>下面我们来看看到底什么是调用栈和调用位置：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">baz</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"> <span class="hljs-comment">// 当前调用栈是：baz </span></span><br><span class="line"> <span class="hljs-comment">// 因此，当前调用位置是全局作用域 </span></span><br><span class="line"> <span class="hljs-built_in">console</span>.log( <span class="hljs-string">"baz"</span> ); </span><br><span class="line"> bar(); <span class="hljs-comment">// &lt;-- bar 的调用位置 </span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-comment">// 当前调用栈是 baz -&gt; bar </span></span><br><span class="line"><span class="hljs-comment">// 因此，当前调用位置在 baz 中 </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-string">"bar"</span> ); </span><br><span class="line">foo(); <span class="hljs-comment">// &lt;-- foo 的调用位置 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-comment">// 当前调用栈是 baz -&gt; bar -&gt; foo</span></span><br><span class="line"><span class="hljs-comment">// 因此，当前调用位置在 bar 中 </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-string">"foo"</span> ); </span><br><span class="line">&#125;</span><br><span class="line">baz(); <span class="hljs-comment">// &lt;-- baz 的调用位置</span></span><br></pre></td></tr></table></figure><p>注意我们是如何（从调用栈中）分析出真正的调用位置的，因为它决定了 this 的绑定。</p><blockquote><p>你可以把调用栈想象成一个函数调用链，就像我们在前面代码段的注释中所 写的一样。但是这种方法非常麻烦并且容易出错。另一个查看调用栈的方法 是使用浏览器的调试工具。绝大多数现代桌面浏览器都内置了开发者工具， 其中包含 JavaScript 调试器。就本例来说，你可以在工具中给 foo() 函数的 第一行代码设置一个断点，或者直接在第一行代码之前插入一条 debugger;语句。运行代码时，调试器会在那个位置暂停，同时会展示当前位置的函数 调用列表，这就是你的调用栈。因此，如果你想要分析 this 的绑定，使用开 发者工具得到调用栈，然后找到栈中第二个元素，这就是真正的调用位置。</p></blockquote><h2 id="1-2-绑定规则"><a href="#1-2-绑定规则" class="headerlink" title="1.2 绑定规则"></a>1.2 绑定规则</h2><h4 id="1-2-1-默认绑定"><a href="#1-2-1-默认绑定" class="headerlink" title="1.2.1 默认绑定"></a>1.2.1 默认绑定</h4><p>最常用的函数调用类型：独立函数调用。可以把这条规则看作是无法应用 其他规则时的默认规则。<br>思考一下下面的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>; </span><br><span class="line">foo(); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><p>你应该注意到的第一件事是，声明在全局作用域中的变量（比如 var a = 2）就是全局对象的一个同名属性。它们本质上就是同一个东西，并不是通过复制得到的，就像一个硬币的两面一样。 </p><p>接下来我们可以看到当调用 foo() 时，this.a 被解析成了全局变量 a。为什么？因为在本例中，函数调用时应用了this 的默认绑定，因此<strong>this指向全局对象</strong>。 </p><p>那么我们怎么知道这里应用了默认绑定呢？<strong>可以通过分析调用位置来看看 foo() 是如何调用的。在代码中，foo() 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定，无法应用其他规则。</strong></p><p>如果使用严格模式（strict mode），那么全局对象将无法使用默认绑定，因此 this 会绑定到 undefined：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-meta"> "use strict"</span>; </span><br><span class="line"> <span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>; </span><br><span class="line">foo(); <span class="hljs-comment">// TypeError: this is undefined</span></span><br></pre></td></tr></table></figure><p>这里有一个微妙但是非常重要的细节，虽然 this 的绑定规则完全取决于调用位置，但是只 有 foo() 运行在非 strict mode 下时，默认绑定才能绑定到全局对象；<strong>严格模式下与 foo() 的调用位置无关</strong>：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>; </span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; </span><br><span class="line"><span class="hljs-meta">"use strict"</span>;</span><br><span class="line"> foo(); <span class="hljs-comment">// 2 </span></span><br><span class="line"> &#125;)();</span><br></pre></td></tr></table></figure><h4 id="1-2-2隐性绑定"><a href="#1-2-2隐性绑定" class="headerlink" title="1.2.2隐性绑定"></a>1.2.2隐性绑定</h4><p>另一条需要考虑的规则是调用位置是否有上下文对象，或者说是否被某个对象拥有或者包 含，不过这种说法可能会造成一些误导。<br>思考下面的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a: <span class="hljs-number">2</span>, </span><br><span class="line">foo: foo </span><br><span class="line">&#125;;</span><br><span class="line">obj.foo(); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><p>首先需要注意的是 foo() 的声明方式，及其之后是如何被当作引用属性添加到 obj 中的。 但是无论是直接在 obj 中定义还是先定义再添加为引用属性，这个函数严格来说都不属于 obj 对象。</p><p>然而，<strong>调用位置会使用 obj 上下文来引用函数，因此你可以说函数被调用时 obj 对象“拥 有”或者“包含”它</strong>。 </p><p>无论你如何称呼这个模式，<strong>当 foo() 被调用时，它的落脚点确实指向 obj 对象。当函数引 用有上下文对象时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象。因为调 用 foo() 时 this 被绑定到 obj，因此 this.a 和 obj.a 是一样的。</strong></p><p>对象属性引用链中只有最顶层或者说最后一层会影响调用位置。举例来说：<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj2 = &#123; </span><br><span class="line">a: <span class="hljs-number">42</span>, </span><br><span class="line">foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> obj1 = &#123; </span><br><span class="line">a: <span class="hljs-number">2</span>,</span><br><span class="line">obj2: obj2 </span><br><span class="line">&#125;;</span><br><span class="line">obj1.obj2.foo(); <span class="hljs-comment">// 42</span></span><br></pre></td></tr></table></figure></p><h5 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h5><p>一个最常见的 this 绑定问题就是<strong>被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把 this 绑定到全局对象或者 undefined 上，取决于是否是严格模式。</strong></p><p>思考下面的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a: <span class="hljs-number">2</span>, </span><br><span class="line">foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> bar = obj.foo; <span class="hljs-comment">// 函数别名！</span></span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">"oops, global"</span>; <span class="hljs-comment">// a 是全局对象的属性 </span></span><br><span class="line">bar(); <span class="hljs-comment">// "oops, global"</span></span><br></pre></td></tr></table></figure><p>虽然 bar 是 obj.foo 的一个引用，但是实际上，它引用的是 foo 函数本身，因此此时的 bar() 其实是一个不带任何修饰的函数调用，因此应用了默认绑定。</p><p>一种更微妙、更常见并且更出乎意料的情况发生在传入回调函数时：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doFoo</span>(<span class="hljs-params">fn</span>) </span>&#123; </span><br><span class="line"><span class="hljs-comment">// fn 其实引用的是 foo </span></span><br><span class="line">fn(); <span class="hljs-comment">// &lt;-- 调用位置！ </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a: <span class="hljs-number">2</span>, </span><br><span class="line">foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">"oops, global"</span>; <span class="hljs-comment">// a 是全局对象的属性 </span></span><br><span class="line">doFoo( obj.foo ); <span class="hljs-comment">// "oops, global"</span></span><br></pre></td></tr></table></figure><p>参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值，所以结果和上一 个例子一样。</p><p> 如果把函数传入语言内置的函数而不是传入你自己声明的函数，会发生什么呢？结果是一 样的，没有区别：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a: <span class="hljs-number">2</span>, </span><br><span class="line">foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">"oops, global"</span>; <span class="hljs-comment">// a 是全局对象的属性 </span></span><br><span class="line">setTimeout( obj.foo, <span class="hljs-number">100</span> ); <span class="hljs-comment">// "oops, global"</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-显性绑定"><a href="#1-2-3-显性绑定" class="headerlink" title="1.2.3 显性绑定"></a>1.2.3 显性绑定</h4><p>就像我们刚才看到的那样，在分析隐式绑定时，我们必须在一个对象内部包含一个指向函 数的属性，并通过这个属性间接引用函数，从而把 this 间接（隐式）绑定到这个对象上。 </p><p>那么如果我们不想在对象内部包含函数引用，而想在某个对象上强制调用函数，该怎么 做呢？ </p><p>JavaScript 中的“所有”函数都有一些有用的特性（这和它们的 [[ 原型 ]] 有关——之后我 们会详细介绍原型），可以用来解决这个问题。具体点说，可以使用函数的 call(..) 和 apply(..) 方法。严格来说，JavaScript 的宿主环境有时会提供一些非常特殊的函数，它们 并没有这两个方法。但是这样的函数非常罕见，JavaScript 提供的绝大多数函数以及你自 己创建的所有函数都可以使用 call(..) 和 apply(..) 方法。 </p><p>这两个方法是如何工作的呢？它们的第一个参数是一个对象，它们会把这个对象绑定到 this，接着在调用函数时指定这个 this。因为你可以直接指定 this 的绑定对象，因此我 们称之为显式绑定。</p><p>思考下面的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a:<span class="hljs-number">2</span> </span><br><span class="line">&#125;;</span><br><span class="line">foo.call( obj ); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><p>通过 foo.call(..)，我们可以在调用 foo 时强制把它的 this 绑定到 obj 上。</p><blockquote><p>从 this 绑定的角度来说，call(..) 和 apply(..) 是一样的，它们的区别体现 在其他的参数上，但是现在我们不用考虑这些。</p></blockquote><p>可惜，显式绑定仍然无法解决我们之前提出的丢失绑定问题。</p><p><strong>1.硬绑定</strong><br>但是显式绑定的一个变种可以解决这个问题。 思考下面的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a:<span class="hljs-number">2</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> bar = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">foo.call( obj ); </span><br><span class="line">&#125;;</span><br><span class="line">bar(); <span class="hljs-comment">// 2 </span></span><br><span class="line">setTimeout( bar, <span class="hljs-number">100</span> ); <span class="hljs-comment">// 2 </span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 硬绑定的 bar 不可能再修改它的 this </span></span><br><span class="line">bar.call( <span class="hljs-built_in">window</span> ); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><p>我们来看看这个变种到底是怎样工作的。我们创建了函数 bar()，并在它的内部手动调用 了 foo.call(obj)，因此强制把 foo 的 this 绑定到了 obj。无论之后如何调用函数 bar，它 总会手动在 obj 上调用 foo。这种绑定是一种显式的强制绑定，因此我们称之为硬绑定。</p><p>由于硬绑定是一种非常常用的模式，所以在 ES5 中提供了内置的方法 <code>Function.prototype. bind</code>，它的用法如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">something</span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a, something );</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.a + something; </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">a:<span class="hljs-number">2</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> bar = foo.bind( obj );</span><br><span class="line"><span class="hljs-keyword">var</span> b = bar( <span class="hljs-number">3</span> ); <span class="hljs-comment">// 2 3 </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( b ); <span class="hljs-comment">// 5</span></span><br></pre></td></tr></table></figure><p><strong>2.API调用的“上下文”</strong><br>第三方库的许多函数，以及 JavaScript 语言和宿主环境中许多新的内置函数，都提供了一 个可选的参数，通常被称为“上下文”（context），其作用和 bind(..) 一样，确保你的回调 函数使用指定的 this。</p><p>举例来说：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">el</span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( el, <span class="hljs-keyword">this</span>.id ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123; </span><br><span class="line">id: <span class="hljs-string">"awesome"</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// 调用 foo(..) 时把 this 绑定到 obj </span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].forEach( foo, obj ); </span><br><span class="line"><span class="hljs-comment">// 1 awesome 2 awesome 3 awesome</span></span><br></pre></td></tr></table></figure><p>这些函数实际上就是通过 call(..) 或者 apply(..) 实现了显式绑定，这样你可以少些一些 代码。</p><h4 id="1-2-4-new绑定"><a href="#1-2-4-new绑定" class="headerlink" title="1.2.4 new绑定"></a>1.2.4 new绑定</h4><p>这是第四条也是最后一条 this 的绑定规则，在讲解它之前我们首先需要澄清一个非常常见 的关于 JavaScript 中函数和对象的误解。 </p><p>在传统的面向类的语言中，“构造函数”是类中的一些特殊方法，使用 new 初始化类时会 调用类中的构造函数。通常的形式是这样的：<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">something = <span class="hljs-keyword">new</span> MyClass(..);</span><br></pre></td></tr></table></figure></p><p>JavaScript 也有一个 new 操作符，使用方法看起来也和那些面向类的语言一样，绝大多数开 发者都认为 JavaScript 中 new 的机制也和那些语言一样。然而，JavaScript 中 new 的机制实 际上和面向类的语言完全不同。</p><p>首先我们重新定义一下 JavaScript 中的“构造函数”。在 JavaScript 中，构造函数只是一些 使用 new 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。实际上， 它们甚至都不能说是一种特殊的函数类型，它们只是被 new 操作符调用的普通函数而已。</p><p>举例来说，思考一下 Number(..) 作为构造函数时的行为，ES5.1 中这样描述它：</p><blockquote><p>当 Number 在 new 表达式中被调用时，它是一个构造函数：它会初始化新创建的 对象。</p></blockquote><p>所以，包括内置对象函数（比如 Number(..)，详情请查看第 3 章）在内的所有函数都可 以用 new 来调用，这种函数调用被称为构造函数调用。这里有一个重要但是非常细微的区 别：实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”。</p><p>使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p><ol><li>创建（或者说构造）一个全新的对象。 </li><li>这个新对象会被执行 [[ 原型 ]] 连接。</li><li>这个新对象会绑定到函数调用的 this。 </li><li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。</li></ol><p>思考下面的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.a = a; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">new</span> foo(<span class="hljs-number">2</span>); </span><br><span class="line"><span class="hljs-built_in">console</span>.log( bar.a ); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><p>使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。new 是最后一种可以影响函数调用时 this 绑定行为的方法，我们称之为 new 绑定。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-调用位置&quot;&gt;&lt;a href=&quot;#1-1-调用位置&quot; class=&quot;headerlink&quot; title=&quot;1.1 调用位置&quot;&gt;&lt;/a&gt;1.1 调用位置&lt;/h2&gt;&lt;p&gt;在理解 this 的绑定过程之前首先要理解调用位置：调用位置就是函数在代码中被调用的位置（而不是声明的位置）&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://jdsheng.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于this的解析（二）——调用位置和绑定规则</title>
    <link href="https://jdsheng.cn/2020/06/06/%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://jdsheng.cn/2020/06/06/关于this的解析（三）——绑定规则的优先级/</id>
    <published>2020-06-06T15:00:23.432Z</published>
    <updated>2019-10-13T04:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在我们已经了解了函数调用中this绑定的四条规则，你需要做的就是找到函数的调用位置并判断应当应用哪条规则。<a id="more"></a>但是，如果某个调用位置可以应用多条规则该怎么办？为了 解决这个问题就必须给这些规则设定优先级，这就是我们接下来要介绍的内容。 </p><p>毫无疑问，默认绑定的优先级是四条规则中最低的，所以我们可以先不考虑它。 </p><p>隐式绑定和显式绑定哪个优先级更高？我们来测试一下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj1 = &#123; </span><br><span class="line">a: <span class="hljs-number">2</span>, </span><br><span class="line">foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> obj2 = &#123; </span><br><span class="line">a: <span class="hljs-number">3</span>, </span><br><span class="line">foo: foo </span><br><span class="line">&#125;;</span><br><span class="line">obj1.foo(); <span class="hljs-comment">// 2 </span></span><br><span class="line">obj2.foo(); <span class="hljs-comment">// 3 </span></span><br><span class="line"></span><br><span class="line">obj1.foo.call( obj2 ); <span class="hljs-comment">// 3 </span></span><br><span class="line">obj2.foo.call( obj1 ); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><p>可以看到，<strong>显式绑定优先级更高</strong>，也就是说在判断时应当先考虑是否可以应用显式绑定。</p><p>现在我们需要搞清楚 new 绑定和隐式绑定的优先级谁高谁低：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">something</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.a = something; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj1 = &#123; </span><br><span class="line">foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> obj2 = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">obj1.foo( <span class="hljs-number">2</span> ); </span><br><span class="line"><span class="hljs-built_in">console</span>.log( obj1.a ); <span class="hljs-comment">// 2 </span></span><br><span class="line"></span><br><span class="line">obj1.foo.call( obj2, <span class="hljs-number">3</span> ); </span><br><span class="line"><span class="hljs-built_in">console</span>.log( obj2.a ); <span class="hljs-comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">new</span> obj1.foo( <span class="hljs-number">4</span> ); </span><br><span class="line"><span class="hljs-built_in">console</span>.log( obj1.a ); <span class="hljs-comment">// 2 </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( bar.a ); <span class="hljs-comment">// 4</span></span><br></pre></td></tr></table></figure><p>可以看到 <strong>new 绑定比隐式绑定优先级高</strong>。但是 new 绑定和显式绑定谁的优先级更高呢？</p><blockquote><p>new 和 call/apply 无法一起使用，因此无法通过 new foo.call(obj1) 来直接 进行测试。但是我们可以使用硬绑定来测试它俩的优先级。</p></blockquote><p>在看代码之前先回忆一下硬绑定是如何工作的。Function.prototype.bind(..) 会创建一个 新的包装函数，这个函数会忽略它当前的 this 绑定（无论绑定的对象是什么），并把我们 提供的对象绑定到 this 上。 </p><p>这样看起来硬绑定（也是显式绑定的一种）似乎比 new 绑定的优先级更高，无法使用 new 来控制 this 绑定。</p><p>我们看看是不是这样：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">something</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.a = something; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> bar = foo.bind( obj1 ); </span><br><span class="line">bar( <span class="hljs-number">2</span> ); </span><br><span class="line"><span class="hljs-built_in">console</span>.log( obj1.a ); <span class="hljs-comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> baz = <span class="hljs-keyword">new</span> bar(<span class="hljs-number">3</span>); </span><br><span class="line"><span class="hljs-built_in">console</span>.log( obj1.a ); <span class="hljs-comment">// 2 </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( baz.a ); <span class="hljs-comment">// 3</span></span><br></pre></td></tr></table></figure><p>出乎意料！ bar 被硬绑定到 obj1 上，但是 new bar(3) 并没有像我们预计的那样把 obj1.a 修改为 3。相反，new 修改了硬绑定（到 obj1 的）调用 bar(..) 中的 this。因为使用了 new 绑定，我们得到了一个名字为 baz 的新对象，并且 baz.a 的值是 3。</p><h5 id="判断this"><a href="#判断this" class="headerlink" title="判断this"></a>判断this</h5><p>现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的 顺序来进行判断：</p><ol><li><p>函数是否在 new 中调用（new 绑定）？如果是的话 this 绑定的是新创建的对象。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">new</span> foo()</span><br></pre></td></tr></table></figure></li><li><p>函数是否通过 call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是 指定的对象。 </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> bar = foo.call(obj2)</span><br></pre></td></tr></table></figure></li><li><p>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上 下文对象。 </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> bar = obj1.foo()</span><br></pre></td></tr></table></figure></li><li><p>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到 全局对象。 </p></li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> bar = foo()</span><br></pre></td></tr></table></figure><p>就是这样。对于正常的函数调用来说，理解了这些知识你就可以明白 this 的绑定原理了。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我们已经了解了函数调用中this绑定的四条规则，你需要做的就是找到函数的调用位置并判断应当应用哪条规则。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://jdsheng.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于this的解析（一）</title>
    <link href="https://jdsheng.cn/2020/06/06/%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/关于this的解析（一）/</id>
    <published>2020-06-06T15:00:23.399Z</published>
    <updated>2019-10-13T04:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-为什么要用this"><a href="#1-1-为什么要用this" class="headerlink" title="1.1 为什么要用this"></a>1.1 为什么要用this</h2><p>如果对于有经验的JavaScript开发者来说this都是一种非常复杂的机制，那它到底有用在哪里呢？<a id="more"></a>真的值得我们付出这么大的代价学习吗？的确，在介绍怎么做之前我们需要先明白为什么。</p><p>下面我们来解释一下为什么要使用 this：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">identify</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.toUpperCase(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">speak</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> greeting = <span class="hljs-string">"Hello, I'm "</span> + identify.call( <span class="hljs-keyword">this</span> ); </span><br><span class="line"><span class="hljs-built_in">console</span>.log( greeting ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> me = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">"Kyle"</span> &#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> you = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">"Reader"</span> &#125;;</span><br><span class="line">identify.call( me ); <span class="hljs-comment">// KYLE </span></span><br><span class="line">identify.call( you ); <span class="hljs-comment">// READER </span></span><br><span class="line">speak.call( me ); <span class="hljs-comment">// Hello, 我是 KYLE </span></span><br><span class="line">speak.call( you ); <span class="hljs-comment">// Hello, 我是 READER</span></span><br></pre></td></tr></table></figure><p>看不懂这段代码？不用担心！我们很快就会讲解。现在请暂时抛开这些问题，专注于为 什么。 这段代码可以在不同的上下文对象（me 和 you）中重复使用函数 identify() 和 speak()， 不用针对每个对象编写不同版本的函数。 如果不使用 this，那就需要给 identify() 和 speak() 显式传入一个上下文对象。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">identify</span>(<span class="hljs-params">context</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> context.name.toUpperCase(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">speak</span>(<span class="hljs-params">context</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> greeting = <span class="hljs-string">"Hello, I'm "</span> + identify( context );</span><br><span class="line"> <span class="hljs-built_in">console</span>.log( greeting ); </span><br><span class="line">&#125;</span><br><span class="line">identify( you ); <span class="hljs-comment">// READER </span></span><br><span class="line">speak( me ); <span class="hljs-comment">//hello, 我是 KYLE</span></span><br></pre></td></tr></table></figure><p>然而，this 提供了一种更优雅的方式来隐式“传递”一个对象引用，因此可以将 API 设计 得更加简洁并且易于复用。 随着你的使用模式越来越复杂，显式传递上下文对象会让代码变得越来越混乱，使用 this 则不会这样。当我们介绍对象和原型时，你就会明白函数可以自动引用合适的上下文对象 有多重要。</p><h2 id="1-2-误解"><a href="#1-2-误解" class="headerlink" title="1.2 误解"></a>1.2 误解</h2><h4 id="1-2-1-指向自身"><a href="#1-2-1-指向自身" class="headerlink" title="1.2.1 指向自身"></a>1.2.1 指向自身</h4><p>人们很容易把 this 理解成指向函数自身，这个推断从英语的语法角度来说是说得通的。 </p><p>那么为什么需要从函数内部引用函数自身呢？常见的原因是递归（从函数内部调用这个函 数）或者可以写一个在第一次被调用后自己解除绑定的事件处理器。 </p><p>JavaScript 的新手开发者通常会认为，既然函数看作一个对象（JavaScript 中的所有函数都 是对象），那就可以在调用函数时存储状态（属性的值）。这是可行的，有些时候也确实有 用，但是在本书即将介绍的许多模式中你会发现，除了函数对象还有许多更合适存储状态 的地方。 </p><p>不过现在我们先来分析一下这个模式，让大家看到 this 并不像我们所想的那样指向函数 本身。</p><p>我们想要记录一下函数 foo 被调用的次数，思考一下下面的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">num</span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-string">"foo: "</span> + num );</span><br><span class="line"> <span class="hljs-comment">// 记录 foo 被调用的次数</span></span><br><span class="line"><span class="hljs-keyword">this</span>.count++; </span><br><span class="line">&#125;</span><br><span class="line">foo.count = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> i;</span><br><span class="line"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">5</span>) &#123; </span><br><span class="line">foo( i ); </span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-comment">// foo: 6 </span></span><br><span class="line"> <span class="hljs-comment">// foo: 7 </span></span><br><span class="line"> <span class="hljs-comment">// foo: 8 </span></span><br><span class="line"> <span class="hljs-comment">// foo: 9 </span></span><br><span class="line"> <span class="hljs-comment">// foo 被调用了多少次？ </span></span><br><span class="line"> <span class="hljs-built_in">console</span>.log( foo.count ); <span class="hljs-comment">// 0 -- WTF?</span></span><br></pre></td></tr></table></figure><p>console.log 语句产生了 4 条输出，证明 foo(..) 确实被调用了 4 次，但是 foo.count 仍然 是 0。显然从字面意思来理解 this 是错误的。 </p><p>执行 foo.count = 0 时，的确向函数对象 foo 添加了一个属性 count。但是函数内部代码 this.count 中的 this 并不是指向那个函数对象，所以虽然属性名相同，根对象却并不相 同，困惑随之产生。</p><p>遇到这样的问题时，许多开发者并不会深入思考为什么 this 的行为和预期的不一致，也不 会试图回答那些很难解决但却非常重要的问题。他们只会回避这个问题并使用其他方法来 达到目的，比如创建另一个带有 count 属性的对象。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">num</span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-string">"foo: "</span> + num ); </span><br><span class="line"><span class="hljs-comment">// 记录 foo 被调用的次数 </span></span><br><span class="line">data.count++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> data = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> i;</span><br><span class="line"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">5</span>) &#123; </span><br><span class="line">foo( i ); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// foo: 6 </span></span><br><span class="line"><span class="hljs-comment">// foo: 7 </span></span><br><span class="line"><span class="hljs-comment">// foo: 8 </span></span><br><span class="line"><span class="hljs-comment">// foo: 9 </span></span><br><span class="line"><span class="hljs-comment">// foo 被调用了多少次？ </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( data.count ); <span class="hljs-comment">// 4</span></span><br></pre></td></tr></table></figure><p>从某种角度来说这个方法确实“解决”了问题，但可惜它忽略了真正的问题——无法理解 this 的含义和工作原理——而是返回舒适区，使用了一种更熟悉的技术：<strong>词法作用域</strong>。</p><p>另一种方法是强制 this 指向 foo 函数对象：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">num</span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-string">"foo: "</span> + num ); </span><br><span class="line"><span class="hljs-comment">// 记录 foo 被调用的次数 </span></span><br><span class="line"><span class="hljs-comment">// 注意，在当前的调用方式下（参见下方代码），this 确实指向 foo</span></span><br><span class="line"><span class="hljs-keyword">this</span>.count++; </span><br><span class="line">&#125;</span><br><span class="line">foo.count = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> i;</span><br><span class="line"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">5</span>) &#123; </span><br><span class="line"><span class="hljs-comment">// 使用 call(..) 可以确保 this 指向函数对象 foo 本身 </span></span><br><span class="line">foo.call( foo, i ); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// foo: 6 </span></span><br><span class="line"><span class="hljs-comment">// foo: 7 </span></span><br><span class="line"><span class="hljs-comment">// foo: 8 </span></span><br><span class="line"><span class="hljs-comment">// foo: 9 </span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// foo 被调用了多少次？ </span></span><br><span class="line"><span class="hljs-built_in">console</span>.log( foo.count ); <span class="hljs-comment">// 4</span></span><br></pre></td></tr></table></figure><p>这次我们接受了 this，没有回避它。如果你仍然感到困惑的话，不用担心，之后我们会详 细解释具体的原理。</p><h4 id="1-2-2-它的作用域"><a href="#1-2-2-它的作用域" class="headerlink" title="1.2.2 它的作用域"></a>1.2.2 它的作用域</h4><p>第二种常见的误解是，this 指向函数的作用域。这个问题有点复杂，因为在某种情况下它 是正确的，但是在其他情况下它却是错误的。 </p><p><strong>需要明确的是，this 在任何情况下都不指向函数的词法作用域</strong>。在 JavaScript 内部，作用 域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过 JavaScript 代码访问，<strong>它存在于 JavaScript 引擎内部</strong>。</p><p>思考一下下面的代码，它试图（但是没有成功）跨越边界，使用 this 来隐式引用函数的词 法作用域：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-keyword">this</span>.bar(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="hljs-comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>这段代码中的错误不止一个。虽然这段代码看起来好像是我们故意写出来的例子，但是实 际上它出自一个公共社区中互助论坛的精华代码。这段代码非常完美（同时也令人伤感） 地展示了 this 多么容易误导人。 </p><p>首先，这段代码试图通过 this.bar() 来引用 bar() 函数。这是绝对不可能成功的，我们之 后会解释原因。调用 bar() 最自然的方法是省略前面的 this，直接使用词法引用标识符。 </p><p>此外，编写这段代码的开发者还试图使用 this 联通 foo() 和 bar() 的词法作用域，从而让 bar() 可以访问 foo() 作用域里的变量 a。这是不可能实现的，你不能使用 this 来引用一 个词法作用域内部的东西。 </p><p><strong>每当你想要把 this 和词法作用域的查找混合使用时，一定要提醒自己，这是无法实现的。</strong></p><h2 id="1-3-this到底是什么"><a href="#1-3-this到底是什么" class="headerlink" title="1.3 this到底是什么"></a>1.3 this到底是什么</h2><p>排除了一些错误理解之后，我们来看看 this 到底是一种什么样的机制。 </p><p>之前我们说过 <strong>this 是在运行时进行绑定的，并不是在编写时绑定</strong>，它的上下文取决于函数调 用时的各种条件。<strong>this 的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式</strong>。 </p><p><strong>当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包 含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this 就是记录的 其中一个属性，会在函数执行的过程中用到</strong>。 </p><h2 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h2><p>对于那些没有投入时间学习 this 机制的 JavaScript 开发者来说，this 的绑定一直是一件非常令人困惑的事。</p><p>this 是非常重要的，但是猜测、尝试并出错和盲目地从 Stack Overflow 上复制和粘贴答案并不能让你真正理解 this 的机制。 </p><p>学习 this 的第一步是明白 this 既不指向函数自身也不指向函数的词法作用域，你也许被 这样的解释误导过，但其实它们都是错误的。 </p><p><strong>this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-为什么要用this&quot;&gt;&lt;a href=&quot;#1-1-为什么要用this&quot; class=&quot;headerlink&quot; title=&quot;1.1 为什么要用this&quot;&gt;&lt;/a&gt;1.1 为什么要用this&lt;/h2&gt;&lt;p&gt;如果对于有经验的JavaScript开发者来说this都是一种非常复杂的机制，那它到底有用在哪里呢？&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://jdsheng.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue常见问题及解决方法（二）</title>
    <link href="https://jdsheng.cn/2020/06/06/vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/vue常见问题及解决方法（二）/</id>
    <published>2020-06-06T15:00:23.364Z</published>
    <updated>2019-10-22T14:13:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里给大家分享一下vue中遇到的一些问题和解决技巧，希望对大家有用处。（话不多说上代码）<a id="more"></a></p><h5 id="1-vue路由拦截浏览器后退实现表单保存类似需求（为了防止用户突然离开，没有保存已输入的信息。）"><a href="#1-vue路由拦截浏览器后退实现表单保存类似需求（为了防止用户突然离开，没有保存已输入的信息。）" class="headerlink" title="1.vue路由拦截浏览器后退实现表单保存类似需求（为了防止用户突然离开，没有保存已输入的信息。）"></a>1.vue路由拦截浏览器后退实现表单保存类似需求（为了防止用户突然离开，没有保存已输入的信息。）</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//在路由组件中：</span></span><br><span class="line">mounted()&#123;</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;</span><br><span class="line"> <span class="hljs-keyword">if</span>(用户已经输入信息)&#123;</span><br><span class="line"> <span class="hljs-comment">//出现弹窗提醒保存表单，或者自动后台为其保存</span></span><br><span class="line">  </span><br><span class="line"> &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line"> next(<span class="hljs-literal">true</span>);<span class="hljs-comment">//用户离开</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="2-路由懒加载写法"><a href="#2-路由懒加载写法" class="headerlink" title="2.路由懒加载写法:"></a>2.路由懒加载写法:</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 我所采用的方法，个人感觉比较简洁一些，少了一步引入赋值。</span></span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="line"> routes: [</span><br><span class="line"> path: <span class="hljs-string">'/app'</span>,</span><br><span class="line"> component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'./app'</span>), <span class="hljs-comment">// 引入组件</span></span><br><span class="line"> ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">// Vue路由文档的写法:</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'./app.vue'</span>) <span class="hljs-comment">// 引入组件</span></span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="line"> routes: [</span><br><span class="line"> &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/app'</span>, <span class="hljs-attr">component</span>: app &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-路由的项目启动页和404页面"><a href="#3-路由的项目启动页和404页面" class="headerlink" title="3.路由的项目启动页和404页面"></a>3.路由的项目启动页和404页面</h5><p>一般项目都会设置这个，如果默认进入地址会跳到login页面，如果你输入的是一个没有用的路由或者是空路由会跳转到notFind页面（你自己设置的404页面）</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;</span><br><span class="line">routes: [</span><br><span class="line"> &#123;</span><br><span class="line">  path: <span class="hljs-string">'/'</span>, <span class="hljs-comment">// 项目启动页</span></span><br><span class="line">  redirect:<span class="hljs-string">'/login'</span> <span class="hljs-comment">// 重定向到下方声明的路由 </span></span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">  path: <span class="hljs-string">'*'</span>, <span class="hljs-comment">// 404 页面 </span></span><br><span class="line">  component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'./notFind'</span>) <span class="hljs-comment">// 或者使用component也可以的</span></span><br><span class="line"> &#125;,</span><br><span class="line"> ]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h5 id="4-setInterval路由跳转继续运行并没有销毁问题"><a href="#4-setInterval路由跳转继续运行并没有销毁问题" class="headerlink" title="4.setInterval路由跳转继续运行并没有销毁问题"></a>4.setInterval路由跳转继续运行并没有销毁问题</h5><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//方法一：</span></span><br><span class="line">beforeDestroy()&#123;</span><br><span class="line">  <span class="hljs-comment">//我通常是把setInterval()定时器赋值给this实例，然后就可以像下面这么暂停。</span></span><br><span class="line">clearInterval(<span class="hljs-keyword">this</span>.intervalid);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//方法二：</span></span><br><span class="line"><span class="hljs-keyword">this</span>.$once(<span class="hljs-string">'hook:beforeDestroy'</span>, () =&gt; &#123;    <span class="hljs-comment">//清理定时器</span></span><br><span class="line">clearTimeout(<span class="hljs-keyword">this</span>.timeout);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="5-setTimeout-setInterval-this指向改变，无法用this访问VUe实例"><a href="#5-setTimeout-setInterval-this指向改变，无法用this访问VUe实例" class="headerlink" title="5.setTimeout/setInterval this指向改变，无法用this访问VUe实例"></a>5.setTimeout/setInterval this指向改变，无法用this访问VUe实例</h5><p>这个地方大家的默认方法肯定是:<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//使用变量访问this实例</span></span><br><span class="line"><span class="hljs-keyword">let</span> self=<span class="hljs-keyword">this</span>;</span><br><span class="line"> setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">  <span class="hljs-built_in">console</span>.log(self);<span class="hljs-comment">//使用self变量访问this实例</span></span><br><span class="line"> &#125;,<span class="hljs-number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>其实这个地方我们可以用箭头函数，因为箭头函数会改变this的指向，而指向的刚好是自己的父级this，所以我们可以这样用：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//箭头函数访问this实例 因为箭头函数本身没有绑定this</span></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; </span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;, <span class="hljs-number">500</span>);</span><br></pre></td></tr></table></figure><p>这样我们的this就是指向我们的vue实例了。</p><h5 id="6-Vue-数组-对象更新-视图不更新"><a href="#6-Vue-数组-对象更新-视图不更新" class="headerlink" title="6.Vue 数组/对象更新 视图不更新"></a>6.Vue 数组/对象更新 视图不更新</h5><p><strong>方法一：</strong><br>直接使用最简单也是最有效的方法，深拷贝对象或者数组，视图会进行更新，不过会有一个缺点，深拷贝后的数组或者对象不是原来的那个数组或者对象，是你现在改变了之后的值。</p><p>上代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//Obj =&gt; 你的对象或数组</span></span><br><span class="line"><span class="hljs-keyword">this</span>.Obj=<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.Obj));</span><br></pre></td></tr></table></figure><p>先进行转字符串，再转回对象，这个就进行了一个拷贝的过程，会触发视图的改变，同时也进行了一个数组的替换，有利有弊。</p><p><strong>方法二：</strong><br>this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(this.arr, 0, "OBKoro1"); // 改变数组</span><br><span class="line">this.$<span class="hljs-keyword">set</span>(this.obj, "c", "OBKoro1"); // 改变对象</span><br></pre></td></tr></table></figure></p><p>这个是vue专门为改变不了数组设定的一个方法，使用也很简单（如果还是不懂请参考vue文档）</p><h5 id="7-深度watch与watch立即触发回调"><a href="#7-深度watch与watch立即触发回调" class="headerlink" title="7.深度watch与watch立即触发回调"></a>7.深度watch与watch立即触发回调</h5><p>watch很多人都在用，但是这watch中的这两个选项deep、immediate，或许不是很多人都知道，我猜。</p><p>选项：deep</p><p>在选项参数中指定 deep: true，可以监听对象中属性的变化。</p><p>选项：immediate</p><p>在选项参数中指定 immediate: true, 代表如果在 wacth 里声明了 step之后，就会立即先去执行里面的handler方法，如果为 false就跟我们以前的效果一样，不会在绑定的时候就执行。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">obj: &#123;</span><br><span class="line">  handler(val, oldVal) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'属性发生变化触发这个回调'</span>,val, oldVal);</span><br><span class="line">&#125;,</span><br><span class="line">  deep: <span class="hljs-literal">true</span> <span class="hljs-comment">// 监听这个对象中的每一个属性变化</span></span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line"> step: &#123; <span class="hljs-comment">// 属性</span></span><br><span class="line">  <span class="hljs-comment">//watch</span></span><br><span class="line">  handler(val, oldVal) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"默认触发一次"</span>, val, oldVal);</span><br><span class="line">  &#125;,</span><br><span class="line">  immediate: <span class="hljs-literal">true</span> <span class="hljs-comment">// 立即触发一次</span></span><br><span class="line"> &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里给大家分享一下vue中遇到的一些问题和解决技巧，希望对大家有用处。（话不多说上代码）&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://jdsheng.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue常见问题及解决方法（一）</title>
    <link href="https://jdsheng.cn/2020/06/06/vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/vue常见问题及解决方法（一）/</id>
    <published>2020-06-06T15:00:23.337Z</published>
    <updated>2019-10-22T14:13:38.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>列表进入详情页的传参问题</li><li>路由懒加载（也叫延迟加载）<a id="more"></a></li></ul><h2 id="列表进入详情页的传参问题"><a href="#列表进入详情页的传参问题" class="headerlink" title="列表进入详情页的传参问题"></a>列表进入详情页的传参问题</h2><p><em>关联知识点</em>  ——<strong>路由跳转的方式</strong><br>声明式的跳转：</p><figure class="highlight dust hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml">// query通过path切换路由</span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;path: 'Detail', query: &#123; id: 1 &#125;</span><span class="hljs-xml"><span class="hljs-tag"><span class="hljs-string">&#125;"</span>&gt;</span>前往Detail页面<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">// params通过name切换路由</span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;name: 'Detail', params: &#123; id: 1 &#125;</span><span class="hljs-xml"><span class="hljs-tag"><span class="hljs-string">&#125;"</span>&gt;</span>前往Detail页面<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>编程式的跳转：</p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//跳转到上一次浏览的页面</span></span><br><span class="line"> <span class="hljs-keyword">this</span>.$router.go(-<span class="hljs-number">1</span>)</span><br><span class="line">           </span><br><span class="line"><span class="hljs-comment">//指定跳转的地址，我们自己设置的路由地址</span></span><br><span class="line"><span class="hljs-keyword">this</span>.$router.replace(<span class="hljs-string">'/pathname'</span>)</span><br><span class="line">           </span><br><span class="line"><span class="hljs-comment">//指定跳转路由的名字下，pathname是我们自身为路由设置的名字</span></span><br><span class="line"><span class="hljs-keyword">this</span>.$router.replace(&#123;name:<span class="hljs-string">"pathname"</span>&#125;)</span><br><span class="line">          </span><br><span class="line"><span class="hljs-comment">//通过push进行跳转，我们自己设置的路由地址或者我们自己设置的名字</span></span><br><span class="line"><span class="hljs-keyword">this</span>.$router.push(<span class="hljs-string">'/pathname'</span>)</span><br><span class="line"><span class="hljs-keyword">this</span>.$router.push(&#123;name:<span class="hljs-string">'pathname'</span>&#125;)</span><br><span class="line"><span class="hljs-keyword">this</span>.$router.push(&#123; path: <span class="hljs-string">'/pathname/$&#123;id&#125;'</span>&#125;) <span class="hljs-comment">//id为参数</span></span><br></pre></td></tr></table></figure><p><strong>传参的方式</strong>：query、params+动态路由传参</p><p><strong>两者的区别：</strong></p><ol><li><p>query通过<code>path</code>切换路由，params通过<code>name</code>切换路由</p><figure class="highlight dust hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml">// query通过path切换路由</span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;path: 'Detail', query: &#123; id: 1 &#125;</span><span class="hljs-xml"><span class="hljs-tag"><span class="hljs-string">&#125;"</span>&gt;</span>前往Detail页面<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">// params通过name切换路由</span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;name: 'Detail', params: &#123; id: 1 &#125;</span><span class="hljs-xml"><span class="hljs-tag"><span class="hljs-string">&#125;"</span>&gt;</span>前往Detail页面<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>query通过<code>this.$route.query</code>来接收参数，params通过<code>this.$route.params</code>来接收参数。</p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// query通过this.$route.query接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> id = <span class="hljs-keyword">this</span>.$route.query.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// params通过this.$route.params来接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> id = <span class="hljs-keyword">this</span>.$route.params.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>query传参的url展现方式：<code>/detail?id=1&amp;user=123&amp;identity=1&amp;更多参数</code><br>  params＋动态路由的url方式：<code>/detail/123</code></p></li><li><p>params动态路由传参，一定要在路由中定义参数，然后在路由跳转的时候必须要加上参数，否则就是空白页面，而query传参则不用：</p><p><em>对应的路由配置：</em></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;      </span><br><span class="line">    <span class="hljs-attribute">path</span>: <span class="hljs-string">'/detail/:id'</span>,      </span><br><span class="line">    name: <span class="hljs-string">'Detail'</span>,      </span><br><span class="line">    component: Detail    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><pre><code>  注意，params传参时，如果没有在路由中定义参数，也是可以传过去的，同时也能接收到，但是一旦刷新页面，这个参数就不存在了。这对于需要依赖参数进行某些操作的行为是行不通的，因为你总不可能要求用户不能刷新页面吧。 例如：<figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 定义的路由中，只定义一个id参数</span></span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="hljs-string">'detail/:id'</span>,</span><br><span class="line">    name: <span class="hljs-string">'Detail'</span>,</span><br><span class="line">    components: Detail</span><br><span class="line">&#125;      </span><br><span class="line"><span class="hljs-comment">// template中的路由传参，</span></span><br><span class="line"><span class="hljs-comment">// 传了一个id参数和一个token参数</span></span><br><span class="line"><span class="hljs-comment">// id是在路由中已经定义的参数，而token没有定义</span></span><br><span class="line">&lt;router-link :to=<span class="hljs-string">"&#123;name: 'Detail', params: &#123; id: 1, token: '123456' &#125;&#125;"</span>&gt;前往Detail页面&lt;/router-link&gt;</span><br><span class="line"><span class="hljs-comment">// 在详情页接收</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="hljs-comment">// 以下都可以正常获取到</span></span><br><span class="line">    <span class="hljs-comment">// 但是页面刷新后，id依然可以获取，而token此时就不存在了</span></span><br><span class="line">    <span class="hljs-keyword">const</span> id = <span class="hljs-keyword">this</span>.$route.<span class="hljs-keyword">params</span>.id;</span><br><span class="line">    <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">this</span>.$route.<span class="hljs-keyword">params</span>.token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>参考：</p><ol><li><a href="https://segmentfault.com/a/1190000012393587" target="_blank" rel="noopener">vue路由传参的三种基本方式</a></li><li><a href="https://blog.csdn.net/gqzydh/article/details/81453990" target="_blank" rel="noopener">vue 关于路由跳转方法</a></li></ol><h2 id="路由懒加载（也叫延迟加载）"><a href="#路由懒加载（也叫延迟加载）" class="headerlink" title="路由懒加载（也叫延迟加载）"></a>路由懒加载（也叫延迟加载）</h2><p>路由懒加载可以帮我们在进入首屏时不用加载过度的资源，从而减少首屏加载速度。在路由文件中，</p><p>非懒加载写法：</p><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Index <span class="hljs-keyword">from</span> <span class="hljs-string">'@/page/index/index'</span>;</span><br><span class="line"><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>new Router(&#123;  </span><br><span class="line">    routes: [    </span><br><span class="line">        &#123; </span><br><span class="line">            path: <span class="hljs-string">'/'</span>, </span><br><span class="line">            name: <span class="hljs-string">'Index'</span>,     </span><br><span class="line">            component: Index </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>路由懒加载写法：</p><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>new Router(&#123;</span><br><span class="line">  routes: [    </span><br><span class="line">        &#123; </span><br><span class="line">            path: <span class="hljs-string">'/'</span>, </span><br><span class="line">            name: <span class="hljs-string">'Index'</span>, </span><br><span class="line">            component: resolve =&gt; require([<span class="hljs-string">'@/view/index/index'</span>], resolve) </span><br><span class="line">        &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;列表进入详情页的传参问题&lt;/li&gt;
&lt;li&gt;路由懒加载（也叫延迟加载）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://jdsheng.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中axios的封装和API接口的管理</title>
    <link href="https://jdsheng.cn/2020/06/06/vue%E4%B8%ADaxios%E7%9A%84%E5%B0%81%E8%A3%85%E5%92%8CAPI%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%AE%A1%E7%90%86/"/>
    <id>https://jdsheng.cn/2020/06/06/vue中axios的封装和API接口的管理/</id>
    <published>2020-06-06T15:00:23.296Z</published>
    <updated>2019-10-22T14:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、axios的封装"><a href="#一、axios的封装" class="headerlink" title="一、axios的封装"></a>一、axios的封装</h1><p>在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，<a id="more"></a>它是基于promise的http库，可运行在浏览器端和node.js中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御XSRF等。所以我们的尤大大也是果断放弃了对其官方库vue-resource的维护，直接推荐我们使用axios库。如果还对axios不了解的，可以移步<a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">axios文档</a>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC83LzIzLzE2NGM3MDg1MmY0MWIwNGM?x-oss-process=image/format,png" alt="面对一团糟代码的你"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight mipsasm hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="hljs-keyword">install </span>axios<span class="hljs-comment">; // 安装axios</span></span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>一般我会在项目的src目录中，新建一个request文件夹，然后在里面新建一个http.js和一个api.js文件。http.js文件用来封装我们的axios，api.js用来统一管理我们的接口。<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 在http.js中引入axios</span></span><br><span class="line"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span>; <span class="hljs-comment">// 引入axios</span></span><br><span class="line"><span class="hljs-keyword">import</span> QS <span class="hljs-keyword">from</span> <span class="hljs-string">'qs'</span>; <span class="hljs-comment">// 引入qs模块，用来序列化post类型的数据，后面会提到</span></span><br><span class="line"><span class="hljs-comment">// vant的toast提示框组件，大家可根据自己的ui组件更改。</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vant'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="环境的切换"><a href="#环境的切换" class="headerlink" title="环境的切换"></a>环境的切换</h3><p>我们的项目环境可能有开发环境、测试环境和生产环境。我们通过node的环境变量来匹配我们的默认的接口url前缀。axios.defaults.baseURL可以设置axios的默认请求地址就不多说了。</p><figure class="highlight mel hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 环境的切换</span></span><br><span class="line"><span class="hljs-keyword">if</span> (process.<span class="hljs-keyword">env</span>.NODE_ENV == <span class="hljs-string">'development'</span>) &#123;    </span><br><span class="line">    axios.defaults.baseURL = <span class="hljs-string">'https://www.baidu.com'</span>;&#125; </span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.<span class="hljs-keyword">env</span>.NODE_ENV == <span class="hljs-string">'debug'</span>) &#123;    </span><br><span class="line">    axios.defaults.baseURL = <span class="hljs-string">'https://www.ceshi.com'</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.<span class="hljs-keyword">env</span>.NODE_ENV == <span class="hljs-string">'production'</span>) &#123;    </span><br><span class="line">    axios.defaults.baseURL = <span class="hljs-string">'https://www.production.com'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置请求超时"><a href="#设置请求超时" class="headerlink" title="设置请求超时"></a>设置请求超时</h3><p>通过axios.defaults.timeout设置默认的请求超时时间。例如超过了10s，就会告知用户当前请求超时，请刷新等。</p><figure class="highlight ini hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">axios.defaults.timeout</span> = <span class="hljs-number">10000</span><span class="hljs-comment">;</span></span><br></pre></td></tr></table></figure><h3 id="post请求头的设置"><a href="#post请求头的设置" class="headerlink" title="post请求头的设置"></a>post请求头的设置</h3><p>post请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置post的请求头为<code>application/x-www-form-urlencoded;charset=UTF-8</code></p><figure class="highlight ada hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.headers.post[<span class="hljs-symbol">'Content</span>-<span class="hljs-keyword">Type</span>'] = <span class="hljs-symbol">'application</span>/x-www-form-urlencoded;charset=UTF-<span class="hljs-number">8</span>';</span><br></pre></td></tr></table></figure><h3 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h3><p>我们在发送请求前可以进行一个请求的拦截，为什么要拦截呢，我们拦截请求是用来做什么的呢？比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，我们需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。</p><figure class="highlight stata hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 先导入vuex,因为我们要使用到里面的状态对象</span></span><br><span class="line"><span class="hljs-comment">// vuex的路径根据自己的路径去写</span></span><br><span class="line">import store from '@/store/index';</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 请求拦截器axios.interceptors.request.use(    </span></span><br><span class="line">    config =&gt; &#123;        </span><br><span class="line">        <span class="hljs-comment">// 每次发送请求之前判断vuex中是否存在token        </span></span><br><span class="line">        <span class="hljs-comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line">        <span class="hljs-comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断 </span></span><br><span class="line">        <span class="hljs-keyword">const</span> <span class="hljs-keyword">token</span> = store.state.<span class="hljs-keyword">token</span>;        </span><br><span class="line">        <span class="hljs-keyword">token</span> &amp;&amp; (config.headers.Authorization = <span class="hljs-keyword">token</span>);        </span><br><span class="line">        <span class="hljs-keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="hljs-keyword">error</span> =&gt; &#123;        </span><br><span class="line">        <span class="hljs-keyword">return</span> Promise.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">error</span>);    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里说一下token，一般是在登录完成之后，将用户的token通过localStorage或者cookie存在本地，然后用户每次在进入页面的时候（即在main.js中），会首先从本地存储中读取token，如果token存在说明用户已经登陆过，则更新vuex中的token状态。</p><p>然后，在每次请求接口的时候，都会在请求的header中携带token，后台人员就可以根据你携带的token来判断你的登录是否过期，如果没有携带，则说明没有登录过。这时候或许有些小伙伴会有疑问了，就是每个请求都携带token，那么要是一个页面不需要用户登录就可以访问的怎么办呢？其实，你前端的请求可以携带token，但是后台可以选择不接收啊。</p><h3 id="响应的拦截"><a href="#响应的拦截" class="headerlink" title="响应的拦截"></a>响应的拦截</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(    </span><br><span class="line">    response =&gt; &#123;   </span><br><span class="line">        <span class="hljs-comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据     </span></span><br><span class="line">        <span class="hljs-comment">// 否则的话抛出错误</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (response.status === <span class="hljs-number">200</span>) &#123;            </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(response);        </span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;            </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(response);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="hljs-comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line">    <span class="hljs-comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码    </span></span><br><span class="line">    <span class="hljs-comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line">    <span class="hljs-comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line">    error =&gt; &#123;            </span><br><span class="line">        <span class="hljs-keyword">if</span> (error.response.status) &#123;            </span><br><span class="line">            <span class="hljs-keyword">switch</span> (error.response.status) &#123;                </span><br><span class="line">                <span class="hljs-comment">// 401: 未登录</span></span><br><span class="line">                <span class="hljs-comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">                <span class="hljs-comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:                    </span><br><span class="line">                    router.replace(&#123;                        </span><br><span class="line">                        path: <span class="hljs-string">'/login'</span>,                        </span><br><span class="line">                        query: &#123; </span><br><span class="line">                            redirect: router.currentRoute.fullPath </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="hljs-comment">// 403 token过期</span></span><br><span class="line">                <span class="hljs-comment">// 登录过期对用户进行提示</span></span><br><span class="line">                <span class="hljs-comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">                <span class="hljs-comment">// 跳转登录页面                </span></span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:</span><br><span class="line">                     Toast(&#123;</span><br><span class="line">                        message: <span class="hljs-string">'登录过期，请重新登录'</span>,</span><br><span class="line">                        duration: <span class="hljs-number">1000</span>,</span><br><span class="line">                        forbidClick: <span class="hljs-literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="hljs-comment">// 清除token</span></span><br><span class="line">                    localStorage.removeItem(<span class="hljs-string">'token'</span>);</span><br><span class="line">                    store.commit(<span class="hljs-string">'loginSuccess'</span>, <span class="hljs-literal">null</span>);</span><br><span class="line">                    <span class="hljs-comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 </span></span><br><span class="line">                    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;                        </span><br><span class="line">                        router.replace(&#123;                            </span><br><span class="line">                            path: <span class="hljs-string">'/login'</span>,                            </span><br><span class="line">                            query: &#123; </span><br><span class="line">                                redirect: router.currentRoute.fullPath </span><br><span class="line">                            &#125;                        </span><br><span class="line">                        &#125;);                    </span><br><span class="line">                    &#125;, <span class="hljs-number">1000</span>);                    </span><br><span class="line">                    <span class="hljs-keyword">break</span>; </span><br><span class="line"></span><br><span class="line">                <span class="hljs-comment">// 404请求不存在</span></span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:</span><br><span class="line">                    Toast(&#123;</span><br><span class="line">                        message: <span class="hljs-string">'网络请求不存在'</span>,</span><br><span class="line">                        duration: <span class="hljs-number">1500</span>,</span><br><span class="line">                        forbidClick: <span class="hljs-literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">                <span class="hljs-keyword">default</span>:</span><br><span class="line">                    Toast(&#123;</span><br><span class="line">                        message: error.response.data.message,</span><br><span class="line">                        duration: <span class="hljs-number">1500</span>,</span><br><span class="line">                        forbidClick: <span class="hljs-literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。例如上面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。</p><blockquote><p>要注意的是，上面的Toast()方法，是我引入的vant库中的toast轻提示组件，你根据你的ui库，对应使用你的一个提示组件。</p></blockquote><h3 id="封装get方法和post方法"><a href="#封装get方法和post方法" class="headerlink" title="封装get方法和post方法"></a>封装get方法和post方法</h3><p>我们常用的ajax请求方法有get、post、put等方法，相信小伙伴都不会陌生。axios对应的也有很多类似的方法，不清楚的可以看下文档。但是为了简化我们的代码，我们还是要对其进行一个简单的封装。下面我们主要封装两个方法：<strong>get和post</strong>。</p><p><strong>get方法</strong>：我们通过定义一个get函数，get函数有两个参数，第一个参数表示我们要请求的url地址，第二个参数是我们要携带的请求参数。get函数返回一个promise对象，当axios其请求成功时resolve服务器返回 值，请求失败时reject错误值。最后通过export抛出get函数</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>url [请求的url地址]</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">url, params</span>)</span>&#123;    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span>&#123;        </span><br><span class="line">        axios.get(url, &#123;            </span><br><span class="line">            params: params        </span><br><span class="line">        &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(res.data);</span><br><span class="line">        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span>&#123;</span><br><span class="line">            reject(err.data)        </span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;);&#125;</span><br></pre></td></tr></table></figure><p>post方法：原理同get基本一样，但是要注意的是，post方法必须要使用对提交从参数对象进行序列化的操作，所以这里我们通过node的qs模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到你提交的数据的。这就是文章开头我们<code>import QS from &#39;qs&#39;</code>;的原因。如果不明白序列化是什么意思的，就百度一下吧，答案一大堆。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** </span></span><br><span class="line"><span class="hljs-comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>url [请求的url地址] </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>params [请求时携带的参数] </span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params">url, params</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">         axios.post(url, QS.stringify(params))</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span>&#123;</span><br><span class="line">            reject(err.data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个小细节说下，<code>axios.get()</code>方法和<code>axios.post()</code>在提交数据时参数的书写方式还是有区别的。区别就是，get的第二个参数是一个{}，然后这个对象的params属性值是一个参数对象的。而post的第二个参数就是一个参数对象。两者略微的区别要留意哦！</p><h1 id="二、api的统一管理"><a href="#二、api的统一管理" class="headerlink" title="二、api的统一管理"></a>二、api的统一管理</h1><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC84LzcvMTY1MTM0OWUwODY0YmVlNA?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>整齐的api就像电路板一样，即使再复杂也能很清晰整个线路。上面说了，我们会新建一个api.js,然后在这个文件中存放我们所有的api接口。</p><p>首先我们在api.js中引入我们封装的get和post方法</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**   </span></span><br><span class="line"><span class="hljs-comment"> * api接口统一管理</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">get</span>, post &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./http'</span></span><br></pre></td></tr></table></figure><p>现在，例如我们有这样一个接口，是一个post请求：</p><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="hljs-regexp">//</span>www.baiodu.com<span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/users/my</span>_address<span class="hljs-regexp">/address_edit_before</span></span><br></pre></td></tr></table></figure><p>我们可以在api.js中这样封装：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> apiAddress = <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> post(<span class="hljs-string">'api/v1/users/my_address/address_edit_before'</span>, p);</span><br></pre></td></tr></table></figure><p>我们定义了一个<code>apiAddress</code>方法，这个方法有一个参数p，p是我们请求接口时携带的参数对象。而后调用了我们封装的<code>post</code>方法，<code>post</code>方法的第一个参数是我们的接口地址，第二个参数是<code>apiAddress</code>的p参数，即请求接口时携带的参数对象。最后通过<code>export</code>导出<code>apiAddress</code>。</p><p>然后在我们的页面中可以这样调用我们的api接口：</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; apiAddress &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@/request/api'</span>;<span class="hljs-comment">// 导入我们的api接口</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;        </span><br><span class="line">    name: <span class="hljs-string">'Address'</span>,    </span><br><span class="line">    created () &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.onLoad();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;            </span><br><span class="line">        <span class="hljs-comment">// 获取数据            </span></span><br><span class="line">        onLoad() &#123;</span><br><span class="line">            <span class="hljs-comment">// 调用api接口，并且提供了两个参数                </span></span><br><span class="line">            apiAddress(&#123;                    </span><br><span class="line">                <span class="hljs-keyword">type</span>: <span class="hljs-number">0</span>,                    </span><br><span class="line">                sort: <span class="hljs-number">1</span>                </span><br><span class="line">            &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="hljs-comment">// 获取数据成功后的其他操作</span></span><br><span class="line">                ………………                </span><br><span class="line">            &#125;)            </span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的api接口，就在pai.js中继续往下面扩展就可以了。</p><blockquote><p>友情提示，为每个接口写好注释哦！！！api接口管理的一个好处就是，我们把api统一集中起来，如果后期需要修改接口，我们就直接在api.js中找到对应的修改就好了，而不用去每一个页面查找我们的接口然后再修改会很麻烦。关键是，万一修改的量比较大，就规格gg了。还有就是如果直接在我们的业务代码修改接口，一不小心还容易动到我们的业务代码造成不必要的麻烦。</p></blockquote><p><strong>好了，最后把完成的<code>axios</code>封装代码奉上。</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**axios封装</span></span><br><span class="line"><span class="hljs-comment"> * 请求拦截、相应拦截、错误统一处理</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> QS <span class="hljs-keyword">from</span> <span class="hljs-string">'qs'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vant'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'../store/index'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 环境的切换</span></span><br><span class="line"><span class="hljs-keyword">if</span> (process.env.NODE_ENV == <span class="hljs-string">'development'</span>) &#123;    </span><br><span class="line">    axios.defaults.baseURL = <span class="hljs-string">'/api'</span>;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV == <span class="hljs-string">'debug'</span>) &#123;    </span><br><span class="line">    axios.defaults.baseURL = <span class="hljs-string">''</span>;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV == <span class="hljs-string">'production'</span>) &#123;    </span><br><span class="line">    axios.defaults.baseURL = <span class="hljs-string">'http://api.123dailu.com/'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 请求超时时间</span></span><br><span class="line">axios.defaults.timeout = <span class="hljs-number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// post请求头</span></span><br><span class="line">axios.defaults.headers.post[<span class="hljs-string">'Content-Type'</span>] = <span class="hljs-string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(    </span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="hljs-comment">// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line">        <span class="hljs-comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">        <span class="hljs-keyword">const</span> token = store.state.token;        </span><br><span class="line">        token &amp;&amp; (config.headers.Authorization = token);        </span><br><span class="line">        <span class="hljs-keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    error =&gt; &#123;        </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.error(error);    </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(    </span><br><span class="line">    response =&gt; &#123;        </span><br><span class="line">        <span class="hljs-keyword">if</span> (response.status === <span class="hljs-number">200</span>) &#123;            </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(response);        </span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;            </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(response);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-comment">// 服务器状态码不是200的情况    </span></span><br><span class="line">    error =&gt; &#123;        </span><br><span class="line">        <span class="hljs-keyword">if</span> (error.response.status) &#123;            </span><br><span class="line">            <span class="hljs-keyword">switch</span> (error.response.status) &#123;                </span><br><span class="line">                <span class="hljs-comment">// 401: 未登录                </span></span><br><span class="line">                <span class="hljs-comment">// 未登录则跳转登录页面，并携带当前页面的路径                </span></span><br><span class="line">                <span class="hljs-comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:                    </span><br><span class="line">                    router.replace(&#123;                        </span><br><span class="line">                        path: <span class="hljs-string">'/login'</span>,                        </span><br><span class="line">                        query: &#123; <span class="hljs-attr">redirect</span>: router.currentRoute.fullPath &#125; </span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-comment">// 403 token过期                </span></span><br><span class="line">                <span class="hljs-comment">// 登录过期对用户进行提示                </span></span><br><span class="line">                <span class="hljs-comment">// 清除本地token和清空vuex中token对象                </span></span><br><span class="line">                <span class="hljs-comment">// 跳转登录页面                </span></span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:                     </span><br><span class="line">                    Toast(&#123;                        </span><br><span class="line">                        message: <span class="hljs-string">'登录过期，请重新登录'</span>,                        </span><br><span class="line">                        duration: <span class="hljs-number">1000</span>,                        </span><br><span class="line">                        forbidClick: <span class="hljs-literal">true</span>                    </span><br><span class="line">                    &#125;);                    </span><br><span class="line">                    <span class="hljs-comment">// 清除token                    </span></span><br><span class="line">                    localStorage.removeItem(<span class="hljs-string">'token'</span>);                    </span><br><span class="line">                    store.commit(<span class="hljs-string">'loginSuccess'</span>, <span class="hljs-literal">null</span>);                    </span><br><span class="line">                    <span class="hljs-comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span><br><span class="line">                    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;                        </span><br><span class="line">                        router.replace(&#123;                            </span><br><span class="line">                            path: <span class="hljs-string">'/login'</span>,                            </span><br><span class="line">                            query: &#123; </span><br><span class="line">                                redirect: router.currentRoute.fullPath </span><br><span class="line">                            &#125;                        </span><br><span class="line">                        &#125;);                    </span><br><span class="line">                    &#125;, <span class="hljs-number">1000</span>);                    </span><br><span class="line">                    <span class="hljs-keyword">break</span>; </span><br><span class="line">                <span class="hljs-comment">// 404请求不存在                </span></span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:                    </span><br><span class="line">                    Toast(&#123;                        </span><br><span class="line">                        message: <span class="hljs-string">'网络请求不存在'</span>,                        </span><br><span class="line">                        duration: <span class="hljs-number">1500</span>,                        </span><br><span class="line">                        forbidClick: <span class="hljs-literal">true</span>                    </span><br><span class="line">                    &#125;);                    </span><br><span class="line">                <span class="hljs-keyword">break</span>;                </span><br><span class="line">                <span class="hljs-comment">// 其他错误，直接抛出错误提示                </span></span><br><span class="line">                <span class="hljs-keyword">default</span>:                    </span><br><span class="line">                    Toast(&#123;                        </span><br><span class="line">                        message: error.response.data.message,                        </span><br><span class="line">                        duration: <span class="hljs-number">1500</span>,                        </span><br><span class="line">                        forbidClick: <span class="hljs-literal">true</span>                    </span><br><span class="line">                    &#125;);            </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error.response);        </span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="hljs-comment">/** </span></span><br><span class="line"><span class="hljs-comment"> * get方法，对应get请求 </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>url [请求的url地址] </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>params [请求时携带的参数] </span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">url, params</span>)</span>&#123;    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span>&#123;        </span><br><span class="line">        axios.get(url, &#123;            </span><br><span class="line">            params: params        </span><br><span class="line">        &#125;)        </span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;            </span><br><span class="line">            resolve(res.data);        </span><br><span class="line">        &#125;)        </span><br><span class="line">        .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;            </span><br><span class="line">            reject(err.data)        </span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/** </span></span><br><span class="line"><span class="hljs-comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>url [请求的url地址] </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>params [请求时携带的参数] </span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params">url, params</span>) </span>&#123;    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;         </span><br><span class="line">        axios.post(url, QS.stringify(params))        </span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;            </span><br><span class="line">            resolve(res.data);        </span><br><span class="line">        &#125;)        </span><br><span class="line">        .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;            </span><br><span class="line">            reject(err.data)        </span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>axios的封装根据需求的不同而不同。我也对此进行了思考和针对不同需求的改善。主要有以下改变：</p><ol><li>优化axios封装，去掉之前的get和post</li><li>断网情况处理</li><li>更加模块化的api管理</li><li>接口域名有多个的情况</li><li>api挂载到vue.prototype上省去引入的步骤</li></ol><p>http.js中axios封装的优化，先直接贴代码：</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * axios封装</span></span><br><span class="line"><span class="hljs-comment"> * 请求拦截、响应拦截、错误统一处理</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'../router'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'../store/index'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vant'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** </span></span><br><span class="line"><span class="hljs-comment"> * 提示函数 </span></span><br><span class="line"><span class="hljs-comment"> * 禁止点击蒙层、显示一秒后关闭</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">const</span> tip = <span class="hljs-function"><span class="hljs-params">msg</span> =&gt;</span> &#123;    </span><br><span class="line">    Toast(&#123;        </span><br><span class="line">        message: msg,        </span><br><span class="line">        duration: <span class="hljs-number">1000</span>,        </span><br><span class="line">        forbidClick: <span class="hljs-literal">true</span>    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** </span></span><br><span class="line"><span class="hljs-comment"> * 跳转登录页</span></span><br><span class="line"><span class="hljs-comment"> * 携带当前页面路由，以期在登录页面完成登录后返回当前页面</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">const</span> toLogin = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    router.replace(&#123;</span><br><span class="line">        path: <span class="hljs-string">'/login'</span>,        </span><br><span class="line">        query: &#123;</span><br><span class="line">            redirect: router.currentRoute.fullPath</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** </span></span><br><span class="line"><span class="hljs-comment"> * 请求失败后的错误统一处理 </span></span><br><span class="line"><span class="hljs-comment"> * @param &#123;Number&#125; status 请求失败的状态码</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">const</span> errorHandle = <span class="hljs-function">(<span class="hljs-params">status, other</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 状态码判断</span></span><br><span class="line">    <span class="hljs-keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="hljs-comment">// 401: 未登录状态，跳转登录页</span></span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:</span><br><span class="line">            toLogin();</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-comment">// 403 token过期</span></span><br><span class="line">        <span class="hljs-comment">// 清除token并跳转登录页</span></span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:</span><br><span class="line">            tip(<span class="hljs-string">'登录过期，请重新登录'</span>);</span><br><span class="line">            localStorage.removeItem(<span class="hljs-string">'token'</span>);</span><br><span class="line">            store.commit(<span class="hljs-string">'loginSuccess'</span>, <span class="hljs-literal">null</span>);</span><br><span class="line">            setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                toLogin();</span><br><span class="line">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-comment">// 404请求不存在</span></span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:</span><br><span class="line">            tip(<span class="hljs-string">'请求的资源不存在'</span>); </span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">default</span>:</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(other);   </span><br><span class="line">        &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 创建axios实例</span></span><br><span class="line"><span class="hljs-keyword">var</span> instance = axios.create(&#123;    timeout: <span class="hljs-number">1000</span> * <span class="hljs-number">12</span>&#125;);</span><br><span class="line"><span class="hljs-comment">// 设置post请求头</span></span><br><span class="line">instance.defaults.headers.post[<span class="hljs-string">'Content-Type'</span>] = <span class="hljs-string">'application/x-www-form-urlencoded'</span>;</span><br><span class="line"><span class="hljs-comment">/** </span></span><br><span class="line"><span class="hljs-comment"> * 请求拦截器 </span></span><br><span class="line"><span class="hljs-comment"> * 每次请求前，如果存在token则在请求头中携带token </span></span><br><span class="line"><span class="hljs-comment"> */</span> </span><br><span class="line">instance.interceptors.request.use(    </span><br><span class="line">    config =&gt; &#123;        </span><br><span class="line">        <span class="hljs-comment">// 登录流程控制中，根据本地是否存在token判断用户的登录情况        </span></span><br><span class="line">        <span class="hljs-comment">// 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token        </span></span><br><span class="line">        <span class="hljs-comment">// 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码        </span></span><br><span class="line">        <span class="hljs-comment">// 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。        </span></span><br><span class="line">        <span class="hljs-keyword">const</span> token = store.state.token;        </span><br><span class="line">        token &amp;&amp; (config.headers.Authorization = token);        </span><br><span class="line">        <span class="hljs-keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    error =&gt; <span class="hljs-built_in">Promise</span>.error(error))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(    </span><br><span class="line">    <span class="hljs-comment">// 请求成功</span></span><br><span class="line">    res =&gt; res.status === <span class="hljs-number">200</span> ? <span class="hljs-built_in">Promise</span>.resolve(res) : <span class="hljs-built_in">Promise</span>.reject(res),    </span><br><span class="line">    <span class="hljs-comment">// 请求失败</span></span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> &#123; response &#125; = error;</span><br><span class="line">        <span class="hljs-keyword">if</span> (response) &#123;</span><br><span class="line">            <span class="hljs-comment">// 请求已发出，但是不在2xx的范围 </span></span><br><span class="line">            errorHandle(response.status, response.data.message);</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(response);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 处理断网的情况</span></span><br><span class="line">            <span class="hljs-comment">// eg:请求超时或断网时，更新state的network状态</span></span><br><span class="line">            <span class="hljs-comment">// network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span></span><br><span class="line">            <span class="hljs-comment">// 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.navigator.onLine) &#123;</span><br><span class="line">               store.commit(<span class="hljs-string">'changeNetwork'</span>, <span class="hljs-literal">false</span>);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> instance;</span><br></pre></td></tr></table></figure><p>这个axios和之前的大同小异，做了如下几点改变：</p><ul><li>去掉了之前get和post方法的封装，通过创建一个axios实例然后export default方法导出，这样使用起来更灵活一些。</li><li>去掉了通过环境变量控制baseUrl的值。考虑到接口会有多个不同域名的情况，所以准备通过js变量来控制接口域名。这点具体在api里会介绍。</li><li>增加了请求超时，即断网状态的处理。说下思路，当断网时，通过更新vuex中network的状态来控制断网提示组件的显示隐藏。断网提示一般会有重新加载数据的操作，这步会在后面对应的地方介绍。</li><li><p>公用函数进行抽出，简化代码，尽量保证单一职责原则。</p><p><strong>下面说下api这块，考虑到一下需求：</strong></p></li><li><p>更加模块化</p></li><li>更方便多人开发，有效减少解决命名冲突</li><li><p>处理接口域名有多个情况</p><p>这里这里呢新建了一个api文件夹，里面有一个index.js和一个base.js，以及多个根据模块划分的接口js文件。index.js是一个api的出口，base.js管理接口域名，其他js则用来管理各个模块的接口。</p></li></ul><p>先放index.js代码：</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** </span></span><br><span class="line"><span class="hljs-comment"> * api接口的统一出口</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">// 文章模块接口</span></span><br><span class="line"><span class="hljs-keyword">import</span> article <span class="hljs-keyword">from</span> <span class="hljs-string">'@/api/article'</span>;</span><br><span class="line"><span class="hljs-comment">// 其他模块的接口……</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 导出接口</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    </span><br><span class="line">    article,</span><br><span class="line">    <span class="hljs-comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.js是一个api接口的出口，这样就可以把api接口根据功能划分为多个模块，利于多人协作开发，比如一个人只负责一个模块的开发等，还能方便每个模块中接口的命名哦。</p><p>base.js:</p><figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 接口域名的管理</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">base</span> = &#123;    </span><br><span class="line">    sq: <span class="hljs-string">'https://xxxx111111.com/api/v1'</span>,    </span><br><span class="line">    bd: <span class="hljs-string">'http://xxxxx22222.com/api'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> <span class="hljs-keyword">base</span>;</span><br></pre></td></tr></table></figure><p>通过base.js来管理我们的接口域名，不管有多少个都可以通过这里进行接口的定义。即使修改起来，也是很方便的。</p><p>最后就是接口模块的说明，例如上面的article.js:</p><figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * article模块接口列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line">import <span class="hljs-keyword">base</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./base'</span>; <span class="hljs-comment">// 导入接口域名列表</span></span><br><span class="line">import axios <span class="hljs-keyword">from</span> <span class="hljs-string">'@/utils/http'</span>; <span class="hljs-comment">// 导入http中创建的axios实例</span></span><br><span class="line">import qs <span class="hljs-keyword">from</span> <span class="hljs-string">'qs'</span>; <span class="hljs-comment">// 根据需求是否导入qs模块</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> article = &#123;    </span><br><span class="line">    <span class="hljs-comment">// 新闻列表    </span></span><br><span class="line">    articleList () &#123;        </span><br><span class="line">        <span class="hljs-keyword">return</span> axios.<span class="hljs-keyword">get</span>(`$&#123;<span class="hljs-keyword">base</span>.sq&#125;/topics`);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="hljs-comment">// 新闻详情,演示    </span></span><br><span class="line">    articleDetail (id, <span class="hljs-keyword">params</span>) &#123;        </span><br><span class="line">        <span class="hljs-keyword">return</span> axios.<span class="hljs-keyword">get</span>(`$&#123;<span class="hljs-keyword">base</span>.sq&#125;/topic/$&#123;id&#125;`, &#123;            </span><br><span class="line">            <span class="hljs-keyword">params</span>: <span class="hljs-keyword">params</span>        </span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-comment">// post提交    </span></span><br><span class="line">    login (<span class="hljs-keyword">params</span>) &#123;        </span><br><span class="line">        <span class="hljs-keyword">return</span> axios.post(`$&#123;<span class="hljs-keyword">base</span>.sq&#125;/accesstoken`, qs.stringify(<span class="hljs-keyword">params</span>));    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 其他接口…………</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> article;</span><br></pre></td></tr></table></figure><ol><li>通过直接引入我们封装好的axios实例，然后定义接口、调用axios实例并返回，可以更灵活的使用axios，比如你可以对<code>post</code>请求时提交的数据进行一个qs序列化的处理等。</li><li>请求的配置更灵活，你可以针对某个需求进行一个不同的配置。关于配置的优先级，<code>axios</code>文档说的很清楚，这个顺序是：在 <code>lib/defaults.js</code> 找到的库的默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后者将优先于前者。</li><li>restful风格的接口，也可以通过这种方式灵活的设置api接口地址。</li></ol><p>最后，为了方便api的调用，我们需要将其挂载到vue的原型上。在main.js中：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span></span><br><span class="line"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span> <span class="hljs-comment">// 导入路由文件</span></span><br><span class="line"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store'</span> <span class="hljs-comment">// 导入vuex文件</span></span><br><span class="line"><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">'./api'</span> <span class="hljs-comment">// 导入api接口</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$api = api; <span class="hljs-comment">// 将api挂载到vue的原型上</span></span><br></pre></td></tr></table></figure><p>然后我们可以在页面中这样调用接口，eg：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;    </span><br><span class="line">    onLoad(id) &#123;      </span><br><span class="line">        <span class="hljs-keyword">this</span>.$api.article.articleDetail(id, &#123;        </span><br><span class="line">            api: <span class="hljs-number">123</span>      </span><br><span class="line">        &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 执行某些操作      </span></span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再提一下断网的处理，这里只做一个简单的示例：</p><figure class="highlight xquery hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  </span></span><br><span class="line"><span class="hljs-xml">    </span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    </span></span><br><span class="line"><span class="hljs-xml">        </span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"!network"</span>&gt;</span>      </span></span><br><span class="line"><span class="hljs-xml">            </span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我没网了<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-xml">      </span></span><br><span class="line"><span class="hljs-xml">            </span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onRefresh"</span>&gt;</span>刷新<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-xml">      </span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-xml">    </span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span>      </span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    import </span><span class="hljs-xquery">&#123; mapState &#125;</span><span class="hljs-xml"> from 'vuex';</span></span><br><span class="line"><span class="hljs-xml">    export default </span><span class="hljs-xquery">&#123;  </span></span><br><span class="line"><span class="hljs-xquery">       <span class="hljs-built_in"> name</span>: <span class="hljs-string">'App'</span>,  </span></span><br><span class="line"><span class="hljs-xquery">        computed: &#123;    </span></span><br><span class="line"><span class="hljs-xquery">            ...mapState([<span class="hljs-string">'network'</span>])  </span></span><br><span class="line"><span class="hljs-xquery">        &#125;</span><span class="hljs-xml">,  </span></span><br><span class="line"><span class="hljs-xml">        methods: </span><span class="hljs-xquery">&#123;    </span></span><br><span class="line"><span class="hljs-xquery">            // 通过跳转一个空页面再返回的方式来实现刷新当前页面数据的目的</span></span><br><span class="line"><span class="hljs-xquery">            onRefresh () &#123;      </span></span><br><span class="line"><span class="hljs-xquery">                this.<span class="hljs-variable">$router</span><span class="hljs-built_in">.replace</span>(<span class="hljs-string">'/refresh'</span>)    </span></span><br><span class="line"><span class="hljs-xquery">            &#125;</span><span class="hljs-xml">  </span></span><br><span class="line"><span class="hljs-xml">        &#125;</span></span><br><span class="line"><span class="hljs-xml">    &#125;</span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这是app.vue，这里简单演示一下断网。在http.js中介绍了，我们会在断网的时候，来更新vue中network的状态，那么这里我们根据network的状态来判断是否需要加载这个断网组件。断网情况下，加载断网组件，不加载对应页面的组件。当点击刷新的时候，我们通过跳转refesh页面然后立即返回的方式来实现重新获取数据的操作。因此我们需要新建一个refresh.vue页面，并在其<code>beforeRouteEnter</code>钩子中再返回当前页面。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// refresh.vue</span></span><br><span class="line">beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;</span><br><span class="line">    next(<span class="hljs-function"><span class="hljs-params">vm</span> =&gt;</span> &#123;            </span><br><span class="line">        vm.$router.replace(<span class="hljs-keyword">from</span>.fullPath)        </span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一种全局通用的断网提示，当然了，也可以根据自己的项目需求操作。具体操作就仁者见仁智者见智了。</p><p>如果更多的需求，或者说是不一样的需求，可以根据自己的需求进行一个改进。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、axios的封装&quot;&gt;&lt;a href=&quot;#一、axios的封装&quot; class=&quot;headerlink&quot; title=&quot;一、axios的封装&quot;&gt;&lt;/a&gt;一、axios的封装&lt;/h1&gt;&lt;p&gt;在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://jdsheng.cn/tags/vue/"/>
    
      <category term="axios" scheme="https://jdsheng.cn/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue 组件间的通信（六种）</title>
    <link href="https://jdsheng.cn/2020/06/06/Vue%20%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%88%E5%85%AD%E7%A7%8D%EF%BC%89/"/>
    <id>https://jdsheng.cn/2020/06/06/Vue 组件间的通信（六种）/</id>
    <published>2020-06-06T15:00:23.258Z</published>
    <updated>2019-10-22T14:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>组件是 vue.js最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。<a id="more"></a>一般来说，组件可以有以下几种关系<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzE3LzE2YWMzNWJmNzA1MzAzMTU?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。</p><p>针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。</p><p>本文总结了vue组件间通信的几种方式，如<code>props</code>、<code>$emit/$on</code>、<code>vuex</code>、<code>$parent / $children</code>、<code>$attrs/$listeners</code>和<code>provide/inject</code>，以通俗易懂的实例讲述这其中的差别及使用场景，希望对小伙伴有些许帮助。</p><h4 id="方案一：props-emit"><a href="#方案一：props-emit" class="headerlink" title="方案一：props/$emit"></a>方案一：<code>props/$emit</code></h4><p>父组件A通过<code>props</code>的方式向子组件B传递，B to A 通过在 B 组件中 <code>$emit</code>, A 组件中 v-on 的方式实现。</p><p><strong>1.父组件向子组件传值</strong></p><p>接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件Users.vue中如何获取父组件App.vue中的数据 <code>users:[&quot;Henry&quot;,&quot;Bucky&quot;,&quot;Emily&quot;]</code></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//App.vue父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="hljs-string">"app"</span>&gt;</span><br><span class="line">    &lt;users v-bind:users=<span class="hljs-string">"users"</span>&gt;&lt;<span class="hljs-regexp">/users&gt;/</span><span class="hljs-regexp">/前者自定义名称便于子组件调用，后者要传递数据名</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">import Users from "./</span>components/Users<span class="hljs-string">"</span></span><br><span class="line"><span class="hljs-string">export default &#123;</span></span><br><span class="line"><span class="hljs-string">  name: 'App',</span></span><br><span class="line"><span class="hljs-string">  data()&#123;</span></span><br><span class="line"><span class="hljs-string">    return&#123;</span></span><br><span class="line"><span class="hljs-string">      users:["</span>Henry<span class="hljs-string">","</span>Bucky<span class="hljs-string">","</span>Emily<span class="hljs-string">"]</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">  &#125;,</span></span><br><span class="line"><span class="hljs-string">  components:&#123;</span></span><br><span class="line"><span class="hljs-string">    "</span>users<span class="hljs-string">":Users</span></span><br><span class="line"><span class="hljs-string">  &#125;</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//users子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"hello"</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">"user in users"</span>&gt;&#123;&#123;user&#125;&#125;&lt;<span class="hljs-regexp">/li&gt;/</span><span class="hljs-regexp">/遍历传递过来的值，然后呈现到页面</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">  name: <span class="hljs-string">'HelloWorld'</span>,</span><br><span class="line">  props:&#123;</span><br><span class="line">    users:&#123;           <span class="hljs-comment">//这个就是父组件中子标签自定义名字</span></span><br><span class="line">      type:<span class="hljs-built_in">Array</span>,</span><br><span class="line">      required:<span class="hljs-literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>总结：父组件通过props向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed</p><p><strong>2.子组件向父组件传值（通过事件形式）</strong></p><p>接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击“Vue.js Demo”后，子组件向父组件传递值，文字由原来的“传递的是一个值”变成“子向父组件传值”，实现子组件向父组件值的传递。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzE3LzE2YWMzNWJmNzBhYzJkNTE?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;h1 @click=<span class="hljs-string">"changeTitle"</span>&gt;&#123;&#123;title&#125;&#125;&lt;<span class="hljs-regexp">/h1&gt;/</span><span class="hljs-regexp">/绑定一个点击事件</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>header&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">  name: 'app-header',</span></span><br><span class="line"><span class="hljs-regexp">  data() &#123;</span></span><br><span class="line"><span class="hljs-regexp">    return &#123;</span></span><br><span class="line"><span class="hljs-regexp">      title:"Vue.js Demo"</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">  &#125;,</span></span><br><span class="line"><span class="hljs-regexp">  methods:&#123;</span></span><br><span class="line"><span class="hljs-regexp">    changeTitle() &#123;</span></span><br><span class="line"><span class="hljs-regexp">      this.$emit("titleChanged","子向父组件传值");/</span><span class="hljs-regexp">/自定义事件  传递值“子向父组件传值”</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="hljs-string">"app"</span>&gt;</span><br><span class="line">    &lt;app-header v-on:titleChanged=<span class="hljs-string">"updateTitle"</span> &gt;&lt;<span class="hljs-regexp">/app-header&gt;/</span><span class="hljs-regexp">/与子组件titleChanged自定义事件保持一致</span></span><br><span class="line"><span class="hljs-regexp">   /</span><span class="hljs-regexp">/ updateTitle($event)接受传递过来的文字</span></span><br><span class="line"><span class="hljs-regexp">    &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"./components/Header"</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">  name: <span class="hljs-string">'App'</span>,</span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span>&#123;</span><br><span class="line">      title:<span class="hljs-string">"传递的是一个值"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    updateTitle(e)&#123;   <span class="hljs-comment">//声明这个函数</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.title = e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">   <span class="hljs-string">"app-header"</span>:Header,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>总结：子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。</p><h4 id="方案二：-emit-on"><a href="#方案二：-emit-on" class="headerlink" title="方案二：$emit/$on"></a>方案二：<code>$emit/$on</code></h4><p>这种方法通过一个空的Vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件,巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。当我们的项目比较大时，可以选择更好的状态管理解决方案vuex。</p><p><strong>1.具体实现方式：</strong><br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> Event=<span class="hljs-keyword">new</span> Vue();</span><br><span class="line">Event.$emit(事件名,数据);</span><br><span class="line">Event.$on(事件名,data =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>2.举个例子：</strong></p><p>假设兄弟组件有三个，分别是A、B、C组件，C组件如何获取A或者B组件的数据</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="hljs-string">"itany"</span>&gt;</span><br><span class="line">&lt;my-a&gt;&lt;<span class="hljs-regexp">/my-a&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;my-b&gt;&lt;/my</span>-b&gt;</span><br><span class="line">&lt;my-c&gt;&lt;<span class="hljs-regexp">/my-c&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;template id=<span class="hljs-string">"a"</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;A组件：&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/h3&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button @click="send"&gt;将数据发送给C组件&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;template id=<span class="hljs-string">"b"</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;B组件：&#123;&#123;age&#125;&#125;&lt;<span class="hljs-regexp">/h3&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;button @click="send"&gt;将数组发送给C组件&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;template id=<span class="hljs-string">"c"</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;C组件：&#123;&#123;name&#125;&#125;，&#123;&#123;age&#125;&#125;&lt;<span class="hljs-regexp">/h3&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">var Event = new Vue();/</span><span class="hljs-regexp">/定义一个空的Vue实例</span></span><br><span class="line"><span class="hljs-regexp">var A = &#123;</span></span><br><span class="line"><span class="hljs-regexp">template: '#a',</span></span><br><span class="line"><span class="hljs-regexp">data() &#123;</span></span><br><span class="line"><span class="hljs-regexp">  return &#123;</span></span><br><span class="line"><span class="hljs-regexp">    name: 'tom'</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;,</span></span><br><span class="line"><span class="hljs-regexp">methods: &#123;</span></span><br><span class="line"><span class="hljs-regexp">  send() &#123;</span></span><br><span class="line"><span class="hljs-regexp">    Event.$emit('data-a', this.name);</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">var B = &#123;</span></span><br><span class="line"><span class="hljs-regexp">template: '#b',</span></span><br><span class="line"><span class="hljs-regexp">data() &#123;</span></span><br><span class="line"><span class="hljs-regexp">  return &#123;</span></span><br><span class="line"><span class="hljs-regexp">    age: 20</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;,</span></span><br><span class="line"><span class="hljs-regexp">methods: &#123;</span></span><br><span class="line"><span class="hljs-regexp">  send() &#123;</span></span><br><span class="line"><span class="hljs-regexp">    Event.$emit('data-b', this.age);</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">var C = &#123;</span></span><br><span class="line"><span class="hljs-regexp">template: '#c',</span></span><br><span class="line"><span class="hljs-regexp">data() &#123;</span></span><br><span class="line"><span class="hljs-regexp">  return &#123;</span></span><br><span class="line"><span class="hljs-regexp">    name: '',</span></span><br><span class="line"><span class="hljs-regexp">    age: ""</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;,</span></span><br><span class="line"><span class="hljs-regexp">mounted() &#123;/</span><span class="hljs-regexp">/在模板编译完成后执行</span></span><br><span class="line"><span class="hljs-regexp"> Event.$on('data-a',name =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">     this.name = name;/</span><span class="hljs-regexp">/箭头函数内部不会产生新的this，这边如果不用=&gt;,this指代Event</span></span><br><span class="line"><span class="hljs-regexp"> &#125;)</span></span><br><span class="line"><span class="hljs-regexp"> Event.$on('data-b',age =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">     this.age = age;</span></span><br><span class="line"><span class="hljs-regexp"> &#125;)</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="hljs-regexp">el: '#itany',</span></span><br><span class="line"><span class="hljs-regexp">components: &#123;</span></span><br><span class="line"><span class="hljs-regexp">  'my-a': A,</span></span><br><span class="line"><span class="hljs-regexp">  'my-b': B,</span></span><br><span class="line"><span class="hljs-regexp">  'my-c': C</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzE3LzE2YWMzNWJmNzBiMDA1MDc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><code>$on</code> 监听了自定义事件 <code>data-a</code>和<code>data-b</code>，因为有时不确定何时会触发事件，一般会在 <code>mounted</code> 或 <code>created</code> 钩子中来监听。</p><h4 id="方案三：vuex"><a href="#方案三：vuex" class="headerlink" title="方案三：vuex"></a>方案三：vuex</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzE3LzE2YWMzNWJmNzBlZjhlYjE?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><strong>1.简要介绍Vuex原理</strong></p><p>Vuex实现了一个单向数据流，在全局拥有一个State存放数据，当组件要更改State中的数据时，必须通过Mutation进行，Mutation同时提供了订阅者模式供外部插件调用获取State数据的更新。</p><p>而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走Action，但Action也是无法直接修改State的，还是需要通过Mutation来修改State的数据。最后，根据State的变化，渲染到视图上。</p><p><strong>2.简要介绍各模块在流程中的功能：</strong></p><ul><li>Vue Components：Vue组件。HTML页面上，负责接收用户操作等交互行为，执行<code>dispatch</code>方法触发对应action进行回应。<ul><li>dispatch：操作行为触发方法，是唯一能执行<code>action</code>的方法。</li><li>actions：操作行为处理模块,由组件中的<code>$store.dispatch</code>(‘action 名称’, data1)来触发。然后由commit()来触发mutation的调用 , 间接更新 state。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他<code>action</code>以及提交<code>mutation</code>的操作。该模块提供了Promise的封装，以支持action的链式触发。</li><li>commit：状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。</li><li>mutations：状态改变操作方法，由actions中的commit(‘mutation 名称’)来触发。是Vuex修改state的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。</li><li>state：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。</li><li>getters：state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。</li></ul></li></ul><p><strong>3.Vuex与localStorage</strong></p><p>vuex 是 vue 的状态管理器，存储的数据是响应式的。<strong>但是并不会保存起来，刷新之后就回到了初始状态</strong>，具体做法应该在vuex里数据改变的时候把数据拷贝一份保存到localStorage里面，刷新之后，如果localStorage里有保存的数据，取出来再替换store里的state</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> defaultCity = <span class="hljs-string">"上海"</span></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;   <span class="hljs-comment">// 用户关闭了本地存储功能，此时在外层加个try...catch</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (!defaultCity)&#123;</span><br><span class="line">    defaultCity = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">window</span>.localStorage.getItem(<span class="hljs-string">'defaultCity'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: defaultCity</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeCity(state, city) &#123;</span><br><span class="line">      state.city = city</span><br><span class="line">      <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">window</span>.localStorage.setItem(<span class="hljs-string">'defaultCity'</span>, <span class="hljs-built_in">JSON</span>.stringify(state.city));</span><br><span class="line">      <span class="hljs-comment">// 数据改变的时候把数据拷贝一份保存到localStorage里面</span></span><br><span class="line">      &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里需要注意的是：由于vuex里，我们保存的状态，都是数组，而localStorage只支持字符串，所以需要用JSON转换</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">JSON</span>.stringify(state.subscribeList);   <span class="hljs-comment">// array -&gt; string</span></span><br><span class="line"><span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">window</span>.localStorage.getItem(<span class="hljs-string">"subscribeList"</span>));    <span class="hljs-comment">// string -&gt; array</span></span><br></pre></td></tr></table></figure><h4 id="方案四：-attrs-listeners"><a href="#方案四：-attrs-listeners" class="headerlink" title="方案四：$attrs/$listeners"></a>方案四：<code>$attrs/$listeners</code></h4><p><strong>1.简介</strong></p><p>多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此Vue2.4 版本提供了另一种方法—-<code>$attrs/$listeners</code></p><ul><li><code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件。通常配合 inheritAttrs 选项一起使用。</li><li><code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件</li></ul><p><strong>2.例子</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;浪里行舟&lt;<span class="hljs-regexp">/h2&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;child-com1</span></span><br><span class="line"><span class="hljs-regexp">      :foo="foo"</span></span><br><span class="line"><span class="hljs-regexp">      :boo="boo"</span></span><br><span class="line"><span class="hljs-regexp">      :coo="coo"</span></span><br><span class="line"><span class="hljs-regexp">      :doo="doo"</span></span><br><span class="line"><span class="hljs-regexp">      title="前端工匠"</span></span><br><span class="line"><span class="hljs-regexp">    &gt;&lt;/</span>child-com1&gt;</span><br><span class="line">  &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-keyword">const</span> childCom1 = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">"./childCom1.vue"</span>);</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">  components: &#123; childCom1 &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">      foo: <span class="hljs-string">"Javascript"</span>,</span><br><span class="line">      boo: <span class="hljs-string">"Html"</span>,</span><br><span class="line">      coo: <span class="hljs-string">"CSS"</span>,</span><br><span class="line">      doo: <span class="hljs-string">"Vue"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// childCom1.vue</span></span><br><span class="line">&lt;template <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"border"</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;foo: &#123;&#123; foo &#125;&#125;&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;p&gt;childCom1的$attrs: &#123;&#123; $attrs &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;child-com2 v-bind=<span class="hljs-string">"$attrs"</span>&gt;&lt;<span class="hljs-regexp">/child-com2&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">const childCom2 = () =&gt; import("./</span>childCom2.vue<span class="hljs-string">");</span></span><br><span class="line"><span class="hljs-string">export default &#123;</span></span><br><span class="line"><span class="hljs-string">  components: &#123;</span></span><br><span class="line"><span class="hljs-string">    childCom2</span></span><br><span class="line"><span class="hljs-string">  &#125;,</span></span><br><span class="line"><span class="hljs-string">  inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span></span><br><span class="line"><span class="hljs-string">  props: &#123;</span></span><br><span class="line"><span class="hljs-string">    foo: String // foo作为props属性绑定</span></span><br><span class="line"><span class="hljs-string">  &#125;,</span></span><br><span class="line"><span class="hljs-string">  created() &#123;</span></span><br><span class="line"><span class="hljs-string">    console.log(this.$attrs); // &#123; "</span>boo<span class="hljs-string">": "</span>Html<span class="hljs-string">", "</span>coo<span class="hljs-string">": "</span>CSS<span class="hljs-string">", "</span>doo<span class="hljs-string">": "</span>Vue<span class="hljs-string">", "</span>title<span class="hljs-string">": "</span>前端工匠<span class="hljs-string">" &#125;</span></span><br><span class="line"><span class="hljs-string">  &#125;</span></span><br><span class="line"><span class="hljs-string">&#125;;</span></span><br><span class="line"><span class="hljs-string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// childCom2.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"border"</span>&gt;</span><br><span class="line">    &lt;p&gt;boo: &#123;&#123; boo &#125;&#125;&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;p&gt;childCom2: &#123;&#123; $attrs &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;child-com3 v-bind=<span class="hljs-string">"$attrs"</span>&gt;&lt;<span class="hljs-regexp">/child-com3&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">const childCom3 = () =&gt; import("./</span>childCom3.vue<span class="hljs-string">");</span></span><br><span class="line"><span class="hljs-string">export default &#123;</span></span><br><span class="line"><span class="hljs-string">  components: &#123;</span></span><br><span class="line"><span class="hljs-string">    childCom3</span></span><br><span class="line"><span class="hljs-string">  &#125;,</span></span><br><span class="line"><span class="hljs-string">  inheritAttrs: false,</span></span><br><span class="line"><span class="hljs-string">  props: &#123;</span></span><br><span class="line"><span class="hljs-string">    boo: String</span></span><br><span class="line"><span class="hljs-string">  &#125;,</span></span><br><span class="line"><span class="hljs-string">  created() &#123;</span></span><br><span class="line"><span class="hljs-string">    console.log(this.$attrs); // &#123; "</span>coo<span class="hljs-string">": "</span>CSS<span class="hljs-string">", "</span>doo<span class="hljs-string">": "</span>Vue<span class="hljs-string">", "</span>title<span class="hljs-string">": "</span>前端工匠<span class="hljs-string">" &#125;</span></span><br><span class="line"><span class="hljs-string">  &#125;</span></span><br><span class="line"><span class="hljs-string">&#125;;</span></span><br><span class="line"><span class="hljs-string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// childCom3.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"border"</span>&gt;</span><br><span class="line">    &lt;p&gt;childCom3: &#123;&#123; $attrs &#125;&#125;&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">  props: &#123;</span></span><br><span class="line"><span class="hljs-regexp">    coo: String,</span></span><br><span class="line"><span class="hljs-regexp">    title: String</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzE3LzE2YWMzNWJmNzdlNDQ3NDQ?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>如上图所示<code>$attrs</code>表示没有继承数据的对象，格式为{属性名：属性值}。Vue2.4提供了<code>$attrs , $listeners</code> 来传递数据与事件，跨级组件之间的通讯变得更简单。</p><p>简单来说：<code>$attrs</code>与<code>$listeners</code> 是两个对象，<code>$attrs</code> 里存放的是父组件中绑定的非 Props 属性，$listeners里存放的是父组件中绑定的非原生事件。</p><h4 id="方案五：provide-inject"><a href="#方案五：provide-inject" class="headerlink" title="方案五：provide/inject"></a>方案五：<code>provide/inject</code></h4><p><strong>1.简介</strong></p><p>Vue2.2.0新增API,这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。一言而蔽之：祖先组件中通过<code>provider</code>来提供变量，然后在子孙组件中通过<code>inject</code>来注入变量。</p><p><code>provide</code> / <code>inject</code> API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p><p><strong>2.例子</strong><br>假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// A.vue</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    name: <span class="hljs-string">'浪里行舟'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// B.vue</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">  inject: [<span class="hljs-string">'name'</span>],</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name);  <span class="hljs-comment">// 浪里行舟</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在 A.vue 里，我们设置了一个 <code>provide: name</code>，值为 浪里行舟，它的作用就是将 <code>name</code> 这个变量提供给它的所有子组件。而在 B.vue 中，通过 <code>inject</code> 注入了从 A 组件中提供的 <code>name</code> 变量，那么在组件 B 中，就可以直接通过 <code>this.name</code> 访问这个变量了，它的值也是 浪里行舟。这就是 <code>provide</code> / <code>inject</code> API 最核心的用法。</p><p>需要注意的是：<code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的—-vue官方文档<br>所以，上面 A.vue 的 <code>name</code> 如果改变了，B.vue 的 <code>this.name</code> 是不会改变的，仍然是 浪里行舟。</p><p><strong>3.provide与inject 怎么实现数据响应式</strong></p><p>一般来说，有两种办法：</p><ul><li>provide祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如<code>props</code>，<code>methods</code></li><li>使用2.6最新API <code>Vue.observable</code> 优化响应式 <code>provide</code>(推荐)</li></ul><p>我们来看个例子：孙组件D、E和F获取A组件传递过来的color值，并能实现数据响应式变化，即A组件的color变化后，组件D、E、F会跟着变（核心代码如下：）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzE3LzE2YWMzNWJmNzEzMWYzZGI?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// A 组件 </span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">      &lt;h1&gt;A 组件&lt;<span class="hljs-regexp">/h1&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;button @click="() =&gt; changeColor()"&gt;改变color&lt;/</span>button&gt;</span><br><span class="line">      &lt;ChildrenB /&gt;</span><br><span class="line">      &lt;ChildrenC /&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">......</span></span><br><span class="line"><span class="hljs-regexp">  data() &#123;</span></span><br><span class="line"><span class="hljs-regexp">    return &#123;</span></span><br><span class="line"><span class="hljs-regexp">      color: "blue"</span></span><br><span class="line"><span class="hljs-regexp">    &#125;;</span></span><br><span class="line"><span class="hljs-regexp">  &#125;,</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ provide() &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/   return &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/     theme: &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/       color: this.color /</span><span class="hljs-regexp">/这种方式绑定的数据并不是可响应的</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/     &#125; /</span><span class="hljs-regexp">/ 即A组件的color变化后，组件D、E、F不会跟着变</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/   &#125;;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ &#125;,</span></span><br><span class="line"><span class="hljs-regexp">  provide() &#123;</span></span><br><span class="line"><span class="hljs-regexp">    return &#123;</span></span><br><span class="line"><span class="hljs-regexp">      theme: this/</span><span class="hljs-regexp">/方法一：提供祖先组件的实例</span></span><br><span class="line"><span class="hljs-regexp">    &#125;;</span></span><br><span class="line"><span class="hljs-regexp">  &#125;,</span></span><br><span class="line"><span class="hljs-regexp">  methods: &#123;</span></span><br><span class="line"><span class="hljs-regexp">    changeColor(color) &#123;</span></span><br><span class="line"><span class="hljs-regexp">      if (color) &#123;</span></span><br><span class="line"><span class="hljs-regexp">        this.color = color;</span></span><br><span class="line"><span class="hljs-regexp">      &#125; else &#123;</span></span><br><span class="line"><span class="hljs-regexp">        this.color = this.color === "blue" ? "red" : "blue";</span></span><br><span class="line"><span class="hljs-regexp">      &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ 方法二:使用2.6最新API Vue.observable 优化响应式 provide</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ provide() &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/   this.theme = Vue.observable(&#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/     color: "blue"</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/   &#125;);</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/   return &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/     theme: this.theme</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/   &#125;;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ &#125;,</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ methods: &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/   changeColor(color) &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/     if (color) &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/       this.theme.color = color;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/     &#125; else &#123;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/       this.theme.color = this.theme.color === "blue" ? "red" : "blue";</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/     &#125;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/   &#125;</span></span><br><span class="line"><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ &#125;</span></span><br></pre></td></tr></table></figure><p>虽说<code>provide</code> 和 <code>inject</code> 主要为高阶插件/组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！</p><h4 id="方案六：-parent-children与-ref"><a href="#方案六：-parent-children与-ref" class="headerlink" title="方案六：$parent / $children与 ref"></a>方案六：<code>$parent / $children</code>与 <code>ref</code></h4><ul><li><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li><li><code>$parent / $children</code>：访问父 / 子实例</li></ul><p>需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 <code>ref</code>来访问组件的例子：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// component-a 子组件</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">      title: <span class="hljs-string">'Vue.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHello () &#123;</span><br><span class="line">      <span class="hljs-built_in">window</span>.alert(<span class="hljs-string">'Hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;component-a ref=<span class="hljs-string">"comA"</span>&gt;&lt;<span class="hljs-regexp">/component-a&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> comA = <span class="hljs-keyword">this</span>.$refs.comA;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(comA.title);  <span class="hljs-comment">// Vue.js</span></span><br><span class="line">      comA.sayHello();  <span class="hljs-comment">// 弹窗</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>不过，这两种方法的弊端是，无法在跨级或兄弟间通信。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// parent.vue</span></span><br><span class="line">&lt;component-a&gt;&lt;<span class="hljs-regexp">/component-a&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;component-b&gt;&lt;/</span>component-b&gt;</span><br><span class="line">&lt;component-b&gt;&lt;<span class="hljs-regexp">/component-b&gt;</span></span><br></pre></td></tr></table></figure><p>我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>常见使用场景可以分为三类：</p><ul><li>父子通信：父向子传递数据是通过 <code>props</code>，子向父是通过 <code>events（$emit）</code>；通过父链 / 子链也可以通信<code>（$parent / $children）</code>；<code>ref</code> 也可以访问组件实例；<code>provide / inject API</code>；<code>$attrs/$listeners</code></li><li>兄弟通信：Bus；Vuex</li><li>跨级通信：Bus；Vuex；<code>provide</code> / inject API、<code>$attrs/$listeners</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件是 vue.js最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jdsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jdsheng.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://jdsheng.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>PHP知识点积累</title>
    <link href="https://jdsheng.cn/2020/06/06/PHP%E7%9F%A5%E8%AF%86%E7%82%B9%E7%A7%AF%E7%B4%AF/"/>
    <id>https://jdsheng.cn/2020/06/06/PHP知识点积累/</id>
    <published>2020-06-06T15:00:23.160Z</published>
    <updated>2019-10-02T03:08:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、<a href="https://www.cnblogs.com/yonge/articles/2687014.html" target="_blank" rel="noopener">关于$_FILES 处理文件上传</a><br>2、<a href="https://www.cnblogs.com/m-m-g-y0416/p/5552483.html" target="_blank" rel="noopener">数组的定义和遍历</a><br>3、<a href="https://blog.csdn.net/q740766100/article/details/80281773" target="_blank" rel="noopener">关于命名空间的简单介绍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、&lt;a href=&quot;https://www.cnblogs.com/yonge/articles/2687014.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关于$_FILES 处理文件上传&lt;/a&gt;&lt;br&gt;2、&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="PHP" scheme="https://jdsheng.cn/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://jdsheng.cn/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP mysql数据库面向对象简单操作类（增删改查）、分页类和图片验证码类的封装</title>
    <link href="https://jdsheng.cn/2020/06/06/php%20mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E7%B1%BB%EF%BC%88%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%EF%BC%89%E3%80%81%E5%88%86%E9%A1%B5%E7%B1%BB%E5%92%8C%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>https://jdsheng.cn/2020/06/06/php mysql数据库面向对象简单操作类（增删改查）、分页类和图片验证码类的封装/</id>
    <published>2020-06-06T15:00:23.135Z</published>
    <updated>2019-10-02T03:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章中已经介绍了PHP连接数据库的方法以及最基本的对数据库的操作，但并没有实现模块化，所有的代码全都集中在表现页面中，<a id="more"></a>造成了代码冗余，不仅不利于维护也不利于代码的重用性，那么在这篇文章中将用面向对象的知识对数据库的连接和基本操作方法进行封装，也简单地对地分页功能进行了封装，这样就大大避免了代码的重复。</p><blockquote><p>以下文件放置于space文件夹中</p></blockquote><h2 id="一、封装简单的数据库的增删改查等函数"><a href="#一、封装简单的数据库的增删改查等函数" class="headerlink" title="一、封装简单的数据库的增删改查等函数"></a>一、封装简单的数据库的增删改查等函数</h2><blockquote><p>libs/Db文件夹</p></blockquote><p>1、先写一个db.config.php文件来使用里面是你数据库的信息</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-string">'host'</span> =&gt; <span class="hljs-string">'localhost'</span>,</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-string">'user'</span> =&gt; <span class="hljs-string">'root'</span>,</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'root'</span>,</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-string">'port'</span> =&gt; <span class="hljs-string">'3306'</span>,</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-string">'dbname'</span> =&gt; <span class="hljs-string">'test'</span>,</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-string">'charset'</span> =&gt; <span class="hljs-string">'utf8'</span></span></span><br><span class="line"><span class="hljs-php">);</span></span><br></pre></td></tr></table></figure><p>2、通过Idb.class.php文件来定义接口</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Db</span>; <span class="hljs-comment">//引入命名空间</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Idb</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOne</span><span class="hljs-params">()</span></span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getList</span><span class="hljs-params">()</span></span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">count</span><span class="hljs-params">()</span></span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br></pre></td></tr></table></figure><p><em><a href="https://blog.csdn.net/q740766100/article/details/80281773" target="_blank" rel="noopener">什么是命名空间</a></em></p><p>3、通过Mysql.class.php来封装接口的各个功能</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Db</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mysql</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Idb</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_link = <span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_debug = <span class="hljs-keyword">false</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_where = <span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_table = <span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_data = <span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_fields = <span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_limit=<span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_order = <span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> $_instance = <span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">$this</span>-&gt;_link == <span class="hljs-keyword">NULL</span> )</span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;connect();</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">self</span>::$_instance == <span class="hljs-keyword">NULL</span> )</span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">self</span>::$_instance = <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>();</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>::$_instance;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">excute</span><span class="hljs-params">($sql)</span> //执行<span class="hljs-title">sql</span>语句</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">$this</span>-&gt;_debug == <span class="hljs-keyword">true</span> )</span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"EXCUTE SQL: &#123;$sql&#125; &lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">$ret = <span class="hljs-keyword">$this</span>-&gt;_link-&gt;query($sql);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $ret;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setDebug</span><span class="hljs-params">( $debug = true )</span> //调试函数</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_debug = $debug;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span> //连接数据库</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$conf = <span class="hljs-keyword">require_once</span> <span class="hljs-string">'db.config.php'</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_link = <span class="hljs-keyword">new</span> \mysqli($conf[<span class="hljs-string">'host'</span>], $conf[<span class="hljs-string">'user'</span>], $conf[<span class="hljs-string">'password'</span>], $conf[<span class="hljs-string">'dbname'</span>],$conf[<span class="hljs-string">'port'</span>]);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;_link-&gt;connect_error) &#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">die</span>(<span class="hljs-string">'Connect Error ('</span> . <span class="hljs-keyword">$this</span>-&gt;_link-&gt;connect_errno . <span class="hljs-string">') '</span></span></span><br><span class="line"><span class="hljs-php">            . <span class="hljs-keyword">$this</span>-&gt;_link-&gt;connect_error);</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">date_default_timezone_set(<span class="hljs-string">'PRC'</span>); <span class="hljs-comment">//设时区</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_link-&gt;query(<span class="hljs-string">"SET NAME &#123;$conf['charset']&#125;"</span>);</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">table</span><span class="hljs-params">( $table )</span> //获取表</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_table = $table;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">where</span><span class="hljs-params">($where= NULL)</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_where = $where;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">data</span><span class="hljs-params">($data)</span> </span></span></span><br><span class="line"><span class="hljs-php">&#123; </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_data = $data;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">field</span><span class="hljs-params">($fields)</span></span>&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_fields = $fields;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">order</span><span class="hljs-params">($order)</span></span>&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_order = $order;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">limit</span><span class="hljs-params">($limit)</span></span>&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_limit = $limit;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> //添加数据</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$sql = <span class="hljs-string">"INSERT INTO &#123;$this-&gt;_table&#125; ("</span>;</span></span><br><span class="line"><span class="hljs-php">$fields = <span class="hljs-string">""</span>;</span></span><br><span class="line"><span class="hljs-php">$values = <span class="hljs-string">""</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">foreach</span>( <span class="hljs-keyword">$this</span>-&gt;_data <span class="hljs-keyword">as</span> $key =&gt; $val )</span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $fields == <span class="hljs-string">""</span> )$fields = $key;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">else</span> $fields .= <span class="hljs-string">","</span>.$key;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $values == <span class="hljs-string">""</span> )$values = <span class="hljs-string">"'&#123;$val&#125;'"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">else</span> $values .= <span class="hljs-string">","</span>.<span class="hljs-string">"'&#123;$val&#125;'"</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">$sql .= <span class="hljs-string">"&#123;$fields&#125; )VALUES(&#123;$values&#125;)"</span>;</span></span><br><span class="line"><span class="hljs-php">$ret = <span class="hljs-keyword">$this</span>-&gt;excute($sql);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $ret;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOne</span><span class="hljs-params">()</span> //获取一组数据</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//select id,name from table where id = 10</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( is_array(<span class="hljs-keyword">$this</span>-&gt;_fields) ) $fields = implode(<span class="hljs-string">','</span>, $fields);</span></span><br><span class="line"><span class="hljs-php">$sql = <span class="hljs-string">"SELECT &#123;$this-&gt;_fields&#125; FROM &#123;$this-&gt;_table&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">$this</span>-&gt;_where != <span class="hljs-keyword">NULL</span> ) $sql .= <span class="hljs-string">" WHERE &#123;$this-&gt;_where&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php">$ret = <span class="hljs-keyword">$this</span>-&gt;excute($sql); <span class="hljs-comment">//select 操作query 返回的是结果集</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $ret == <span class="hljs-keyword">false</span> )<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></span><br><span class="line"><span class="hljs-php">$row = $ret-&gt;fetch_assoc();</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">empty</span>($row) ) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $row;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getList</span><span class="hljs-params">()</span> //获取多组数据</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//select id,name from table where id &gt; 10</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//若查询字段为一维数组，以,拼接为目标字符串</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( is_array(<span class="hljs-keyword">$this</span>-&gt;_fields) ) <span class="hljs-keyword">$this</span>-&gt;_fields = implode(<span class="hljs-string">','</span>, <span class="hljs-keyword">$this</span>-&gt;_fields);</span></span><br><span class="line"><span class="hljs-php">$sql = <span class="hljs-string">"SELECT &#123;$this-&gt;_fields&#125; FROM &#123;$this-&gt;_table&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">$this</span>-&gt;_where != <span class="hljs-keyword">NULL</span> ) $sql .= <span class="hljs-string">" WHERE &#123;$this-&gt;_where&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;_order !=<span class="hljs-keyword">NULL</span>) $sql .= <span class="hljs-string">" ORDER BY &#123;$this-&gt;_order&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">$this</span>-&gt;_limit != <span class="hljs-keyword">NULL</span> ) $sql .= <span class="hljs-string">" LIMIT &#123;$this-&gt;_limit&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php">$ret = <span class="hljs-keyword">$this</span>-&gt;excute($sql);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $ret == <span class="hljs-keyword">false</span> )<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></span><br><span class="line"><span class="hljs-php">$result = [];</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">while</span> ( ($row = $ret-&gt;fetch_assoc()) != <span class="hljs-keyword">false</span>) &#123;</span></span><br><span class="line"><span class="hljs-php">$result[] = $row;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $result;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> //更新数据</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//update table set name = "wein" where id = 1</span></span></span><br><span class="line"><span class="hljs-php">$sql = <span class="hljs-string">"UPDATE &#123;$this-&gt;_table&#125; SET "</span>;</span></span><br><span class="line"><span class="hljs-php">$fields = <span class="hljs-string">""</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">foreach</span>( <span class="hljs-keyword">$this</span>-&gt;_data <span class="hljs-keyword">as</span> $key =&gt; $val )</span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $fields == <span class="hljs-string">""</span> )$fields = <span class="hljs-string">"&#123;$key&#125;='&#123;$val&#125;'"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">else</span> $fields .= <span class="hljs-string">","</span>.<span class="hljs-string">"&#123;$key&#125;='&#123;$val&#125;'"</span>;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">$this</span>-&gt;_where != <span class="hljs-keyword">NULL</span> ) $sql .= <span class="hljs-string">"&#123;$fields&#125; WHERE &#123;$this-&gt;_where&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">else</span>  $sql .= <span class="hljs-string">"&#123;$fields&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php">$ret = <span class="hljs-keyword">$this</span>-&gt;excute($sql);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $ret == <span class="hljs-keyword">false</span> )<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></span><br><span class="line"><span class="hljs-php">$row = <span class="hljs-keyword">$this</span>-&gt;_link-&gt;affected_rows;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $row == <span class="hljs-number">0</span> ) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span>//删除数据</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//拼接sql语句</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//delete from table where id =1</span></span></span><br><span class="line"><span class="hljs-php">$sql = <span class="hljs-string">"DELETE FROM &#123;$this-&gt;_table&#125; WHERE &#123;$this-&gt;_where&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php">$ret = <span class="hljs-keyword">$this</span>-&gt;excute($sql);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $ret;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">count</span><span class="hljs-params">()</span>  //统计数据</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$sql = <span class="hljs-string">"SELECT COUNT(&#123;$this-&gt;_fields&#125;) AS num FROM &#123;$this-&gt;_table&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">$this</span>-&gt;_where != <span class="hljs-keyword">NULL</span> ) $sql .= <span class="hljs-string">" WHERE &#123;$this-&gt;_where&#125;"</span>;</span></span><br><span class="line"><span class="hljs-php">$ret = <span class="hljs-keyword">$this</span>-&gt;excute($sql); <span class="hljs-comment">//select 操作query 返回的是结果集</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $ret == <span class="hljs-keyword">false</span> )<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></span><br><span class="line"><span class="hljs-php">$row = $ret-&gt;fetch_assoc();</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">empty</span>($row) ) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $row[<span class="hljs-string">'num'</span>];</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> //断开数据库连接</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_link-&gt;close();</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_link = <span class="hljs-keyword">NULL</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="二、分页类的封装"><a href="#二、分页类的封装" class="headerlink" title="二、分页类的封装"></a>二、分页类的封装</h2><blockquote><p>libs/Page文件夹</p></blockquote><p>1、通过Page.class.php文件来封装</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Page</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_totals = <span class="hljs-number">0</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $_pagesize = <span class="hljs-number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">( $pagesize, $total )</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_totals = $total;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;_pagesize = $pagesize;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getoffset</span><span class="hljs-params">()</span> //获取展示下一页开始的<span class="hljs-title">id</span>值</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$page = <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'page'</span>])?$_GET[<span class="hljs-string">'page'</span>]:<span class="hljs-number">1</span>;</span></span><br><span class="line"><span class="hljs-php">$offset = ($page <span class="hljs-number">-1</span>) * <span class="hljs-keyword">$this</span>-&gt;_pagesize;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $offset;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($left = <span class="hljs-number">2</span>)</span></span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$page = <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'page'</span>])?$_GET[<span class="hljs-string">'page'</span>]:<span class="hljs-number">1</span>;</span></span><br><span class="line"><span class="hljs-php">$totalPages = ceil(<span class="hljs-keyword">$this</span>-&gt;_totals / <span class="hljs-keyword">$this</span>-&gt;_pagesize);</span></span><br><span class="line"><span class="hljs-php">$html = <span class="hljs-string">'&lt;ul class="page-ui-box"&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $page &gt; <span class="hljs-number">1</span> )&#123;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="able"&gt;&lt;a href="?page=1"&gt;首页&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="able"&gt;&lt;a href="?page='</span>.($page<span class="hljs-number">-1</span>).<span class="hljs-string">'"&gt;上一页&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">else</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="unable"&gt;&lt;a&gt;首页&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="unable"&gt;&lt;a&gt;上一页&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//当前页的前面显示两个数字页面</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">$start = ($page - $left);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $start &lt;= <span class="hljs-number">0</span> ) $start = <span class="hljs-number">1</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">for</span>( $i = $start; $i &lt; $page; $i++ )</span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="able"&gt;&lt;a href="?page='</span>.$i.<span class="hljs-string">'"&gt;'</span>.$i.<span class="hljs-string">'&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="unable"&gt;&lt;a&gt;'</span>.$page.<span class="hljs-string">'&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//当前页的后面显示两个数字页面</span></span></span><br><span class="line"><span class="hljs-php">$end = $page + <span class="hljs-number">2</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $end &gt; $totalPages ) $end = $totalPages;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">for</span>( $i = $page + <span class="hljs-number">1</span>; $i &lt;= $end; $i++ )</span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="able"&gt;&lt;a href="?page='</span>.$i.<span class="hljs-string">'"&gt;'</span>.$i.<span class="hljs-string">'&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">if</span> ( $page &lt; $totalPages ) </span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="able"&gt;&lt;a href="?page='</span>.($page+<span class="hljs-number">1</span>).<span class="hljs-string">'"&gt;下一页&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="able"&gt;&lt;a href="?page='</span>.$totalPages.<span class="hljs-string">'"&gt;尾页&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">else</span></span></span><br><span class="line"><span class="hljs-php">&#123;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="unable"&gt;&lt;a&gt;下一页&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;li class="unable"&gt;&lt;a&gt;尾页&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">$html .= <span class="hljs-string">'&lt;/ul&gt;'</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $html;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、样式文件Page-ui.css</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* &#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;&#125;</span><br><span class="line"><span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">list-style</span>: none;&#125;</span><br><span class="line"><span class="hljs-selector-class">.page-ui-box</span> &#123;<span class="hljs-attribute">overflow</span>: hidden;<span class="hljs-attribute">border-left</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#CCC</span>;&#125;</span><br><span class="line"><span class="hljs-selector-class">.page-ui-box</span> <span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">float</span>: left;<span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">25px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#CCC</span>;<span class="hljs-attribute">border-left</span>:none;<span class="hljs-attribute">cursor</span>: pointer;&#125;</span><br><span class="line"><span class="hljs-selector-class">.unable</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-number">#EEE</span>;&#125;</span><br><span class="line"><span class="hljs-selector-class">.page-ui-box</span> <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">text-decoration</span>: none;&#125;</span><br><span class="line"><span class="hljs-selector-class">.able</span> <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>: blue;&#125;</span><br><span class="line"><span class="hljs-selector-class">.able</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">text-decoration</span>: underline;&#125;</span><br><span class="line"><span class="hljs-selector-tag">table</span>&#123;<span class="hljs-attribute">border-collapse</span>:collapse; <span class="hljs-attribute">border-spacing</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">border-left</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">border-top</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; &#125;</span><br><span class="line"><span class="hljs-selector-tag">td</span>&#123;<span class="hljs-attribute">border-right</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">border-bottom</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">3px</span> <span class="hljs-number">15px</span>; <span class="hljs-attribute">text-align</span>:left; <span class="hljs-attribute">color</span>:<span class="hljs-number">#3C3C3C</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="三、图片验证码类的封装"><a href="#三、图片验证码类的封装" class="headerlink" title="三、图片验证码类的封装"></a>三、图片验证码类的封装</h2><blockquote><p>libs/Verify文件夹</p></blockquote><p>1、Verify.class.php:</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Verify</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Verify</span></span></span></span><br><span class="line"><span class="hljs-php">&#123; </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $width=<span class="hljs-number">100</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $height=<span class="hljs-number">30</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $content=<span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $num=<span class="hljs-number">4</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $point=<span class="hljs-number">100</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">private</span> $line= <span class="hljs-number">4</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span>&#123;</span></span><br><span class="line"><span class="hljs-php"></span></span><br><span class="line"><span class="hljs-php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;</span></span><br><span class="line">     /**</span><br><span class="line"> * 字母+数字的验证码生成</span><br><span class="line"><span class="hljs-php"> */</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">// 开启session</span></span></span><br><span class="line"><span class="hljs-php">session_start();</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//1.创建黑色画布</span></span></span><br><span class="line"><span class="hljs-php">$image = imagecreatetruecolor(<span class="hljs-keyword">$this</span>-&gt;width, <span class="hljs-keyword">$this</span>-&gt;height);</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//2.为画布定义(背景)颜色</span></span></span><br><span class="line"><span class="hljs-php">$bgcolor = imagecolorallocate($image, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>);</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//3.填充颜色</span></span></span><br><span class="line"><span class="hljs-php">imagefill($image, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, $bgcolor);</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">// 4.设置验证码内容</span></span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//4.1 定义验证码的内容</span></span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//4.1 创建一个变量存储产生的验证码数据，便于用户提交核对</span></span></span><br><span class="line"><span class="hljs-php">$captcha = <span class="hljs-string">""</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-keyword">$this</span>-&gt;num; $i++) &#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">// 字体大小</span></span></span><br><span class="line"><span class="hljs-php">    $fontsize = <span class="hljs-number">5</span>;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">// 字体颜色 随机生成字体颜色</span></span></span><br><span class="line"><span class="hljs-php">    $fontcolor = imagecolorallocate($image, mt_rand(<span class="hljs-number">0</span>, <span class="hljs-number">120</span>), mt_rand(<span class="hljs-number">0</span>, <span class="hljs-number">120</span>), mt_rand(<span class="hljs-number">0</span>, <span class="hljs-number">120</span>));</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">// 设置字体内容</span></span></span><br><span class="line"><span class="hljs-php">    $fontcontent = substr(<span class="hljs-keyword">$this</span>-&gt;content, mt_rand(<span class="hljs-number">0</span>, strlen(<span class="hljs-keyword">$this</span>-&gt;content)), <span class="hljs-number">1</span>);</span></span><br><span class="line"><span class="hljs-php">    $captcha .= $fontcontent;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">// 显示的坐标</span></span></span><br><span class="line"><span class="hljs-php">    $x = ($i * <span class="hljs-keyword">$this</span>-&gt;width / <span class="hljs-keyword">$this</span>-&gt;num) + mt_rand(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);</span></span><br><span class="line"><span class="hljs-php">    $y = mt_rand(<span class="hljs-keyword">$this</span>-&gt;height/<span class="hljs-number">3</span>, <span class="hljs-keyword">$this</span>-&gt;height/<span class="hljs-number">2</span>);</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">// 填充内容到画布中</span></span></span><br><span class="line"><span class="hljs-php">    imagestring($image, $fontsize, $x, $y, $fontcontent, $fontcolor);</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php">$_SESSION[<span class="hljs-string">"captcha"</span>] = $captcha;</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//4.3 设置背景干扰元素</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-keyword">$this</span>-&gt;point; $i++) &#123;</span></span><br><span class="line"><span class="hljs-php">    $pointcolor = imagecolorallocate($image, mt_rand(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>), mt_rand(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>), mt_rand(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>));</span></span><br><span class="line"><span class="hljs-php">    imagesetpixel($image, mt_rand(<span class="hljs-number">1</span>, <span class="hljs-keyword">$this</span>-&gt;width), mt_rand(<span class="hljs-number">1</span>, <span class="hljs-keyword">$this</span>-&gt;height), $pointcolor);</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//4.4 设置干扰线</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-keyword">$this</span>-&gt;line; $i++) &#123;</span></span><br><span class="line"><span class="hljs-php">    $linecolor = imagecolorallocate($image, mt_rand(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>), mt_rand(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>), mt_rand(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>));</span></span><br><span class="line"><span class="hljs-php">    imageline($image, mt_rand(<span class="hljs-number">1</span>, <span class="hljs-keyword">$this</span>-&gt;width), mt_rand(<span class="hljs-number">1</span>, <span class="hljs-keyword">$this</span>-&gt;height), mt_rand(<span class="hljs-number">1</span>, <span class="hljs-keyword">$this</span>-&gt;width), mt_rand(<span class="hljs-number">1</span>, <span class="hljs-keyword">$this</span>-&gt;height), $linecolor);</span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">return</span> $image;</span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//6.输出图片到浏览器</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">// imagepng($image);</span></span></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//7.销毁图片</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">// imagedestroy($image);</span></span></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">width</span><span class="hljs-params">($width)</span>  //设置验证码图片的宽度</span></span></span><br><span class="line"><span class="hljs-php">  &#123;  </span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">$this</span>-&gt;width=$width;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">height</span><span class="hljs-params">($height)</span>  //设置验证码图片的高度</span></span></span><br><span class="line"><span class="hljs-php">  &#123;</span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">$this</span>-&gt;height=$height;</span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLine</span><span class="hljs-params">($line)</span>  //设置验证码图片的干扰线数量</span></span></span><br><span class="line"><span class="hljs-php">  &#123;</span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">$this</span>-&gt;line=$line;</span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php"> </span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setNum</span><span class="hljs-params">($num)</span> // 设置验证码的位数</span></span></span><br><span class="line"><span class="hljs-php">  &#123;</span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">$this</span>-&gt;num=$num;</span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setChars</span><span class="hljs-params">($content)</span>  //设置验证码出现的字符集， 比如设置 123456789,那么验证码中出现的字符只能是这个字符串中的某几个</span></span></span><br><span class="line"><span class="hljs-php">  &#123;</span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">$this</span>-&gt;content=$content;</span></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPoint</span><span class="hljs-params">($point)</span>  // 设置验证码图片中出现的杂点数量</span></span></span><br><span class="line"><span class="hljs-php">  &#123;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">$this</span>-&gt;point=$point;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</span></span><br><span class="line"><span class="hljs-php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">&#125;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、Verify类的实例verify.php：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//5.向浏览器输出图片头信息</span></span></span><br><span class="line"><span class="hljs-php"> header(<span class="hljs-string">'content-type:image/png'</span>);</span></span><br><span class="line"><span class="hljs-php">spl_autoload_register(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($class)</span></span>&#123; <span class="hljs-comment">//$class = libs\Db\Mysql</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//libs\Db\Mysql -&gt; libs/Db/Mysql</span></span></span><br><span class="line"><span class="hljs-php">$class_path = str_replace(<span class="hljs-string">'\\'</span>, <span class="hljs-string">'/'</span>, $class);</span></span><br><span class="line"><span class="hljs-php">$class_path .= <span class="hljs-string">'.class.php'</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">require_once</span> $class_path;</span></span><br><span class="line"><span class="hljs-php">&#125;);</span></span><br><span class="line"><span class="hljs-php"> <span class="hljs-keyword">use</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Verify</span>\<span class="hljs-title">Verify</span>;</span></span><br><span class="line"><span class="hljs-php">    $verify=<span class="hljs-keyword">new</span> Verify();</span></span><br><span class="line"><span class="hljs-php">    $char=<span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span></span><br><span class="line"><span class="hljs-php">    $verifyhtml=$verify-&gt;width(<span class="hljs-number">200</span>)-&gt;height(<span class="hljs-number">80</span>)-&gt;setLine(<span class="hljs-number">6</span>)-&gt;setNum(<span class="hljs-number">6</span>)-&gt;setChars($char)-&gt;setPoint(<span class="hljs-number">500</span>)-&gt;show(); <span class="hljs-comment">//链式操作</span></span></span><br><span class="line"><span class="hljs-php">    </span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">//6.输出图片到浏览器</span></span></span><br><span class="line"><span class="hljs-php">    imagepng($verifyhtml);</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">//7.销毁图片</span></span></span><br><span class="line"><span class="hljs-php">    imagedestroy($verifyhtml);</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="四、运用实例"><a href="#四、运用实例" class="headerlink" title="四、运用实例"></a>四、运用实例</h2><p>这里通过start.php文件来运用</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?php</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//namespace "上级文件夹名称"</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">// require_once 'libs/Db/Mysql.class.php';</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//引入命名空间</span></span></span><br><span class="line"><span class="hljs-php">spl_autoload_register(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($class)</span></span>&#123; <span class="hljs-comment">//$class = libs\Db\Mysql</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-comment">//libs\Db\Mysql -&gt; libs/Db/Mysql</span></span></span><br><span class="line"><span class="hljs-php">$class_path = str_replace(<span class="hljs-string">'\\'</span>, <span class="hljs-string">'/'</span>, $class);</span></span><br><span class="line"><span class="hljs-php">$class_path .= <span class="hljs-string">'.class.php'</span>;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-keyword">require_once</span> $class_path;</span></span><br><span class="line"><span class="hljs-php">&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">use</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Db</span>\<span class="hljs-title">Mysql</span>;</span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-keyword">use</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Page</span>\<span class="hljs-title">Page</span>;</span></span><br><span class="line"><span class="hljs-php">    </span></span><br><span class="line"><span class="hljs-php">    $db = Mysql::init(); <span class="hljs-comment">//新建Mysql对象</span></span></span><br><span class="line"><span class="hljs-php">    $totals = $db-&gt;table(<span class="hljs-string">"contact"</span>)-&gt;field(<span class="hljs-string">"id"</span>)-&gt;count();</span></span><br><span class="line"><span class="hljs-php">    $pagesize = <span class="hljs-number">3</span>; <span class="hljs-comment">//每一页显示的数据条数</span></span></span><br><span class="line"><span class="hljs-php">    $page = <span class="hljs-keyword">new</span> Page($pagesize,$totals); <span class="hljs-comment">//新建Page对象</span></span></span><br><span class="line"><span class="hljs-php">    $pagehtml = $page-&gt;show();</span></span><br><span class="line"><span class="hljs-php">    $left = $page-&gt;getoffset();</span></span><br><span class="line"><span class="hljs-php">    $db-&gt;setDebug(<span class="hljs-keyword">true</span>);</span></span><br><span class="line"><span class="hljs-php">    $data=$db-&gt;table(<span class="hljs-string">"contact"</span>)-&gt;where(<span class="hljs-keyword">NULL</span>)-&gt;field(<span class="hljs-string">"*"</span>)-&gt;order(<span class="hljs-string">"id desc"</span>)-&gt;limit(<span class="hljs-string">"&#123;$left&#125;,&#123;$pagesize&#125;"</span>)-&gt;getList(); <span class="hljs-comment">//链式操作</span></span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">// $data = $db-&gt;getList('contact', NULL,"*", 'id desc', "&#123;$left&#125;, &#123;$pagesize&#125;");</span></span></span><br><span class="line"><span class="hljs-php">    <span class="hljs-comment">// var_dump($data);</span></span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"libs/Page/page-ui.css"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>工作<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>QQ<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机号码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>留言内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">    <span class="hljs-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">foreach</span> ($data <span class="hljs-keyword">as</span> $key =&gt; $val) &#123; <span class="hljs-meta">?&gt;</span></span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-php"><span class="hljs-meta">&lt;?</span>=$val[<span class="hljs-string">'id'</span>]<span class="hljs-meta">?&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-php"><span class="hljs-meta">&lt;?</span>=$val[<span class="hljs-string">'userName'</span>]<span class="hljs-meta">?&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-php"><span class="hljs-meta">&lt;?</span>=$val[<span class="hljs-string">'job'</span>]<span class="hljs-meta">?&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-php"><span class="hljs-meta">&lt;?</span>=$val[<span class="hljs-string">'qqnum'</span>]<span class="hljs-meta">?&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-php"><span class="hljs-meta">&lt;?</span>=$val[<span class="hljs-string">'phone'</span>]<span class="hljs-meta">?&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-php"><span class="hljs-meta">&lt;?</span>=$val[<span class="hljs-string">'remark'</span>]<span class="hljs-meta">?&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">    <span class="hljs-php"><span class="hljs-meta">&lt;?php</span> &#125; <span class="hljs-meta">?&gt;</span></span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"><span class="hljs-php"><span class="hljs-meta">&lt;?</span>=$pagehtml<span class="hljs-meta">?&gt;</span></span> <span class="hljs-comment">&lt;!-- 显示分页样式 --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://localhost/space/verify.php"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"resetPic(this)"</span>&gt;</span> <span class="hljs-comment">&lt;!-- 显示图片验证码 --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resetPic</span><span class="hljs-params">(obj)</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="hljs-javascript">        $(obj).attr(<span class="hljs-string">'src'</span>, <span class="hljs-string">"http://localhost/space/verify.php"</span>); <span class="hljs-comment">//点击二维码刷新</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>附：本人建立test数据库contact表的sql文件：</em></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-keyword">test</span>; </span><br><span class="line"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> contact( </span><br><span class="line">     <span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span> auto_increment, </span><br><span class="line">     userName <span class="hljs-built_in">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">unique</span>, </span><br><span class="line">     job <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>, </span><br><span class="line">     qqnum <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>, </span><br><span class="line">     phone <span class="hljs-built_in">char</span>(<span class="hljs-number">100</span>), </span><br><span class="line">     remark <span class="hljs-built_in">text</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章中已经介绍了PHP连接数据库的方法以及最基本的对数据库的操作，但并没有实现模块化，所有的代码全都集中在表现页面中，&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://jdsheng.cn/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://jdsheng.cn/tags/PHP/"/>
    
      <category term="数据库" scheme="https://jdsheng.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="验证码" scheme="https://jdsheng.cn/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>node.js学习记录</title>
    <link href="https://jdsheng.cn/2020/06/06/node.js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://jdsheng.cn/2020/06/06/node.js学习记录/</id>
    <published>2020-06-06T15:00:23.004Z</published>
    <updated>2019-10-02T03:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>–<a href="https://www.nodebeginner.org/index-zh-cn.html#analyzing-our-http-server" target="_blank" rel="noopener">node.js入门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;–&lt;a href=&quot;https://www.nodebeginner.org/index-zh-cn.html#analyzing-our-http-server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js入门&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="NODE JS" scheme="https://jdsheng.cn/categories/NODE-JS/"/>
    
    
      <category term="node.js" scheme="https://jdsheng.cn/tags/node-js/"/>
    
  </entry>
  
</feed>
